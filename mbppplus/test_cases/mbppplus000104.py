import numpy as np
['import math']

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[10, 5], [4, 5], [4, 10], [0.5, 5], [0.7027468654940519, 0.5], [0.7335291819198695, 0.7335291819198695], [0.5, 0.5], [4, 0.5], [0.7027468654940519, 0.5661462978153864], [0.7027468654940519, 5], [0.5, 4], [0.492181629811239, 0.492181629811239], [0.5, 0.28069556559376435], [0.7213641388816401, 0.5], [5, 5], [0.31110334517211913, 5], [4, 6], [0.9167131745198713, 0.5661462978153864], [0.9167131745198713, 0.7213641388816401], [0.31110334517211913, 0.5], [0.894771544934736, 0.6584073971476168], [0.5, 6], [0.5, 0.5661462978153864], [0.5661462978153864, 0.894771544934736], [0.5, 0.7335291819198695], [0.7335291819198695, 0.5], [6, 5], [5, 4], [0.9167131745198713, 0.492181629811239], [0.492181629811239, 0.5661462978153864], [0.7335291819198695, 4], [0.7027468654940519, 1.2069759206398682], [0.682671724053624, 0.492181629811239], [0.6584073971476168, True], [4, 98], [0.6012317221228634, 0.7335291819198695], [1.0522681221757273, 0.7335291819198695], [4, 4], [0.28069556559376435, 0.5316974012629883], [1.2069759206398682, 0.5661462978153864], [0.6012317221228634, 0.5661462978153864], [0.7213641388816401, 0.7213641388816401], [0.9167131745198713, 4], [1.9431531904128063, 1.2069759206398682], [5, 0.5], [True, True], [0.8450165089801128, 0.492181629811239], [0.39584711221219915, 0.492181629811239], [6, 6], [0.5661462978153864, 0.492181629811239], [0.5, True], [0.7335291819198695, 0.9167131745198713], [True, 5], [0.31110334517211913, 0.7335291819198695], [0.25319882598470783, 0.7335291819198695], [0.894771544934736, 0.894771544934736], [0.9167131745198713, 0.894771544934736], [0.39584711221219915, 1.3528960048460803], [0.7993772590469483, 0.6012317221228634], [0.6584073971476168, 0.894771544934736], [0.7134218290804064, 0.25319882598470783], [5, 0.4826503239931337], [0.31110334517211913, 0.31110334517211913], [1.9431531904128063, 1.9431531904128063], [1.2069759206398682, 0.492181629811239], [0.9167131745198713, 0.9167131745198713], [4, 3], [0.5316974012629883, 1.2069759206398682], [0.4826503239931337, 0.5], [3, 3], [0.5316974012629883, 0.5316974012629883], [0.5661462978153864, 3], [0.7027468654940519, 0.7134218290804064], [0.7027468654940519, 0.5314253015161418], [0.6066623230028867, 0.492181629811239], [0.9861962005378273, 0.28069556559376435], [5, 6], [0.714370838265556, 0.7335291819198695], [0.7335291819198695, 6], [0.894771544934736, 0.5], [0.4559293649982712, 0.714370838265556], [1.2069759206398682, 1.2069759206398682], [0.6584073971476168, 0.6584073971476168], [0.4559293649982712, 1.197600099889013], [0.5661462978153864, 0.5], [0.4559293649982712, 0.25319882598470783], [1.4678677501506512, 1.4678677501506512], [0.31110334517211913, 0.2989266998025376], [0.894771544934736, 0.34716723618756606], [0.2989266998025376, 1.9431531904128063], [0.39584711221219915, 0.39584711221219915], [0.28069556559376435, 0.25527358064266886], [1.3528960048460803, 0.7027468654940519], [0.492181629811239, 0.5316974012629883], [0.5, 0.682671724053624], [1.9431531904128063, 0.7027468654940519], [0.7213641388816401, 0.3245051312142714], [0.24333546688495555, 0.4826503239931337], [0.5, 0.7213641388816401], [1.3528960048460803, 0.714370838265556], [0.25527358064266886, 2], [0.4559293649982712, 0.9861962005378273], [1.2069759206398682, 0.947064480762244]]
results = [314.1592653589793, 125.66370614359172, 251.32741228718345, 15.707963267948966, 2.207744389969368, 3.3807624838730685, 1.5707963267948966, 12.566370614359172, 2.4998126258076927, 22.077443899693677, 12.566370614359172, 1.5220561298167008, 0.881831126764602, 2.2662322792736878, 157.07963267948966, 9.77359983699939, 150.79644737231007, 3.260934029635201, 4.154969973864772, 0.977359983699939, 3.701576542313698, 18.84955592153876, 1.778601050073877, 3.1828832187942933, 2.304449889113193, 2.304449889113193, 188.49555921538757, 125.66370614359172, 2.834906510218224, 1.7507895272186837, 18.435599112905543, 5.329388635241564, 2.1111407238966935, 4.1368956838962605, 2463.0086404143976, 2.771016750754733, 4.849798314930405, 100.53096491487338, 0.9377346369071032, 4.2934572797279085, 2.1387027446109004, 3.2695573932880806, 23.039514996164847, 14.736200242229398, 15.707963267948966, 6.283185307179586, 2.613186838734224, 1.2241446797676865, 226.1946710584651, 1.7507895272186835, 3.141592653589793, 4.225039146741841, 31.41592653589793, 1.4338441385692666, 1.1669680129281013, 5.030419426951899, 5.153775606916359, 3.364896912642694, 3.0197677605598994, 3.701576542313698, 1.1349793229527434, 15.162907121095623, 0.6081199207328377, 23.72432956249001, 3.7325348759067345, 5.280156732883115, 75.39822368615503, 4.03220878927197, 1.5162907121095621, 56.548667764616276, 1.776269847594895, 10.671606300443262, 3.150106081667905, 2.3465024562200836, 1.8760840541925843, 1.7393170134624834, 188.49555921538757, 3.2924635980535184, 27.653398669358314, 2.811007712208156, 2.046450058894108, 9.15328700889493, 2.7237627195053467, 3.430751458024108, 1.778601050073877, 0.7253358124281483, 13.537975573201377, 0.5843179888929695, 1.9517795566984772, 3.6496533449513158, 0.9845433211349424, 0.45021637850271834, 5.973697129821808, 1.6442574037359197, 2.1446764731003434, 8.579971109969904, 1.4708080062954507, 0.7379346167290042, 2.2662322792736878, 6.072506667354849, 3.2078624224102805, 2.825145099108242, 7.18220874178766]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "lateralsuface_cylinder"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)', 'assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)', 'assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
