import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))], [((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))], [((1, 1), (2, 2), (3, 3), (4, 4)), ((5, 5), (6, 6), (7, 7), (8, 8))], [(), ()], [((1.5, 2.25), (3.75, 4.5), (6.25, 7.5)), ((0.5, 0.75), (1.5, 1.25), (2.5, 2.75))], [((True, False), (False, True), (True, True)), ((False, False), (True, True), (False, True))], [((1, 2), (3, 4), (5, 6)), ((7, 8), (9, 10))], [((1.5, -2.25), (-3.75, 4.5)), ((-0.5, 0.75), (1.5, -1.25))], [((True, False), (False, True)), ((False, True), (True, False))], [((1.5, -2.25), (-3.75, 4.5)), ((1.5, -1.25),)], [((2.75, -2.25), (-3.75, 4.5)), ((1.5, -1.25),)], [((1.5, -1.25), (1.5, -1.25)), ((1.5, -1.25),)], [(), ((-3.75, 4.5),)], [((-3.75, 4.5),), ((-3.75, 4.5),)], [((False, True),), ((False, True), (True, False))], [((True, False), (False, True), (False, True)), ((False, True), (True, False))], [((-3.75, 4.5),), ()], [((1.5, -2.25),), ((1.5, -2.25), (-3.75, 4.5))], [((1.5, -1.25),), ((2.75, -2.25), (-3.75, 4.5))], [((1.5, -2.25), (-3.75, 4.5), (1.5, -2.25), (-3.75, 4.5)), ((-0.5, 0.75), (1.5, -1.25), (-0.5, 0.75))], [((True, False), (False, True)), ((False, True), (True, False), (True, False))], [(), ((1.5, -2.25), (-3.75, 4.5))], [((False, True), (False, True)), ((False, True), (True, False))], [((True, False), (True, True)), ((False, True), (True, False), (True, False))], [((True, True), (False, True)), ((True, True), (False, True))], [((False, True),), ((False, True),)], [((1.5, -1.25),), ((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5))], [((-3.75, 4.5), (-3.75, 4.5)), ((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5))], [((True, False), (False, True), (False, True)), ((False, True), (True, False), (True, False))], [((1, 1), (2, 2), (3, 3), (4, 4), (1, 1)), ((5, 5), (6, 6), (7, 7), (8, 8))], [((True, False), (False, True)), ((False, True), (True, False), (False, True))], [((1.5, 2.25), (6.25, 7.5)), ((0.5, 0.75), (1.5, 1.25), (2.5, 2.75))], [((1.5, -1.25),), ((1.5, -1.25),)], [((False, True), (False, True), (False, True)), ((False, True), (False, True))], [((1.5, -2.25),), ((1.5, -2.25), (-3.75, 4.901681689356799), (-3.75, 4.5))], [((-0.5, 0.75), (1.5, -1.25), (-0.5, 0.75)), ((-0.5, 0.75), (1.5, -1.25), (-0.5, 0.75))], [((2.75, -0.5), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5)), ((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5))], [((False, True),), ()], [((1.5, -1.25), (1.5, -1.25)), ((1.5, -1.25), (1.5, -1.25))], [((2.75, -2.25), (-3.75, 4.5), (2.75, -2.25)), ((1.5, -1.25),)], [((1.5, -1.25),), ((1.5, -1.25), (1.5, -1.25))], [((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5), (2.75, -2.25)), ((2.75, -2.25), (-3.75, 4.5))], [((-2.25, 0.75), (1.5, -1.25), (-0.5, 0.75)), ((-0.5, 0.75), (1.5, -1.25), (-0.5, 0.75), (-0.5, 0.75))], [((1.5, -2.25), (-3.75, 4.5), (1.5, -2.25), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5)), ((-0.5, 0.75), (1.5, -1.25), (-0.5, 0.75))], [((False, True), (True, False)), ((False, True),)], [((2.75, -0.5), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5)), ((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5))], [((2.75, -2.25), (-3.75, 4.5), (2.75, -2.25), (-3.75, 4.5)), ((2.75, -2.25), (-3.75, 4.5), (2.75, -2.25))], [((-3.75, 4.5), (-3.75, 4.5)), ((-3.75, 4.5), (-3.75, 4.5))], [((1.5, -1.25), (-0.5, 0.75)), ((1.5, -1.25), (-0.5, 0.75))], [((0.5, 0.75), (1.5, 1.25), (2.5, 2.75)), ((0.5, 0.75), (1.5, 1.25), (2.5, 2.75))], [((1.884494549830971, -2.25), (2.75, -2.25), (-3.75, 4.5), (2.75, -2.25)), ((1.884494549830971, -2.25), (2.75, -2.25), (-3.75, 4.5), (2.75, -2.25), (2.75, -2.25))], [((1.5, -2.25),), ((1.5, -2.25),)], [((1, 2), (3, 4), (5, 6)), ((1, 2), (3, 4), (6, 6))], [(), ((1.5, -2.25),)], [((5, 5), (6, 6), (7, 7), (8, 8), (8, 8)), ((5, 5), (6, 6), (7, 7), (8, 8), (8, 8))], [((1.5, 2.25), (6.25, 6.646053579170405)), ((0.5, 0.75), (1.5, 1.25), (2.5, 2.75))], [((-0.5, 0.75), (1.5, -1.25), (-0.5, 0.75), (-0.5, 0.75)), ((-0.5, 0.75), (1.5, -1.25), (7.5, 0.75), (-0.5, 0.75))], [((2.75, -2.25), (-3.75, 4.5), (-3.75, 6.129668563099175), (2.75, -2.25)), ((2.75, -2.25), (-3.75, 4.5))], [((2.75, -2.25), (-3.75, 4.5)), ((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5))], [((True, False), (False, True), (True, True)), ((False, False), (True, True), (False, True), (False, False))], [((-3.75, 4.5),), ((-3.75, 0.5), (-3.75, 4.5))], [((-0.5, 0.75), (1.5, -1.25), (-0.5, 0.75)), ((-0.5, 0.75), (-0.5, 0.75), (0.9219506936109663, -1.25))], [((1.5, -2.25),), ((1.5, -2.25), (-3.75, 4.901681689356799))], [((-0.5, 0.75), (1.5, -1.25)), ((-0.5, 0.75), (1.5, -1.25))], [((5, 5), (6, 6), (7, 7), (8, 8), (7, 7), (8, 8)), ((5, 5), (6, 6), (7, 7), (8, 8), (7, 7), (8, 8))], [((2.75, -2.25), (-3.75, 4.5), (2.75, -2.25), (2.75, -2.25)), ((1.5, -1.25),)], [((1.5, 2.25), (6.25, 7.5), (6.25, 7.5)), ((0.5, 0.75), (1.5, 1.25), (2.5, 2.75), (0.5, 0.75))], [((False, True), (True, False)), ((False, True), (True, False))], [(), ((1.5, -1.25), (1.5, -1.25))], [((True, False), (False, True), (True, True)), ((True, False), (False, True), (True, True))], [((1.5, -1.25), (-0.5, 0.75)), ((1.5, -1.25), (-0.5, 0.75), (-0.5, 0.75))], [((1.5, -1.25), (1.5, -1.25)), ((2.75, -2.25), (-3.75, 4.5))], [((1.5, -1.25), (-0.5, 0.75)), ((1.5, -1.25), (-0.5, 0.75), (1.5, -1.25))], [((1.5, 2.25), (6.25, 6.646053579170405), (6.25, 6.646053579170405)), ((0.5, 0.75), (1.5, 1.25), (2.5, 2.75))], [((1.884494549830971, -2.25), (2.75, -2.25), (-3.75, 4.5), (2.75, -2.25)), ((1.884494549830971, -2.25), (2.75, -2.25), (-3.75, 4.5), (2.75, -2.25), (2.75, 6.25), (2.75, -2.25), (2.75, -2.25))], [((1.5, -1.25),), ((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5))], [((6.646053579170405, 1.25), (0.5, 0.75), (1.5, 1.25), (2.5, 2.75), (1.5, 1.25)), ((0.5, 0.75), (1.5, 1.25), (2.5, 2.75), (1.5, 1.25))], [((-3.75, 4.5),), ((2.75, -2.25), (-3.75, 4.5))], [((3, 4), (6, 6)), ((1, 2), (3, 4), (6, 6))], [((-2.25, 0.75), (1.5, -1.25), (-0.5, 0.75)), ((-2.25, 0.75), (1.5, -1.25), (-0.5, 0.75))], [((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5), (2.75, -2.25), (-3.75, 4.5)), ((2.75, -2.25), (-3.75, 4.5))], [((-0.5, 0.75), (1.5, -1.25), (-0.5, 0.75), (-0.5, 0.75), (1.5, -1.25)), ((-0.5, 0.75), (1.5, -1.25), (7.5, 0.75), (-0.5, 0.75))], [((2.75, -2.25), (-3.75, 4.5)), ((2.75, -2.25), (-3.75, 4.5))], [((1.5, 2.25), (6.25, 6.646053579170405), (6.25, 6.646053579170405)), ((1.5, 2.25), (6.25, 6.646053579170405), (6.25, 6.646053579170405))], [((1.5, -2.25), (-3.75, 4.5)), ((1.5, -2.25), (-3.75, 4.5))], [((-0.5, 0.75), (-0.5, 0.75)), ((1.5, -1.25), (-0.5, 0.75), (-0.5, 0.75))], [((0.5, 0.75), (1.5, 1.25), (2.5, 2.75), (0.5, 0.75)), ((0.5, 0.75), (1.5, 1.25), (2.5, 2.75), (0.5, 0.75), (2.5, 2.75))], [((1.5, -2.25), (-3.75, 4.5), (1.5, -2.25), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5)), ((1.5, -2.25), (-3.75, 4.5), (1.5, -2.25), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5))], [((5, 5), (6, 6), (7, 7), (8, 8), (7, 7), (8, 8)), ((5, 5), (7, 7), (8, 8), (7, 7), (8, 8))], [((1.5, -1.25),), ((-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5))], [((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5)), ((2.75, -2.25), (-3.75, 4.5))], [((-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5)), ((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5))], [((False, True), (True, False), (False, True)), ((False, True),)], [((-0.5, 0.75), (1.5, -1.25), (-0.5, 0.75), (1.5, -1.25)), ((-0.5, 0.75), (1.5, -1.25), (-0.5, 0.75), (-0.5, 0.75), (1.5, -1.25))], [((False, True), (False, True)), ((False, True), (True, False), (False, True))], [((False, True), (True, False), (False, True)), ((False, True), (True, False), (False, True))], [((2.75, -2.25), (-3.75, 4.5), (2.75, -2.25)), ((3.735487464883578, -2.25), (-3.75, 4.5), (2.75, -2.25), (-3.75, 4.5))], [((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5), (-3.75, 4.5), (2.75, -2.25)), ((1.5, -1.25),)], [((2.75, -2.25), (-3.75, 4.5)), ((1.0743535791751668, -1.25),)], [((2.75, -2.25), (-3.75, 4.5), (2.75, -2.25)), ((2.75, -2.25), (-3.75, 4.5))], [((-3.75, 4.5), (2.75, -2.25), (-3.75, 4.5)), ((2.75, -2.25), (-3.75, 4.5), (2.75, -2.25))], [((1, 2), (1, 10), (3, 4), (5, 6)), ((1, 2), (1, 10), (3, 4), (5, 6))], [((1.5, 2.25), (6.25, 7.5)), ((0.5, 0.75), (2.5, 3.582638962127178), (1.5, 1.25), (2.5, 2.75), (1.5, 1.25))], [((-3.75, 4.5), (-3.75, 4.5)), ((-3.75, 4.5), (0.9219506936109663, 4.5), (-3.75, 4.5))], [((2.75, -2.25), (-3.75, 4.5), (-3.75, 4.5)), ((2.75, -2.25),)], [((1.5, 2.25), (3.75, 0.5), (6.25, 7.5), (6.25, 7.5)), ((1.5, 2.25), (3.75, 4.5), (6.25, 7.5), (6.25, 7.5))], [((-3.75, 4.5), (-3.75, 4.5)), ((-3.75, 4.5),)], [((False, False), (False, True)), ((False, True),)], [((2.75, -2.25), (-3.75, 4.5), (2.75, -2.25)), ((2.75, -2.25), (-3.75, 4.5), (2.75, -2.25))]]
results = [((6, 21), (12, 45), (2, 9), (7, 30)), ((14, 32), (20, 60), (6, 20), (16, 44)), ((24, 45), (30, 77), (12, 33), (27, 60)), ((5, 5), (12, 12), (21, 21), (32, 32)), (), ((0.75, 1.6875), (5.625, 5.625), (15.625, 20.625)), ((0, 0), (0, 1), (0, 1)), ((7, 16), (27, 40)), ((-0.75, -1.6875), (-5.625, -5.625)), ((0, 0), (0, 0)), ((2.25, 2.8125),), ((4.125, 2.8125),), ((2.25, 1.5625),), (), ((14.0625, 20.25),), ((0, 1),), ((0, 0), (0, 0)), (), ((2.25, 5.0625),), ((4.125, 2.8125),), ((-0.75, -1.6875), (-5.625, -5.625), (-0.75, -1.6875)), ((0, 0), (0, 0)), (), ((0, 1), (0, 0)), ((0, 0), (1, 0)), ((1, 1), (0, 1)), ((0, 1),), ((4.125, 2.8125),), ((-10.3125, -10.125), (14.0625, 20.25)), ((0, 0), (0, 0), (0, 0)), ((5, 5), (12, 12), (21, 21), (32, 32)), ((0, 0), (0, 0)), ((0.75, 1.6875), (9.375, 9.375)), ((2.25, 1.5625),), ((0, 1), (0, 1)), ((2.25, 5.0625),), ((0.25, 0.5625), (2.25, 1.5625), (0.25, 0.5625)), ((7.5625, 1.125), (14.0625, 20.25), (14.0625, 20.25), (14.0625, 20.25)), (), ((2.25, 1.5625), (2.25, 1.5625)), ((4.125, 2.8125),), ((2.25, 1.5625),), ((7.5625, 5.0625), (14.0625, 20.25)), ((1.125, 0.5625), (2.25, 1.5625), (0.25, 0.5625)), ((-0.75, -1.6875), (-5.625, -5.625), (-0.75, -1.6875)), ((0, 1),), ((7.5625, 1.125), (14.0625, 20.25), (14.0625, 20.25), (14.0625, 20.25)), ((7.5625, 5.0625), (14.0625, 20.25), (7.5625, 5.0625)), ((14.0625, 20.25), (14.0625, 20.25)), ((2.25, 1.5625), (0.25, 0.5625)), ((0.25, 0.5625), (2.25, 1.5625), (6.25, 7.5625)), ((3.551319708342634, 5.0625), (7.5625, 5.0625), (14.0625, 20.25), (7.5625, 5.0625)), ((2.25, 5.0625),), ((1, 4), (9, 16), (30, 36)), (), ((25, 25), (36, 36), (49, 49), (64, 64), (64, 64)), ((0.75, 1.6875), (9.375, 8.307566973963006)), ((0.25, 0.5625), (2.25, 1.5625), (-3.75, 0.5625), (0.25, 0.5625)), ((7.5625, 5.0625), (14.0625, 20.25)), ((7.5625, 5.0625), (14.0625, 20.25)), ((0, 0), (0, 1), (0, 1)), ((14.0625, 2.25),), ((0.25, 0.5625), (-0.75, -0.9375), (-0.46097534680548313, -0.9375)), ((2.25, 5.0625),), ((0.25, 0.5625), (2.25, 1.5625)), ((25, 25), (36, 36), (49, 49), (64, 64), (49, 49), (64, 64)), ((4.125, 2.8125),), ((0.75, 1.6875), (9.375, 9.375), (15.625, 20.625)), ((0, 1), (1, 0)), (), ((1, 0), (0, 1), (1, 1)), ((2.25, 1.5625), (0.25, 0.5625)), ((4.125, 2.8125), (-5.625, -5.625)), ((2.25, 1.5625), (0.25, 0.5625)), ((0.75, 1.6875), (9.375, 8.307566973963006), (15.625, 18.276647342718615)), ((3.551319708342634, 5.0625), (7.5625, 5.0625), (14.0625, 20.25), (7.5625, 5.0625)), ((4.125, 2.8125),), ((3.3230267895852026, 0.9375), (0.75, 0.9375), (3.75, 3.4375), (3.75, 3.4375)), ((-10.3125, -10.125),), ((3, 8), (18, 24)), ((5.0625, 0.5625), (2.25, 1.5625), (0.25, 0.5625)), ((7.5625, 5.0625), (14.0625, 20.25)), ((0.25, 0.5625), (2.25, 1.5625), (-3.75, 0.5625), (0.25, 0.5625)), ((7.5625, 5.0625), (14.0625, 20.25)), ((2.25, 5.0625), (39.0625, 44.170028177203754), (39.0625, 44.170028177203754)), ((2.25, 5.0625), (14.0625, 20.25)), ((-0.75, -0.9375), (0.25, 0.5625)), ((0.25, 0.5625), (2.25, 1.5625), (6.25, 7.5625), (0.25, 0.5625)), ((2.25, 5.0625), (14.0625, 20.25), (2.25, 5.0625), (14.0625, 20.25), (14.0625, 20.25), (14.0625, 20.25)), ((25, 25), (42, 42), (56, 56), (56, 56), (56, 56)), ((-5.625, -5.625),), ((7.5625, 5.0625), (14.0625, 20.25)), ((-10.3125, -10.125), (14.0625, 20.25), (14.0625, 20.25), (14.0625, 20.25), (14.0625, 20.25)), ((0, 1),), ((0.25, 0.5625), (2.25, 1.5625), (0.25, 0.5625), (-0.75, -0.9375)), ((0, 1), (0, 0)), ((0, 1), (1, 0), (0, 1)), ((10.27259052842984, 5.0625), (14.0625, 20.25), (7.5625, 5.0625)), ((4.125, 2.8125),), ((2.954472342731709, 2.8125),), ((7.5625, 5.0625), (14.0625, 20.25)), ((-10.3125, -10.125), (-10.3125, -10.125), (-10.3125, -10.125)), ((1, 4), (1, 100), (9, 16), (25, 36)), ((0.75, 1.6875), (15.625, 26.869792215953836)), ((14.0625, 20.25), (-3.4573151010411234, 20.25)), ((7.5625, 5.0625),), ((2.25, 5.0625), (14.0625, 2.25), (39.0625, 56.25), (39.0625, 56.25)), ((14.0625, 20.25),), ((0, 0),), ((7.5625, 5.0625), (14.0625, 20.25), (7.5625, 5.0625))]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "index_multiplication"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))', 'assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))', 'assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
