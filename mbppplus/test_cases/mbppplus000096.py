import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [['letstdlenstdporstd'], ['truststdsolensporsd'], ['makestdsostdworthit'], ['stds'], [''], ['stdstdstdstd'], ['stdstdststdstdstdstddstd'], ['stdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstd'], ['stdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdstdstdsttstdstdstdsttdststdstdstdstddstd'], ['stdsdtdstdstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['st'], ['stdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdsdttdstd'], ['sst'], ['stdsdttdstdstd'], ['stdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddst'], ['sttdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstd'], ['stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdstdststdssstdsdtdstdstdtdstdstdsttstdstdstdsttdststdstdstdstddssttdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdtdtdstdstddstd'], ['stdstdststdstdstdstdddstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdsstdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtddstdstdstdststdstdstdstddst'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstdddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdststdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstddstdststdstdstdstddd'], ['stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstdstdstdstd'], ['stdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdsttd'], ['stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstdd'], ['sststdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdsttd'], ['stdstdstdsttsstdstdstdstttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddststdstdstdsttsstdstdstdstttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdsdstdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdttdstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdsstdstdstdsstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtddstdstdstdststdstdstdstddst'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdstdstddstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['stdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstdstdstd'], ['stdstdststdstdstdsssttdddstd'], ['tstdstdststdd'], ['stddstdstdstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['stdstdsttstdstdstdstddstdtdstdstdstdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstddstdstdstdstdstd'], ['stdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsdstdstdstddstd'], ['stdstdsttstdstdstdstddstdtdstdtstdstddstdstdststtdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstddstdstd'], ['stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstddstddstdstdstdstdstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstdddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstdstdstdstd'], ['stdsdttdsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdstdstddstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstd'], ['stdstdstdsttstdstdstdsttdststdstdstdsttddstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['sttdstdsttstdstdstdstdddtdstdtstdstddstdstdstdstdstd'], ['stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstddstdstdsttstdstdstdstddstdtdstdstdstdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstddstdstdstdstdstd'], ['stdstdsstdstdstdsssttdddstd'], ['stdstdstdstststdstdstdstddsstdstdstdsttstdstdstdsttdststdstdstdstddstdtdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddststdstdstdsttsstdstdstdstttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddsdtdsdtdstdstdstdstdststdstdstdstddstdtdstdsttd'], ['stdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstd'], ['sststdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdsstdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdtdstdststdstdstdstddstdtdstdsttd'], ['stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdttdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['ssst'], ['stdsdttdsstdstdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstddstddstdtdstd'], ['stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdsstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdsdttdsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdstdstddstdstdstdstdstsstdstdstdsttsstdstdststdstdstdstdddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstd'], ['stdstdstdstststdstdstdstddsstdstdstdsttstdstdstdsttdststdstdstdstddstdtdtdstdtstdstddstdstdstdstdstdstdststsdstdstdstddststdstdstdsttsstdstdstdstttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdststdstdststdstdstdstddststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstd'], ['stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdsttdstdststdstdstdstddstd'], ['stdstdstdsttstdsttddstd'], ['sssst'], ['stdsdttdsstdstdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdsstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdstddstdtdstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstddstddstdtdstd'], ['sttdstdsttstdstdstdstddsststdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdsttddtdstdtstdstddstdstdstdstdstd'], ['stdstdststdssstdsdtdstdsttdtdstdstdsttstdstdstdsttdststdstdstdstddssttdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdtdtdstdstddstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddststdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdststdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstddstdststdstdstdstdddddstd'], ['stddsdttdstdstd'], ['sststdstdstdsttstddstdstdstddstdtdstdtstsdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdsstdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdtdstdststdstdstdstddstdtdstdsttd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdstdstddstdstdsttstdstdsstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['dstdstdstdsttstdsttdddstd'], ['sststdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdsstdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdtdstdststdstdstdstddstdtdstdsttd'], ['sststdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstdtd'], ['stdsdstdstdstdststdstdstdstddsstdsdttdsstdstdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdsstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdstddstdtdstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstddstddstdtdstdtdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdttdstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdssttdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstdddstdsdtdstdstdstdstdststdstdstdstddstdtdsdstddstd'], ['stdstdsttstdstdstdstddstdtdstdstdstdstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdssttdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstdddstdsdtdstdstdstdstdststdstdstdstddstdtdsdstddstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstddstdstdstdstdstd'], ['stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdsttdsstdstdstdsttstddstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdsttdtdststdstdstdstddstd'], ['stdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdststdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstddststdstdstdstddstd'], ['stdstdstdsttdstdstdstdstddstdtdstdtstdstddstdststdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdsstdstdstdsstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtddstdstdstdststdstdstdstddst'], ['sststdstdstdsttstddstsstdsdtdstdstdstdstdststdstdstdstddstdtdstdsttd'], ['stdstdstdststdstdstdstddstdstdssttstdstdststdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdsttdstdststdstdstdststdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstdstdstdstdddstddstddstdtdstdstdstddstdstdstdstdstd'], ['stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdstdstddstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstd'], ['stdtstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstdddstddstd'], ['stdstdsstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdstdstddstdstdsttstdstdsstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['ststtdddstd'], ['stdsdttdsstdstdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsdtdstdstsdstdstdststdstdstdstddstdtdstdstddstddstdstdstddstddstdtdstd'], ['stdstdstdststdstdstdsstdstdstdstststdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddststdstdstdsttsstdstdstdstttstdstdstdstddstdtdstdstdstdstdstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtddstdstdssttstdstdstdstddstdtdstdstdstddstdstdd'], ['sststdstdstdsttstddstsstdsdtdstdstdstdstdstsdtdstdstdstddstdtdstdsttd'], ['stdstdstdstststdstdsttdstddstdtdstdtsttdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdststdstdstdstddstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdsstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstd'], ['stdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdsdtdstd'], ['stdstdstdstststdstdstdstddstdtdstdtstdstddstdstdsttdstdstdstdstsdstdstdstddstd'], ['stdstdstdststdstdstdstddstdstdssttstdstdststdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdsttdstdststdstdstdststdstdstdststdstdstdstddstdstdsttstdstdstdstddstdtdststdstdstdsttstdstdstdstdstdsdttdsstdstdststdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsdtdstdstsdstdstdststdstdstdstddstdtdstdstddstddstdstdstddstddstdtdstddstdtdstdtstdstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdstdstdstdstdstdddstddstddstdtdstdstdstddstdstdstdstdstd'], ['stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstddstdstdsttstdstdstdstddstdtdstdstdstdstdstdsttsstdstdstdsttstdsttdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdstddstdstdstdstdstd'], ['stdstdstdststdstdstdstddstdstdssttstdstdstdstddstdtdstdstdstddstdstddstdstdsttstdstdstdstddstdtdsstdstdstdstdstdsttsstdstdstdsttstdsttdstdstddstdtdstdtstddstddstdstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdsstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstdstd'], ['stdstdstdstststdstdsttdstddstdtdstdtstdstddstdstdstdstdststdstdstdstststdstdsttdstddstdtdstsststdstdstdsttstddstdstdstddstdtdstdtstsdstddstdstdstdstdstdstdstsstdstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdsstdstdsstdststdstdstdstddstdstdsttstdstdstdstddstdtdstdstdstddstdstdstdstdstdtdstdststdstdstdstddstdtdstdsttddtstdstddstdstdstdstdstdstdststdstdstdstddstddstdststdstdstdstddd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdstdstddstdstdsttstdstdsstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsststdstdstdsttsstdstdstdsttstdstdstdstddstdtdstdtstddstddstdsstdstdstdstdstdstsstdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstdtdstdstddstddstdtdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdststdstdstdstddstddtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd'], ['stdstdstdsttstdstdstdstddstdtdstdtstdstddstdstdstdstdstdstdstsststdstdstdststdstdststdstdstdsttstdstdstdsttdststdstdstdstddstddstddstdstdsttstdstdsstdstddstdtdstdstdstddstdstdstdstdstddstdsstdsttstdstdstdsstdtstdstddstdsdtdstdstdstdstdststdstdstdstddstdtdstdstddstddstd']]
results = [3, 1, 2, 1, 0, 4, 7, 15, 15, 22, 43, 42, 40, 64, 11, 3, 62, 0, 22, 21, 2, 0, 3, 22, 21, 14, 38, 32, 7, 55, 62, 40, 22, 37, 19, 37, 38, 59, 24, 55, 46, 53, 6, 3, 4, 61, 79, 21, 28, 71, 72, 62, 48, 10, 59, 13, 98, 6, 69, 36, 22, 58, 64, 0, 50, 64, 54, 68, 49, 20, 5, 0, 63, 50, 31, 82, 3, 57, 61, 5, 83, 38, 86, 74, 153, 56, 43, 55, 15, 102, 66, 62, 61, 1, 49, 77, 14, 65, 21, 20, 151, 97, 88, 96, 124, 71]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "count_occurance"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert count_occurance("letstdlenstdporstd") == 3', 'assert count_occurance("truststdsolensporsd") == 1', 'assert count_occurance("makestdsostdworthit") == 2', 'assert count_occurance("stds") == 1', 'assert count_occurance("") == 0']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
