import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 20, 6, 4, 5]], [[1, 2, 1]], [[1, 2, 5, 6, 1]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]], [[1000, 999, 998, 997, 996, 995, 994, 993, 992, 991]], [[12, 93, 45, 7, 23, 56, 78, 15, 99]], [[5, 23, 17, 8, 14, 36, 42, 29, 11, 55]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 2, 48, 19, 96]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96, 73]], [[33, 77, 63, 91, 28, 2, 4, 10, 50, 73, 2, 48, 19, 96]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 3, 48, 19, 96]], [[73, 33, 77, 63, 1000, 28, 4, 10, 50, 73, 2, 48, 19, 96, 73]], [[10, 9, 96, 8, 7, 6, 5, 4, 3, 2, 1, 3]], [[10, 9, 96, 8, 7, 6, 5, 4, 3, 2, 1, 996, 1]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 73]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 19, 96]], [[5, 6, 23, 17, 8, 14, 36, 42, 29, 11, 55]], [[33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 19, 96]], [[1000, 999, 998, 74, 997, 996, 995, 994, 993, 992, 991]], [[10, 9, 96, 8, 6, 5, 4, 3, 2, 1, 996, 1, 2]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 3, 48, 19, 4]], [[10, 9, 1, 96, 8, 7, 6, 5, 4, 3, 2, 2, 996, 1]], [[1001, 999, 998, 74, 997, 996, 995, 994, 993, 992, 991]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 100, 96]], [[10, 9, 96, 8, 7, 6, 3, 5, 4, 3, 2, 1, 996, 1]], [[1000, 999, 998, 74, 997, 996, 995, 994, 993, 992, 991, 992]], [[10, 9, 96, 8, 7, 6, 50, 3, 2, 1, 996, 1]], [[33, 77, 63, 8, 28, 2, 4, 10, 50, 73, 2, 48, 19, 96]], [[10, 9, 96, 8, 7, 6, 5, 15, 3, 2, 1, 995, 1, 96]], [[33, 77, 63, 91, 28, 4, 50, 74, 2, 19, 96]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 100, 96, 91]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96, 73, 77]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 2, 48, 19, 73, 96]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 100, 96, 33]], [[10, 9, 96, 8, 7, 6, 5, 15, 3, 10, 1, 995, 1, 96]], [[5, 17, 6, 23, 17, 8, 14, 36, 42, 29, 11, 55]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 96, 63]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 3, 19, 4, 50]], [[50, 73, 33, 77, 63, 1000, 28, 4, 10, 50, 73, 2, 48, 19, 96, 73]], [[10, 9, 96, 8, 995, 6, 5, 4, 3, 1000, 1, 996, 1, 2, 4]], [[10, 9, 1, 96, 8, 8, 6, 5, 4, 3, 2, 2, 996, 1]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 100, 73]], [[73, 33, 77, 63, 91, 28, 4, 998, 10, 95, 90, 73, 2, 48, 100, 96]], [[73, 33, 77, 63, 28, 4, 10, 90, 73, 2, 48, 100, 73]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96, 28]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 96, 14, 63]], [[10, 9, 7, 6, 5, 4, 3, 2, 1]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 72, 73, 2, 48, 19, 96, 73]], [[10, 9, 8, 7, 6, 5, 4, 3, 9, 0, 2, 1]], [[12, 93, 45, 7, 23, 56, 78, 15, 79, 99]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 19, 96]], [[80, 77, 63, 91, 28, 2, 4, 10, 50, 73, 2, 48, 19, 96]], [[33, 40, 77, 91, 28, 4, 10, 50, 73, 3, 48, 19, 50]], [[1001, 999, 998, 74, 997, 995, 993, 992, 991, 991]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 2, 48, 73, 96]], [[73, 33, 77, 63, 91, 28, 4, 998, 10, 95, 90, 73, 2, 994, 48, 100, 96, 95]], [[73, 77, 63, 91, 28, 4, 998, 10, 95, 90, 73, 2, 48, 100, 96]], [[10, 9, 96, 8, 6, 3, 5, 4, 3, 2, 1, 996, 1, 5]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 2, 48, 73, 48]], [[33, 77, 63, 91, 4, 10, 50, 73, 2, 19, 96]], [[33, 77, 63, 91, 4, 10, 50, 73, 2, 19, 96, 91]], [[33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 19, 96, 90]], [[5, 23, 17, 8, 14, 36, 42, 29, 29, 48, 55]], [[73, 33, 77, 63, 91, 28, 4, 10, 90, 73, 2, 48, 991, 73]], [[10, 9, 1, 96, 8, 7, 8, 6, 5, 4, 3, 2, 2, 996, 1, 6]], [[33, 77, 63, 91, 4, 10, 50, 74, 2, 48, 73, 48]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 3, 48, 19, 63]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2]], [[33, 77, 63, 8, 28, 2, 47, 4, 10, 50, 73, 2, 48, 19, 96]], [[33, 77, 63, 8, 64, 28, 2, 47, 4, 10, 50, 73, 2, 48, 19, 96]], [[73, 33, 77, 63, 91, 28, 4, 997, 10, 95, 90, 73, 2, 48, 100, 96]], [[33, 77, 63, 91, 28, 4, 10, 50, 73, 3, 19, 4, 50, 28]], [[33, 77, 63, 8, 7, 28, 2, 4, 10, 50, 73, 2, 48, 19, 96]], [[33, 63, 91, 28, 4, 10, 50, 73, 3, 48, 19, 96]], [[80, 77, 63, 91, 28, 2, 4, 10, 50, 73, 2, 48, 19, 12, 96, 77]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 2, 48, 73, 96, 48]], [[48, 33, 77, 63, 8, 28, 2, 47, 4, 10, 50, 73, 2, 48, 19, 96, 96]], [[33, 77, 63, 8, 64, 28, 2, 47, 4, 10, 50, 73, 2, 48, 19, 96, 33]], [[33, 77, 63, 91, 28, 4, 10, 50, 74, 48, 73, 96]], [[10, 9, 96, 8, 7, 6, 5, 15, 3, 1, 995, 1, 96]], [[1000, 999, 998, 74, 996, 996, 995, 994, 993, 992, 991]], [[5, 23, 17, 8, 14, 36, 42, 11, 55]], [[33, 77, 63, 91, 28, 4, 10, 50, 47, 3, 48, 19, 4]], [[10, 9, 96, 8, 6, 4, 3, 2, 1, 996, 79, 1, 2]], [[4, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96, 28, 19]], [[73, 33, 77, 63, 3, 91, 28, 4, 10, 90, 73, 2, 48, 100, 73]], [[33, 77, 63, 8, 64, 28, 2, 47, 4, 10, 51, 73, 2, 48, 19, 96, 33]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 96, 14, 63, 50, 73]], [[12, 93, 45, 7, 23, 56, 78, 15, 79, 99, 56]], [[33, 77, 63, 91, 28, 4, 10, 3, 50, 47, 3, 48, 19, 4]], [[1000, 10, 999, 998, 74, 997, 996, 995, 994, 992, 991, 992]], [[10, 9, 96, 8, 7, 6, 50, 3, 2, 8, 1, 996, 1, 1]], [[10, 9, 96, 8, 6, 3, 5, 4, 3, 2, 1, 996, 1, 5, 8]], [[33, 77, 63, 28, 4, 10, 50, 73, 3, 19, 4, 50]], [[10, 9, 96, 8, 7, 6, 50, 3, 2, 1, 996, 1, 7]], [[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96, 50]], [[33, 77, 63, 91, 28, 2, 4, 10, 14, 50, 73, 2, 48, 19, 96]], [[10, 9, 96, 8, 7, 6, 5, 3, 2, 1, 995, 1, 96]], [[33, 77, 63, 993, 4, 10, 50, 73, 2, 19, 96, 91]], [[73, 77, 101, 63, 91, 28, 4, 998, 10, 95, 90, 73, 2, 48, 100, 96]], [[33, 77, 63, 29, 4, 10, 50, 73, 3, 19, 4, 50, 50]], [[991, 1000, 999, 998, 74, 996, 996, 995, 994, 993, 992, 991]], [[100, 90, 80, 70, 60, 15, 50, 40, 30, 20, 20, 10]], [[33, 77, 63, 8, 28, 2, 47, 4, 10, 49, 73, 2, 48, 19, 96]], [[33, 77, 63, 1, 4, 10, 50, 73, 2, 19, 96, 91]], [[33, 76, 63, 91, 28, 4, 50, 74, 2, 19, 96]]]
results = [5, 1, 3, 45, 45, 45, 13, 13, 42, 42, 51, 54, 47, 42, 55, 61, 64, 53, 49, 13, 41, 48, 62, 52, 66, 48, 41, 73, 56, 48, 44, 59, 30, 43, 56, 45, 50, 52, 17, 47, 49, 62, 72, 65, 44, 53, 36, 50, 57, 36, 60, 57, 14, 36, 52, 42, 38, 37, 61, 48, 67, 43, 28, 29, 43, 9, 44, 83, 36, 45, 53, 50, 60, 53, 56, 51, 33, 64, 44, 59, 68, 28, 48, 47, 10, 53, 55, 61, 49, 68, 67, 18, 60, 47, 65, 71, 40, 54, 57, 53, 54, 31, 60, 43, 48, 60, 50, 26, 30]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "get_Inv_Count"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert get_Inv_Count([1,20,6,4,5]) == 5', 'assert get_Inv_Count([1,2,1]) == 1', 'assert get_Inv_Count([1,2,5,6,1]) == 3']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
