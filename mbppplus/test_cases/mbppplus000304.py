import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]], [[[2, 3, 4], [7, 6, 5], [8, 4, 10]]], [[[3, 4, 5], [8, 7, 6], [9, 5, 11]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, -1]]], [[[0, 0, 0], [0, 0, 1], [0, 0, -1]]], [[[0, 0, 0], [0, 0, -1], [0, 0, -1]]], [[[0, 0, -1], [0, 0, -1], [0, 0, -1]]], [[[0, 0], [0, 0]]], [[[-1, 0, 0], [-1, 0, 0], [0, 0, -1]]], [[[0, 1, 0], [0, 0, -1], [0, 0, -1]]], [[[1, 0, 0], [1, 0, 0], [1, 0, 0]]], [[[0, 0, 0], [-1, 0, 0], [0, 0, -1]]], [[[1, 1, -1, 0], [1, 1, -1, 0], [1, 1, -1, 0], [1, 1, -1, 0]]], [[[1, 1, -1, 0, 1], [1, 1, -1, 0, 1], [1, 1, -1, 0, 1], [1, 1, -1, 0, 1], [1, 1, -1, 0, 1]]], [[[1, 0], [1, 0]]], [[[0, 0, 0], [-1, 0, 0], [0, 0, 0]]], [[[0, -1, 0], [0, -1, 0], [0, 0, -1]]], [[[-1, 1, 0], [-1, 1, 0], [-1, 1, 0]]], [[[1, 1, -1, 0, -1], [1, 1, -1, 0, -1], [1, 1, -1, 0, -1], [1, 1, -1, 0, -1], [1, 1, -1, 0, -1]]], [[[0, 0, 0], [1, 0, -1], [1, 0, -1]]], [[[-1, 0, -1], [-1, 0, -1], [0, 0, -1]]], [[[0, 0, -1], [-1, 0, 0], [0, 0, -1]]], [[[1, -1, -1], [1, -1, -1], [1, -1, -1]]], [[[-1, 0, 0], [0, 0, -1], [-1, 0, 0]]], [[[1, 1, -1, -1, 0, 1], [1, 1, -1, -1, 0, 1], [1, 1, -1, -1, 0, 1], [1, 1, -1, -1, 0, 1], [1, 1, -1, -1, 0, 1], [1, 1, -1, -1, 0, 1]]], [[[0, -1, 0], [0, -1, 0], [0, -1, 0]]], [[[1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1], [1, 1, -1, -1, 0, 0, 1]]], [[[1, 0, -1], [1, 0, -1], [1, 0, -1]]], [[[0, -1, 0, 0], [0, -1, 0, 0], [0, -1, 0, -1], [0, -1, 0, 0]]], [[[0, 1, 0], [0, 1, 0], [0, 1, 0]]], [[[1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1], [1, 1, -1, -1, 0, 0, 1, -1]]], [[[0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]]], [[[1, 1, 0], [0, 0, -1], [0, 0, -1]]], [[[1, 1, -1, 1, 0], [1, 1, -1, 1, 0], [1, 1, -1, 1, 0], [1, 1, -1, 1, 0], [1, 1, -1, 1, 0]]], [[[0, -1, 1, 0], [0, -1, 1, 0], [0, -1, 1, 0], [0, -1, 1, 0]]], [[[0, 1, 0], [0, 0, -1], [0, 1, 0]]], [[[1, 1, -1, 0, 1, -1], [1, 1, -1, 0, 1, -1], [1, 1, -1, 0, 1, -1], [1, 1, -1, 0, 1, -1], [1, 1, -1, 0, 1, -1], [1, 1, -1, 0, 1, -1]]], [[[1, -1, 0, -1], [1, -1, 0, -1], [1, -1, 0, -1], [1, -1, 0, -1]]], [[[0, -1, 0, 0], [0, -1, 0, 0], [0, -1, 0, 0], [0, -1, 0, 0]]], [[[1, -1, -1, 1], [1, -1, -1, 1], [1, -1, -1, 1], [1, -1, -1, 1]]], [[[1, 0, -1, 1, 0], [1, 0, -1, 1, 0], [1, 0, -1, 1, 0], [1, 0, -1, 1, 0], [1, 0, -1, 1, 0]]], [[[0, 1, -1, 0], [0, 1, -1, 0], [0, 1, -1, 0], [0, 1, -1, 0]]], [[[1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1], [1, 1, -1, -1, 0, 1, -1]]], [[[1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1], [1, 1, -1, -1, 1, 0, 0, 1, -1]]], [[[1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0], [1, 1, -1, -1, 0, 2, 1, 0]]], [[[1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0], [1, 1, -1, 0, 2, 2, 1, 0]]], [[[1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1], [1, 1, -1, -1, 0, 2, 1, -1]]], [[[1, -1, -1, 1, 1], [1, -1, -1, 1, 1], [1, -1, -1, 1, 1], [1, -1, -1, 1, 1], [1, -1, -1, 1, 1]]], [[[0, 0, 0], [0, 0, 0], [0, 0, -2]]], [[[0, -1, 0, -1], [0, -1, 0, -1], [0, -1, 0, -1], [0, -1, 0, -1]]], [[[1, 0, 1, 0], [1, 0, 1, 0], [1, 0, 1, 0], [1, 0, 1, 0]]], [[[1, 1, -1, 1, 0, 1], [1, 1, -1, 1, 0, 1], [1, 1, -1, 1, 0, 1], [1, 1, -1, 1, 0, 1], [1, 1, -1, 1, 0, 1], [1, 1, -1, 1, 0, 1]]], [[[0, -1, -2, 0], [0, -1, -2, 0], [0, -1, -2, 0], [0, -1, -2, 0]]], [[[0, -1, 0, -1, 0], [0, -1, 0, -1, 0], [0, -1, 0, -1, 0], [0, -1, 0, -1, 0], [0, -1, 0, -1, 0]]], [[[1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0], [1, 1, -1, 0, 1, -1, 0]]], [[[1, 0, -1, 0, -1], [1, 0, -1, 0, -1], [1, 0, -1, 0, -1], [1, 0, -1, 0, -1], [1, 0, -1, 0, -1]]], [[[-1, 0, 0], [0, 0, -1], [0, 0, -1]]], [[[1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0], [1, 1, -1, -1, 0, 0, 2, 1, 0]]], [[[0, 0, 0], [0, 0, -2], [0, 0, 0]]], [[[1, 0, -1, 1, 0, 1], [1, 0, -1, 1, 0, 1], [1, 0, -1, 1, 0, 1], [1, 0, -1, 1, 0, 1], [1, 0, -1, 1, 0, 1], [1, 0, -1, 1, 0, 1]]], [[[0, 1, -1, 1], [0, 1, -1, 1], [0, 1, -1, 1], [0, 1, -1, 1]]], [[[1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0]]], [[[0, -1, -1, 0], [0, -1, -1, 0], [0, -1, -1, 0], [0, -1, -1, 0]]], [[[1, -1], [1, -1]]], [[[1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1], [1, 1, -1, -1, 0, 0, 2, 1, 0, -1]]], [[[1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0], [1, 1, -1, -1, 0, -1, 2, 1, 0]]], [[[0, -1, -1, 0, 0], [0, -1, -1, 0, 0], [0, -1, -1, 0, 0], [0, -1, -1, 0, 0], [0, -1, -1, 0, 0]]], [[[1, -1, -1, 0, 1, -1], [1, -1, -1, 0, 1, -1], [1, -1, -1, 0, 1, -1], [1, -1, -1, 0, 1, -1], [1, -1, -1, 0, 1, -1], [1, -1, -1, 0, 1, -1]]], [[[1, 1, -2, 0, -1, -1], [1, 1, -2, 0, -1, -1], [1, 1, -2, 0, -1, -1], [1, 1, -2, 0, -1, -1], [1, 1, -2, 0, -1, -1], [1, 1, -2, 0, -1, -1]]], [[[1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1], [1, -1, -1, -1, 0, 1, -1, 1]]], [[[2, 1, -1, 0, -1], [2, 1, -1, 0, -1], [2, 1, -1, 0, -1], [2, 1, -1, 0, -1], [2, 1, -1, 0, -1]]], [[[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]]], [[[1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1], [1, 1, 1, -2, -1, -1, -1]]], [[[0, -1, 0, 1], [0, -1, 0, 1], [0, -1, 0, 1], [0, -1, 0, 1]]], [[[1, 1, 2], [1, 1, 2], [1, 1, 2]]], [[[1, -2, -2, -1, 0, 1], [1, -2, -2, -1, 0, 1], [1, -2, -2, -1, 0, 1], [1, -2, -2, -1, 0, 1], [1, -2, -2, -1, 0, 1], [1, -2, -2, -1, 0, 1]]], [[[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]]], [[[0, 2, 0], [-1, 0, 0], [0, 0, -1]]], [[[1, 1, 2, 1], [1, 1, 2, 1], [1, 1, 2, 1], [1, 1, 2, 1]]], [[[1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1]]], [[[0, -1, 0, 0, 0], [0, -1, 0, 0, 0], [0, -1, 0, 0, 0], [0, -1, 0, 0, 0], [0, -1, 0, 0, 0]]], [[[2, 0, -1, -1, 0], [2, 0, -1, -1, 0], [2, 0, -1, -1, 0], [2, 0, -1, -1, 0], [2, 0, -1, -1, 0]]], [[[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0]]], [[[0, 0, 0], [-1, 0, 0], [-1, 0, 0]]], [[[1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1], [1, 2, 1, 1, -2, -1, -1, -1]]], [[[0, 1, -1, 1, 0], [0, 1, -1, 1, 0], [0, 1, -1, 1, 0], [0, 1, -1, 1, 0], [0, 1, -1, 1, 0]]], [[[0, -1, 0, 1], [0, -1, 0, 1], [0, -1, 0, -1], [0, -1, 0, 1]]], [[[-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1], [-1, 1, -2, -2, -1, 0, -1, 1]]], [[[0, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0]]], [[[2, -1, 0, 0], [2, -1, 0, 0], [0, -1, 0, -1], [2, -1, 0, 0]]], [[[-1, 0, 0], [-1, 0, 0], [2, 0, -1]]], [[[0, -1, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0]]], [[[1, 1, 1, -1, 1, 0], [1, 1, 1, -1, 1, 0], [1, 1, 1, -1, 1, 0], [1, 1, 1, -1, 1, 0], [1, 1, 1, -1, 1, 0], [1, 1, 1, -1, 1, 0]]], [[[1, 1, 1, -1, 0, 1], [1, 1, 1, -1, 0, 1], [1, 1, 1, -1, 0, 1], [1, 1, 1, -1, 0, 1], [1, 1, 1, -1, 0, 1], [1, 1, 1, -1, 0, 1]]], [[[0, -1, 1, -2, 0], [0, -1, 1, -2, 0], [0, -1, 1, -2, 0], [0, -1, 1, -2, 0], [0, -1, 1, -2, 0]]], [[[2, 0, 1, 0, 1, 1], [2, 0, 1, 0, 1, 1], [2, 0, 1, 0, 1, 1], [2, 0, 1, 0, 1, 1], [2, 0, 1, 0, 1, 1], [2, 0, 1, 0, 1, 1]]], [[[1, -1, -1, 1, 1, 1], [1, -1, -1, 1, 1, 1], [1, -1, -1, 1, 1, 1], [1, -1, -1, 1, 1, 1], [1, -1, -1, 1, 1, 1], [1, -1, -1, 1, 1, 1]]], [[[1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1], [1, 1, -2, 0, 2, -1, -1]]], [[[0, -1, 0, -1, 0, 0], [0, -1, 0, -1, 0, 0], [0, -1, 0, -1, 0, 0], [0, -1, 0, -1, 0, 0], [0, -1, 0, -1, 0, 0], [0, -1, 0, -1, 0, 0]]], [[[0, 1, -1, 0, 0], [0, 1, -1, 0, 0], [0, 1, -1, 0, 0], [0, 1, -1, 0, 0], [0, 1, -1, 0, 0]]], [[[0, 2, 0], [-1, 0, 0], [0, 2, 0]]], [[[0, -1, -1, 0, -1], [0, -1, -1, 0, -1], [0, -1, -1, 0, -1], [0, -1, -1, 0, -1], [0, -1, -1, 0, -1]]], [[[0, -1, 0], [0, 0, -1], [0, 0, -1]]]]
results = [5.2, 6.2, 7.2, 5.8, 0.0, -0.2, 0.0, -0.2, -0.2, 0.0, -0.4, 0.0, 0.6, -0.2, 0.5714285714285714, 0.6666666666666666, 0.6666666666666666, 0.0, -0.2, 0.4, 0.4444444444444444, 0.2, -0.4, -0.2, 0.2, -0.2, 0.5454545454545454, -0.2, 0.5384615384615384, 0.4, -0.14285714285714285, 0.6, 0.4666666666666667, 0.7142857142857143, 0.2, 0.6666666666666666, 0.42857142857142855, 0.4, 0.5454545454545454, 0.2857142857142857, -0.14285714285714285, 0.42857142857142855, 0.5555555555555556, 0.42857142857142855, 0.46153846153846156, 0.5294117647058824, 1.1333333333333333, 1.3333333333333333, 1.0666666666666667, 0.5555555555555556, -0.4, -0.2857142857142857, 0.7142857142857143, 0.7272727272727273, -0.42857142857142855, -0.2222222222222222, 0.5384615384615384, 0.3333333333333333, -0.4, 1.1176470588235294, 0.0, 0.6363636363636364, 0.5714285714285714, 0.8571428571428571, -0.2857142857142857, 0.3333333333333333, 1.0526315789473684, 1.0588235294117647, -0.2222222222222222, 0.36363636363636365, 0.2727272727272727, 0.4, 1.0, 0.5714285714285714, 0.3076923076923077, 0.42857142857142855, 1.6, 0.18181818181818182, 0.5714285714285714, 0.2, 1.5714285714285714, 0.7142857142857143, -0.1111111111111111, 0.8888888888888888, 0.5555555555555556, 0.0, 0.9333333333333333, 0.5555555555555556, 0.14285714285714285, 0.13333333333333333, -0.2727272727272727, 0.7142857142857143, -0.2, -0.09090909090909091, 0.7272727272727273, 0.7272727272727273, 0.2222222222222222, 1.3636363636363635, 0.6363636363636364, 0.9230769230769231, -0.18181818181818182, 0.4444444444444444, 0.8, -0.3333333333333333, -0.2]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "maxAverageOfPath"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2', 'assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2', 'assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2', 'assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
