import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6], [[(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5], [[(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4], [[(12, 24, 36), (5, 15, 20), (18, 9, 27), (32, 48, 64), (6, 12, 18)], 3], [[], 4], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45)], 11], [[(11, 22, 33, 44, 55), (13, 26, 39, 52, 65), (17, 34, 51, 68, 85), (5, 10, 15, 20, 25)], 11], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55)], 3], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40)], 4], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40)], 65], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45)], 33], [[], 5], [[(12, 24, 36, 48, 60), (15, 30, 13, 60, 75), (22, 33, 44, 55, 66), (15, 30, 45, 60, 75, 75), (8, 16, 24, 32, 40)], 4], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55), (4, 8, 12, 16, 20)], 55], [[(12, 24, 36), (5, 15, 20), (18, 9, 27), (32, 48, 64), (6, 12, 18)], 16], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45)], 8], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55)], 3], [[], 6], [[(15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40)], 65], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55), (9, 18, 27, 36, 45)], 3], [[(15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40)], 45], [[(15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40), (8, 16, 24, 32, 40)], 45], [[(15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40), (15, 30, 45, 60, 75)], 65], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (32, 48, 64), (6, 12, 18)], 20], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (32, 48, 64), (6, 12, 18)], 27], [[(22, 33, 65, 44, 55, 66), (15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40), (15, 30, 45, 60, 75)], 65], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (65, 32, 48, 64), (6, 12, 18)], 27], [[(13, 39, 66, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45)], 11], [[(15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 10, 32, 40), (8, 16, 24, 32, 40), (8, 16, 24, 32, 40)], 44], [[(12, 24, 36, 59, 48, 60), (15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40)], 4], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45)], 32], [[(13, 26, 39, 52, 65), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45)], 33], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (32, 48, 64), (6, 12, 18)], 12], [[(15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40), (8, 16, 24, 32, 40)], 65], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (32, 48, 64), (6, 12, 18), (11, 12, 24, 36)], 20], [[(4, 8, 12, 16, 20), (4, 8, 12, 16, 20, 16), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55)], 3], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40)], 40], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75), (22, 33, 44, 55, 66, 66), (8, 16, 24, 32, 40)], 40], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (32, 48, 64), (6, 18)], 27], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75, 15), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40)], 65], [[(22, 33, 44, 55, 66), (8, 16, 24, 32, 40)], 65], [[(12, 24, 36), (5, 15, 20), (18, 9, 27, 27), (32, 48, 64), (6, 12, 18)], 16], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (48, 64), (6, 18, 6)], 13], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (48, 64), (18, 9, 27), (6, 18, 6)], 13], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40), (22, 33, 44, 55, 66)], 40], [[(15, 30, 45, 60, 75), (8, 16, 24, 32, 40, 16), (22, 33, 44, 55, 66), (8, 16, 10, 32, 40), (8, 16, 24, 32, 40), (8, 16, 24, 32, 40)], 44], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45), (6, 12, 18, 24, 30)], 32], [[(11, 22, 33, 44, 55), (17, 34, 51, 68, 85, 85), (13, 26, 39, 52, 65), (17, 34, 51, 68, 85), (5, 10, 15, 20, 25)], 11], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 25, 32, 40), (22, 33, 44, 55, 66)], 40], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (27, 26, 39, 52, 65), (9, 18, 27, 36, 45)], 48], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75, 15), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40), (8, 16, 24, 32, 40)], 65], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55)], 8], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55, 44), (11, 22, 33, 44, 55)], 3], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55), (4, 8, 12, 16, 20), (9, 18, 27, 36, 45)], 55], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55)], 9], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45), (6, 44, 18, 24, 30), (6, 12, 18, 24, 30)], 32], [[(5, 15, 20, 20), (11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (48, 64), (6, 18, 6)], 8], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55)], 85], [[(12, 24, 36, 48, 60, 48), (15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40), (15, 30, 45, 60, 75)], 4], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 27), (48, 64), (18, 9, 27), (6, 18, 6)], 13], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45)], 24], [[], 3], [[(5, 15, 20, 20), (11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (11, 12, 24, 33), (18, 9, 27), (48, 64), (6, 18, 6)], 8], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45), (6, 44, 18, 24, 30), (6, 12, 18, 24, 30)], 55], [[(15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40)], 66], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55), (9, 18, 27, 36, 45)], 85], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55)], 34], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45)], 48], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40)], 41], [[(11, 22, 33, 44, 55), (17, 34, 51, 68, 6, 85, 85), (17, 34, 51, 68, 85, 85), (11, 54, 22, 33, 44, 55), (13, 26, 39, 52, 65), (17, 34, 51, 68, 85), (5, 10, 15, 20, 25)], 52], [[(11, 12, 24, 36), (12, 24, 36), (18, 9, 27), (48, 64), (18, 9, 27), (6, 18, 6)], 40], [[(13, 26, 39, 53, 52, 65), (11, 22, 33, 44, 55), (17, 34, 51, 68, 85, 85), (13, 26, 39, 52, 65), (17, 34, 51, 68, 85), (5, 10, 15, 20, 25)], 11], [[(13, 26, 39, 53, 52, 65), (11, 22, 33, 44, 55), (17, 34, 51, 68, 85, 85), (13, 26, 39, 52, 65), (17, 34, 51, 68, 85), (5, 10, 15, 20, 25)], 9], [[(15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 10, 32, 40), (8, 16, 24, 32, 40), (8, 16, 24, 32, 40)], 45], [[(6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (27, 26, 39, 52, 65), (9, 18, 27, 36, 45)], 48], [[], 51], [[(13, 26, 39, 51, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45)], 32], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45), (9, 18, 27, 36, 45)], 11], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 16, 24, 32, 40)], 8], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (32, 48, 64), (6, 12, 18)], 28], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (65, 32, 48, 64), (6, 12, 18)], 3], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55), (6, 12, 18, 24, 30)], 8], [[(15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (8, 18, 24, 32, 40), (8, 16, 24, 32, 40)], 65], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (48, 64), (6, 18, 6)], 12], [[], 34], [[(12, 24, 36), (5, 15, 20), (18, 9, 27), (32, 48, 64), (6, 12, 18)], 20], [[(15, 30, 45, 60, 75), (22, 33, 22, 44, 55, 66), (8, 16, 24, 32, 40), (15, 30, 45, 60, 75)], 65], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55), (9, 18, 27, 36, 45)], 64], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55)], 48], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45), (9, 18, 27, 36, 45), (9, 18, 27, 36, 45)], 24], [[(13, 26, 39, 52, 65), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (22, 33, 44, 55, 66), (9, 18, 27, 36, 45)], 41], [[(5, 15, 20, 20), (11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (11, 12, 24, 33), (18, 9, 27), (48, 64), (6, 18, 6)], 64], [[(11, 12, 24, 36), (12, 24, 36), (20, 5, 15, 20), (18, 9, 27), (32, 48, 64), (6, 12, 18)], 28], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (9, 18, 27, 36), (11, 22, 33, 44, 55)], 18], [[(12, 24, 36), (6, 12, 18), (5, 15, 20), (18, 9, 27, 27), (32, 48, 64), (6, 12, 18)], 10], [[(4, 8, 12, 16, 20), (4, 8, 12, 16, 20, 16), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55)], 3], [[(4, 8, 12, 16, 20), (4, 8, 12, 16, 20, 16), (6, 12, 18, 24, 30), (9, 18, 15, 27, 36, 45), (11, 22, 33, 44, 55)], 3], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (32, 48, 64), (6, 12, 18)], 9], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75, 15), (45, 33, 44, 55, 66), (8, 16, 24, 32, 40), (8, 16, 24, 32, 40)], 65], [[(15, 30, 45, 60, 75), (22, 33, 44, 55, 66), (44, 8, 16, 10, 32, 40), (8, 16, 10, 32, 40), (8, 16, 24, 32, 40), (8, 16, 24, 32, 40)], 45], [[(5, 15, 20, 20), (11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (48,), (18, 9, 27), (48, 64), (6, 18, 6)], 8], [[(12, 24, 36, 48, 60), (15, 30, 45, 60, 75, 15), (22, 33, 44, 55, 66), (8, 16, 24, 32), (8, 16, 24, 32, 40), (15, 30, 45, 60, 75, 15), (22, 33, 44, 55, 66)], 65], [[(4, 8, 12, 16, 20), (4, 8, 12, 16, 20, 16), (6, 12, 18, 24, 30), (9, 18, 15, 27, 36, 45), (11, 22, 33, 44, 55)], 2], [[(11, 12, 24, 36), (12, 24, 36), (64,), (5, 15, 20), (18, 9, 27), (48, 64), (6, 18, 6)], 13], [[(11, 12, 24, 36), (12, 24, 36), (5, 15, 20), (18, 9, 27), (65, 32, 48, 64, 64), (6, 12, 18)], 3], [[(11, 22, 33, 44, 55), (17, 34, 51, 68, 85, 85), (13, 26, 39, 52, 65), (17, 34, 51, 68, 85), (5, 10, 15, 20, 25)], 68], [[(4, 8, 12, 16, 20), (6, 12, 18, 24, 30), (9, 18, 27, 36, 45), (11, 22, 33, 44, 55, 44), (11, 22, 33, 44, 55)], 2], [[(17, 34, 51, 68, 85, 85), (13, 26, 39, 52, 65), (17, 34, 51, 68, 85), (5, 10, 15, 20, 25)], 16], [[(4, 8, 12, 16, 20), (4, 8, 12, 16, 20, 16), (6, 12, 18, 24, 30), (9, 18, 15, 27, 36, 45)], 2]]
results = [[(6, 24, 12)], [(5, 25, 30)], [(8, 16, 4)], [(12, 24, 36), (18, 9, 27), (6, 12, 18)], [], [(22, 33, 44, 55, 66)], [(11, 22, 33, 44, 55)], [(6, 12, 18, 24, 30), (9, 18, 27, 36, 45)], [(12, 24, 36, 48, 60), (8, 16, 24, 32, 40)], [], [], [], [(12, 24, 36, 48, 60), (8, 16, 24, 32, 40)], [], [(32, 48, 64)], [], [(6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (9, 18, 27, 36, 45)], [], [], [(6, 12, 18, 24, 30), (9, 18, 27, 36, 45, 45), (9, 18, 27, 36, 45), (9, 18, 27, 36, 45)], [], [], [], [], [], [], [], [(22, 33, 44, 55, 66)], [], [(8, 16, 24, 32, 40)], [], [], [(12, 24, 36)], [], [], [(6, 12, 18, 24, 30), (9, 18, 27, 36, 45)], [], [], [], [], [], [(32, 48, 64)], [], [], [], [], [], [(11, 22, 33, 44, 55)], [], [], [], [], [(6, 12, 18, 24, 30), (9, 18, 27, 36, 45)], [], [(9, 18, 27, 36, 45, 45), (9, 18, 27, 36, 45)], [], [(48, 64)], [], [(12, 24, 36, 48, 60, 48), (8, 16, 24, 32, 40)], [], [], [], [(48, 64)], [], [], [], [], [], [], [], [], [(11, 22, 33, 44, 55)], [], [], [], [], [], [(22, 33, 44, 55, 66)], [(8, 16, 24, 32, 40)], [], [(12, 24, 36), (18, 9, 27), (6, 12, 18)], [], [], [(12, 24, 36)], [], [], [], [], [], [], [], [], [], [], [], [(9, 18, 27, 36, 45)], [(6, 12, 18, 24, 30), (9, 18, 15, 27, 36, 45)], [(18, 9, 27)], [], [], [(48,), (48, 64)], [], [(4, 8, 12, 16, 20), (4, 8, 12, 16, 20, 16), (6, 12, 18, 24, 30)], [], [(12, 24, 36), (18, 9, 27), (6, 12, 18)], [], [(4, 8, 12, 16, 20), (6, 12, 18, 24, 30)], [], [(4, 8, 12, 16, 20), (4, 8, 12, 16, 20, 16), (6, 12, 18, 24, 30)]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "find_tuples"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]', 'assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]', 'assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
