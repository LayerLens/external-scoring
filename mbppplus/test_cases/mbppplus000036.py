import numpy as np
['import math']

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[10], [25], [20], [3.5], [1000000.0], [3.141], [10000000000.0], [3.14159265], [4.623802984914555], [3.3559788784471767], [66], [4.869200998343475], [3.8682074878773713], [918660.8851175675], [67], [2.882805679516125], [5.334665111091932], [3.3742973741685773], [1370408.3632012897], [2.1679948447223243], [6.1937397356958686], [68], [2.5343594560319853], [2.3432251842864593], [4.61675941883145], [4.371968506027651], [5.592539737328484], [745764.3921613692], [2.9898806623772485], [1300062.0481719284], [2.5896160698519415], [3.315962725294531], [8.526243131220685], [7.966847190064601], [3.4948208700163326], [3.092435587548573], [980845.2335352049], [2.161534559679202], [6.337453960004688], [918661.1231404628], [1.708581242035472], [6.268623349038191], [4.445885418463103], [69], [1206585.2634025752], [70], [5.253217457458149], [2.574352689612276], [8.876033871274153], [2.217295171366912], [5.148340229570737], [5.7430353597257335], [6.798195121344899], [918660.6321974591], [2.714392744717933], [1206585.7451337874], [4.454238599875553], [4.532844704583202], [2.9221428096017963], [5.9095950914668425], [1354585.0574878817], [1.3593066232553286], [870299.1979522441], [4.589385338378119], [2.111585416266776], [0.9463990934397435], [True], [82.06805292937108], [5.3222759634147385], [3.9025520292716678], [2.1319562379470947], [1206584.7863918154], [4.051515228306216], [2.760921157223623], [745765.2991203185], [980845.1688878584], [2.803507749709366], [1.862378605627123], [1.3300722837430694], [96.33023854016932], [2.9049275477536], [1000000.8406259468], [53], [2.9211190247221785], [8.442873354975713], [6.9904770599923065], [5.394810798758247], [6.555694849044899], [2.591536041748832], [2.121870489897608], [1054792.4194213152], [4.146640167841869], [1.7582778285009857], [3.716476256173695], [4.990472347611788], [9.380605161871557], [7.081577583743362], [3.2232571533460854], [1370408.265351601], [4.789548148841643], [5.40747011739556], [2.2367969243507684], [2.6601406350111847], [4.772435918308454], [1.5596351962154023], [3.150384912225208], [10.09894030966326], [7.0674793300609355]]
results = [4188.790204786391, 65449.84694978735, 33510.32163829113, 179.59438003021648, 4.1887902047863905e+18, 129.8052979860732, 4.188790204786391e+30, 129.8787876001121, 414.08220978930444, 158.32382216888948, 1204260.4287152681, 483.5726349709714, 242.4476021059143, 3.247538326860353e+18, 1259833.1083621692, 100.35400662135389, 635.9311421948506, 160.93061509637513, 1.0780492712041234e+19, 42.68382638675828, 995.2850155956486, 1317089.6816713943, 68.18569099949832, 53.892792610648506, 412.19274258212056, 350.04161887331406, 732.6825448095367, 1.7373748858280986e+18, 111.95672149275033, 9.204089870159217e+18, 72.74359389413357, 152.72760074601416, 2596.341094297716, 2118.1078549065246, 178.7982940837717, 123.8769764473433, 3.952665536814398e+18, 42.30338893623519, 1066.1862103964213, 3.247540851149853e+18, 20.892745378807877, 1031.8228406242654, 368.0979563398477, 1376055.2813841724, 7.358048728477464e+18, 1436755.040241732, 607.2461161644434, 71.46489269230332, 2929.175964425913, 45.66244298937992, 571.5975100450872, 793.4381530237991, 1316.0412010177686, 3.2475356445837937e+18, 83.77350123445713, 7.358057541621275e+18, 370.1766669381675, 390.1226183889083, 104.51844013626022, 864.4936053725879, 1.0411359697937727e+19, 10.520609679849587, 2.7611777121368146e+18, 404.90410609421207, 39.43797169014476, 3.550680181774695, 4.1887902047863905, 2315319.8702423535, 631.5107925092389, 248.9629462460541, 40.59041267476145, 7.358040001700004e+18, 278.57429246310744, 88.15574575552081, 1.7373812245443226e+18, 3.952664755255862e+18, 92.2983404073494, 27.057803045584475, 9.856309678586227, 3744350.682699433, 102.68204855624029, 4.1888007684124657e+18, 623614.5193179834, 104.40862321022539, 2520.9221472495924, 1430.8992429352018, 657.6839806372201, 1180.170621868424, 72.90551275879267, 40.01706455473447, 4.915747976785832e+18, 298.66041225981974, 22.76937494077028, 215.0219008825413, 520.6112753349555, 3457.6511864566255, 1487.5742834730097, 140.27280281573675, 1.0780490402800114e+19, 460.2271549341555, 662.3247644417065, 46.87791422091938, 78.8501277367148, 455.31182142822155, 15.891236508702901, 130.9723035400998, 4314.356467062602, 1478.7074138156142]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "volume_sphere"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)', 'assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)', 'assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
