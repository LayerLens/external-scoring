import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[3], [2], [5], [2.5], [1.768116407397588], [1.5330053387267233], [1.9409769466405233], [1.0356135456814313], [1.037763337581918], [1.028168921286162], [2.7426133283647474], [1.765616780512917], [3.9316946516263895], [0.9973720595122996], [2.500545981587986], [1.5471918358270063], [1.8932750500326467], [1.3384468899118565], [0.7724375366243361], [3.1594535359035825], [1.3824667962587152], [2.7470452952934243], [0.9156953778182462], [34], [3.819138685765539], [1.4852904495738046], [0.23333006553317204], [1.4833943990344491], [1.5762124498957681], [2.1453705140814767], [2.0656643626262605], [1.998117239983417], [0.7317945310911964], [0.7070489633316177], [1.5058980780463802], [0.6138472691338149], [1.886424605194764], [0.08168965641450154], [0.18480474894634202], [1.366617929835222], [1.6299804234811697], [0.26349775076805804], [0.1547548264158745], [1.4522052790699127], [1.352441827883809], [0.38606015130413257], [1.7757473200891363], [0.614856877384917], [1.092355188478646], [0.3278779481525271], [1.2118163861770028], [1.749229601188382], [0.7956349837789919], [3.058711440212882], [1.4631345109269929], [1.1100051438831426], [2.0112906528412884], [1.768699928888167], [3.328031163589532], [1.2766431508113951], [1.4012381668068086], [2.0974957803273613], [1.7965130249661876], [0.0013239186479343523], [True], [4.251410459943179], [0.8009116513441019], [29], [0.7710089491068963], [2.5816025535251335], [3.0782604418271386], [0.03179620192173771], [0.8071981441876176], [0.7514475069968345], [0.8414426924543517], [1.569979981693539], [1.5211274206864358], [1.8099459378857916], [0.0017356944757310683], [0.3907431982365772], [0.7382628147228494], [0.9555707899605295], [2.725023494814321], [4.283520965958573], [1.51773208972581], [2.1318839221754122], [3.6634136940364126], [3.0123612083786675], [2.356275015399078], [2.1281846741167216], [0.797257273379254], [3.473310475795803], [1.7076616217920995], [0.25816778679886393], [3.8940301896154903], [3.6099763184907694], [0.781946355279999], [2.9534714352068647], [77.01634556267851], [77.21550881078151], [0.0013626847553614187], [3.522566373363042], [0.3181745290034501], [0.6136495769697746]]
results = [27, 8, 125, 15.625, 5.527548510985869, 3.60272407657992, 7.312420064813221, 1.110690780489667, 1.1176220748919186, 1.0869095799423387, 20.629739628309085, 5.504138369769065, 60.777012038622395, 0.9921368786017752, 15.635239390656697, 3.7036718034835703, 6.786426269944785, 2.397747399677655, 0.4608823859374136, 31.538128515139373, 2.6421905076428107, 20.729912135983366, 0.7678087657634949, 39304, 55.70527057559712, 3.2766810208367367, 0.01270316997048562, 3.264148471480185, 3.9160142232646056, 9.87431374210725, 8.814126334787979, 7.977428141838705, 0.3918929751831229, 0.35346667090205675, 3.4149687749523077, 0.231302850187366, 6.7130264330930105, 0.0005451314123358604, 0.006311598748872661, 2.5523565506559613, 4.330590963315395, 0.018294929371295655, 0.0037062320503769043, 3.062555963620937, 2.4737498567340093, 0.05753934710120098, 5.59942592542983, 0.23244601513693203, 1.3034417497632207, 0.03524817417861327, 1.7795510953072182, 5.352300076411245, 0.5036648137672733, 28.616434564938977, 3.132223635468333, 1.3676500134233704, 8.136254146464301, 5.533022994325652, 36.86057902655699, 2.080695647837792, 2.751286861561789, 9.227908666058601, 5.798172218845618, 2.320512425630895e-09, 1, 76.84207966579191, 0.5137523659979722, 24389, 0.4583299703333985, 17.205533593665916, 29.168633521601656, 3.2145911070142355e-05, 0.525945161671074, 0.42432238546222384, 0.5957631394211611, 3.8697449725166546, 3.519628175807826, 5.929209677193095, 5.229014470311105e-09, 0.05965876800788504, 0.4023768463283627, 0.8725465327475976, 20.23535152055444, 78.59640661216115, 3.4961121026242994, 9.689261185389284, 49.165209432593905, 27.33512971026337, 13.082114164226816, 9.638910195675743, 0.5067519983742301, 41.90162044610182, 4.979726082965412, 0.01720703947612758, 59.04701431144044, 47.044955146684266, 0.4781133596497995, 25.763112186629208, 456823.8002457137, 460376.9938014504, 2.530382598179229e-09, 43.70967274548998, 0.03221040827734677, 0.2310794459056456]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "volume_cube"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert volume_cube(3)==27', 'assert volume_cube(2)==8', 'assert volume_cube(5)==125']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
