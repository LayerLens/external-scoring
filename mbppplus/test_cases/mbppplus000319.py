import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[2], [3], [4], [5], [1], [100], [6], [99], [101], [True], [98], [7], [8], [9], [10], [57], [12], [11], [13], [91], [102], [14], [90], [56], [54], [97], [55], [53], [103], [52], [94], [92], [104], [58], [15], [95], [16], [51], [93], [59], [17], [96], [83], [82], [89], [18], [60], [84], [19], [62], [50], [42], [61], [49], [48], [88], [81], [106], [41], [40], [105], [85], [20], [21], [67], [68], [80], [69], [29], [86], [22], [25], [39], [47], [63], [46], [30], [28], [26], [23], [43], [64], [87], [38], [65], [44], [27], [79], [66], [31], [107], [45], [108], [70], [24], [109], [78], [33], [77], [110], [111], [32], [71]]
results = [4, 14, 45, 141, 1, 44721359549995794750898931231328928455603737591808, 447, 14142135623730949710864047394571269433889644347392, 141421356237309502300937332480540322869392772694016, 1, 4472135954999579864512157513244964985347598450688, 1414, 4472, 14142, 44721, 14142135623730951272462811136, 447214, 141421, 1414214, 1414213562373095079850826239039209591806099456, 447213595499957926739801878173978770434052059037696, 4472136, 447213595499957962619384467033783750396739584, 4472135954999579306604101632, 447213595499957916916514816, 1414213562373095068441970836985144978335770607616, 1414213562373095017295118336, 141421356237309512037433344, 1414213562373095023009373324805403228693927726940160, 44721359549995793409638400, 44721359549995794994287846475148973542970753024, 4472135954999579626193844670337837503967395840, 4472135954999579433551518254854271817316403125420032, 44721359549995793066041016320, 14142136, 141421356237309514957160925159182667412477575168, 44721360, 14142135623730951633240064, 14142135623730950481595612333334745543885193216, 141421356237309499530488578048, 141421356, 447213595499957970225288068403160159376958816256, 141421356237309503311858975601610421436416, 44721359549995790412671761079956576141312, 141421356237309500062266372477487199826214912, 447213595, 447213595499957948252596207616, 447213595499957942812343838467699352010752, 1414213562, 4472135954999579060313497010176, 4472135954999579340963840, 447213595499957911552, 1414213562373094995304885780480, 1414213562373095055949824, 447213595499957934096384, 44721359549995794281234383846769935201075200, 14142135623730950814756225406012712026112, 44721359549995793006287186763626845269356970973855744, 141421356237309509632, 44721359549995794432, 14142135623730950230093733248054032286939277269401600, 1414213562373095149175468439020504986157056, 4472135955, 14142135624, 1414213562373095031333682799443968, 4472135954999579326025875025035264, 4472135954999579403944921992384410025984, 14142135623730949736876075691016192, 141421356237310, 4472135954999579428123438384676993520107520, 44721359550, 1414213562373, 14142135623730950144, 141421356237309498884096, 14142135623730949953048857804800, 44721359549995795087360, 447213595499958, 44721359549996, 4472135955000, 141421356237, 1414213562373095030784, 44721359549995793980834690629632, 14142135623730951491754684390205049861570560, 4472135954999579136, 141421356237309499530488578048000, 4472135954999579508736, 14142135623731, 1414213562373095141921913521332729937920, 447213595499957903779549887332352, 1414213562373095, 141421356237309507617849315620203814484621013815394304, 14142135623730950307840, 447213595499957908795223935077614486232656745253044224, 44721359549995793260258750250352640, 447213595500, 1414213562373095076178493156202038144846210138153943040, 447213595499957910171346708872711634944, 14142135623730950, 141421356237309514192191352133272993792, 4472135954999579598375789732183840057388478600182759424, 14142135623730949400655463878266527594963671654466584576, 4472135954999580, 141421356237309515815504830619713536]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "find_Index"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert find_Index(2) == 4', 'assert find_Index(3) == 14', 'assert find_Index(4) == 45']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
