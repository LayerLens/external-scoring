import numpy as np
['import math']

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[8, 2, 3, -1, 7]], [[-10, -20, -30]], [[19, 15, 18]], [[100000, 2, 3]], [[2.5, 1.5, 0, -3, 4.2]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]], [[1, 10, 100, 1000, 10000, 100000]], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]], [[0, 0]], [[2, 3, 4, -2, 0]], [[1000000, 2000000, 3000000, -1000000]], [[5, 5, 5, 5]], [[1, -2, 3, -4, 5]], [[1, -2, 3, -4, 5, -2]], [[2, -2, 3, -6, -2, 0]], [[0, 0, 0]], [[2, 3, 4, -2, 0, 2]], [[2, 2, 3, 4, -2, 0]], [[2, 3, 4, -2, 0, -2]], [[3, 100000, 2, 3]], [[1, 10, 100, 1000, 10000, 100000, 100000]], [[1, 10, 100, 1000, 10000, 100000, 10]], [[2, 3, 0, -2, 0, 2]], [[2, 1, -2, 0, 2]], [[1000000, 2000000, 3000000, -1000000, -1000000]], [[-1, -2, -3, -5, -6, -7, -8, -9, -10]], [[1000000, 2000000, -1000000]], [[100000, 2]], [[0]], [[1000000, 2000000, -9, -1000000, 1000000]], [[-9, -1, -2, -3, -4, -5, -7, -8, -9, -10]], [[2, -2, 3, -7, -6, -2, 0]], [[0.5, 0.75, 0.1, 0.2, 0.2734396265136305, 0.3, 0.4, 0.5, 0.6, 0.7]], [[-1, -2, -1, -3, -4, -5, -6, -7, -8, -9, -10, -1]], [[2, 3, -2, 0]], [[2, 3, -1, -6, -2, 0]], [[1000000, -1000000]], [[5, 5, 5]], [[5, 5]], [[-1, -2, -3, 0, -5, -6, -7, -8, -9, -10, -1]], [[100000, 2, 100001, 3]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.5, 0.1027137544003226, 0.6, 0.7, 0.3]], [[2, 3, -4, 4, -2, 0]], [[100001, 2, -2, 0]], [[0.5, 0.75, 0.7, 0.1, 0.2, 0.3, 0.4, 0.5, 1.5, 0.6, 0.7]], [[-5, -2, 2, 5]], [[-1]], [[2, 3, -3, 4, -2, 0, -2]], [[1, 9, 10, 100, 1000, 10000, 100000, 10000, 1000]], [[2.5, 1.5, 0]], [[100000, 3]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.5, 0.1027137544003226, 0.6, 0.7, 0.3, 0.7]], [[2, 3, -3, 4, -2, 0, -3]], [[-2, 2, -1, 5]], [[0.5, 0.75, 1.5, 0.2, 0.2734396265136305, 0.3, 0.4, 0.5, 0.6, 0.7]], [[1, 10, 100, 1000, 10000, -9]], [[1.6805641411244991, 2.5, 1.5, 0]], [[3000000, 2, 3, 4, 0, 1]], [[0, 6, 5, 5]], [[1, 10, 100, 1000, 10000, 100000, 100000, 1]], [[2.5, 0, 2.5]], [[-6, 0]], [[1000000, 2000000, 3000000, -1000000, -1000000, 3000000]], [[2, 3, -2, 0, 3]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.2734396265136305, 0.5, 0.1027137544003226, 1.0039341653341238, 0.3, 0.7]], [[2, 3, -6, -2, 0]], [[1]], [[-9, 1000000, 2000000, 3000000, -1000000]], [[-5, -1, 2, 5]], [[5, 5, 1, 5]], [[100000, 2, 4]], [[1, 10, 101, 100, 1000, 10000, -9]], [[2, 3, 0, 2]], [[2, 3, -2, 0, 3, 3]], [[-1, -2, -1, -3, -4, -5, -6, -8, -8, -9, -10, -1]], [[1000000, 2000000, -9, -1000000, 1000000, 2000000]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.3408682932336746, 0.4, 0.2734396265136305, 0.5, 0.1027137544003226, 1.0039341653341238, 0.3, 0.7]], [[2, 3, 0, 100000, 2]], [[1000000, -1000000, 1000000]], [[-1, -2, -1, -3, -4, -5, -6, -8, -8, -9, -10, 9, -1]], [[2.5, 1.5, 0, 1.5]], [[2, 3, 4, -2, -10, 0, 2]], [[0, 0, 1000000, 0, 0]], [[1, 1]], [[2, 3, 4, 1, -2, 0]], [[100000, -2, 3, 100000]], [[2, 3, 0, -10, -2, 0, 2]], [[1.6805641411244991, 1.5, 0]], [[3]], [[2.5, 1.5]], [[1, 11, 101, 100, 1000, 10000, -9, 1]], [[1.6805641411244991, 1.6805641411244991]], [[-1, -2, -1, -3, -4, -5, -7, -8, -9, -10, -1]], [[1000000, 5]], [[1, 10, 100, 1000, -9, 9999, -9]], [[-6, -6]], [[2, -2, 3, -6, -2]], [[0.5, 0.75, 0.1, 0.2, 0.75, 0.4, 0.5, 0.6, 0.7]], [[2, 3, 4, -1, 1]], [[2000000, -9, -1000000, 1000000]], [[1, 10, 100, 1000, 100000]], [[-1000000, 1, 10, 100, 1000, -9, -9]], [[1, 3, 4, -2, -10, 0, 2]], [[2, 3, 4, -2, -10, 0, 2, -3, 2]], [[1, 10, 100, 10000, 100000, 100000, 1]], [[2.5, 0.1027137544003226, 1.5, 0]], [[2, 3, 0, -10, -2, 0, 3, 2]], [[1000001, 2000000, -9, -1000000, 1000000]], [[2, 2, 3, 0, -2, 0, 2]], [[1, 10, 100, 10000, 100000, 1]], [[2, 1, -2, 0, -2]], [[2.5, 1.5, 0, 1]], [[-5, -1, 1, 5]]]
results = [-67.2, -2000.0, 1710.0, 200000.0, -0.0, 2.1000000000000006e-05, 166666666666666.66, 362880.0, 0.0, 0.0, -1.5e+24, 156.25, 24.0, -40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 450000.0, 1.4285714285714287e+19, 1428571428571428.5, 0.0, 0.0, 1.2e+30, -100800.0, -6.666666666666666e+17, 100000.0, 0.0, 3.6e+24, 544320.0, 0.0, 5.168008941107618e-06, 302400.0, 0.0, 0.0, -500000000000.0, 41.666666666666664, 12.5, 0.0, 15000150000.0, 5.294427158634811e-07, 0.0, 0.0, 1.8040909090909085e-05, 25.0, -1.0, 0.0, 1e+22, 0.0, 150000.0, 3.39725742679067e-07, 0.0, 5.0, 7.752013411661425e-05, -15000000000.0, 0.0, 0.0, 0.0, 1.25e+19, 0.0, 0.0, 3e+36, 0.0, 2.2204748199748898e-07, 0.0, 1.0, 1.08e+25, 12.5, 31.25, 266666.6666666667, -1298571428571.4285, 0.0, 0.0, 345600.0, 6e+30, 6.986671957414076e-08, 0.0, -3.333333333333333e+17, 2871138.4615384615, 0.0, 0.0, 0.0, 0.5, 0.0, -15000000000.0, 0.0, 0.0, 3.0, 1.875, -1249875000000.0, 1.4121479162167627, -54981.818181818184, 2500000.0, 115702714285.71428, 18.0, -28.8, 5.25e-05, -4.8, 4.5e+18, 20000000000.0, -11571428571428.572, 0.0, 0.0, 1.4285714285714286e+16, 0.0, 0.0, 3.6000036e+24, 0.0, 166666666666.66666, 0.0, 0.0, 6.25]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "multiply_num"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)', 'assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)', 'assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
