import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[(1, 2, 3)], [(4, 5, 6)], [(5, 6, 7)], [(123, 456, 789)], [(987, 654, 321)], [(999, 888, 777)], [(10000000000000000000, 9999999999999999999, 8888888888888888888)], [(1234567891011121314, 9876543210987654321, 1111111111111111111)], [(999999999999999999, 999999999999999998, 999999999999999997)], [(123456789123456789, 987654321987654321, 123456789123456789)], [(77777777777777777777, 88888888888888888888, 99999999999999999999)], [(123456789123456789123456789, 987654321987654321987654321, 123456789123456789123456789)], [(9999999999999999998, 9876543210987654321, 1111111111111111111)], [(123456789123456789, 987654321987654321, 123456789123456789, 123456789123456789)], [(789, 1234567891011121314, 9876543210987654321, 1111111111111111111)], [(10000000000000000000, 8888888888888888888)], [(10000000000000000000, 8888888888888888888, 10000000000000000000)], [(123456789123456789, 987654321987654321, 123456789123456789, 9999999999999999999)], [(123456789123456789, 999999999999999998, 77777777777777777777)], [(123456789123456789, 123456789123456789)], [(999, 888, 1234567891011121314)], [(987654321987654321,)], [(123456789123456789, 123456789123456789, 123456789123456789)], [(1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111)], [(456, 789)], [(10000000000000000000, 8888888888888888888, 10000000000000000000, 77777777777777777777, 10000000000000000000)], [(987, 321)], [(321, 322)], [(1111111111111111111,)], [(1111111111111111110, 1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111)], [(999, 888)], [(1111111111111111112,)], [(10000000000000000000, 9999999999999999999, 322, 77777777777777777777, 10000000000000000000)], [(999, 654, 888, 777, 888)], [(987, 321, 987)], [(10000000000000000000, 9999999999999999999, 8888888888888888889, 8888888888888888887, 8888888888888888888)], [(10000000000000000000, 8888888888888888889, 8888888888888888888)], [(987, 321, 321)], [(987, 77777777777777777777, 321)], [(999999999999999999, 654)], [(888, 123456789123456789, 123456789123456789)], [(10000000000000000000, 1111111111111111110, 8888888888888888889, 8888888888888888887, 8888888888888888888)], [(1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111, 1234567891011121314, 1234567891011121314)], [(788, 789, 1234567891011121314, 9876543210987654321, 1111111111111111111)], [(987654321987654321, 987654321987654321)], [(123456789123456789, 8888888888888888887)], [(123, 456, 122, 789)], [(987, 321, 987, 987, 987)], [(789, 1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111)], [(987,)], [(987654321987654321, 987654321987654321, 987654321987654321)], [(999999999999999998, 123456789123456789, 123456789123456789, 123456789123456789)], [(788, 789, 1234567891011121314, 9876543210987654321, 1111111111111111111, 789)], [(124, 456, 789)], [(123, 456, 789, 123)], [(10000000000000000000,)], [(9876543210987654321, 987, 321)], [(999999999999999999, 987654321987654321, 987654321987654321)], [(88888888888888888888, 77777777777777777777, 88888888888888888888, 99999999999999999999, 88888888888888888888)], [(123456789123456788, 123456789123456789, 123456789123456789123456789)], [(1111111111111111111, 1111111111111111111)], [(999, 888, 1234567891011121314, 999)], [(999, 987654321987654321987654321, 888)], [(77777777777777777777, 88888888888888888887, 99999999999999999999)], [(123, 456, 1234567891011121314, 123)], [(123, 456, 123)], [(777, 8888888888888888889, 8888888888888888888)], [(9999999999999999999, 10000000000000000000)], [(88888888888888888888, 987654321987654321, 987654321987654321)], [(123456789123456789, 9999999999999999999, 123456789123456789)], [(999, 123456789123456789, 987654321987654321, 998, 123456789123456789, 123456789123456789)], [(987, 321, 987, 987, 986, 987)], [(123456789123456789, 987654321987654321, 123456789123456789, 123456789123456789, 123456789123456789)], [(9876543210987654321, 654, 321)], [(123456789123456789, 999999999999999998, 77777777777777777777, 123456789123456789)], [(9999999999999999998, 9876543210987654321)], [(1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111, 9999999999999999998, 1234567891011121313, 1234567891011121314)], [(788, 789, 9876543210987654321, 1111111111111111111, 789, 789)], [(987, 987)], [(123456789123456789, 987654321987654321, 123456789123456788, 123456789123456789, 123456789123456789)], [(123456789123456789, 987654321987654321, 77777777777777777777, 123456789123456789)], [(123456789123456789, 88888888888888888887, 987654321987654321, 123456789123456789, 123456789123456789, 123456789123456789, 88888888888888888887)], [(123456789123456789, 987654321987654321, 123456789123456788, 123456789123456789)], [(123456789123456790, 987654321987654321, 123456789123456789, 9999999999999999999)], [(321,)], [(987, 8888888888888888888, 321)], [(88888888888888888888, 77777777777777777777, 88888888888888888888, 99999999999999999999, 9876543210987654321, 99999999999999999998, 88888888888888888888)], [(123456789123456789, 123456789123456788, 8888888888888888887)], [(88888888888888888888, 987654321987654321, 987654321987654321, 987654321987654321)], [(1000000000000000000, 999999999999999998, 456)], [(88888888888888888888, 987654321987654321, 987654321987654321, 987654321987654321, 987654321987654321)], [(9876543210987654321, 987, 321, 321)], [(999, 1000, 888, 1234567891011121314)], [(999, 123456789123456789, 987654321987654321, 998, 987654321987654321, 123456789123456789, 123456789123456789)], [(123456789123456789, 987654321987654321, 8888888888888888888, 123456789123456789, 123456789123456789)], [(123, 456, 124, 789, 789, 123)], [(987, 987, 654, 321)], [(999999999999999999, 999999999999999998, 999999999999999997, 999999999999999999)], [(999, 888, 999)], [(1000000000000000000, 124, 456, 789, 789)], [(888, 123456789123456789, 123456789123456789, 123456789123456789)], [(88888888888888888888, 77777777777777777777, 88888888888888888888, 99999999999999999998, 88888888888888888888)], [(999999999999999999, 999999999999999998, 999999999999999997, 999999999999999999, 999999999999999999)], [(1234567891011121314, 9876543210987654321, 888, 1111111111111111111, 9999999999999999998, 1234567891011121313, 1234567891011121314)], [(123456789123456789, 999999999999999999, 8888888888888888887)], [(10000000000000000000, 8888888888888888889, 8888888888888888888, 10000000000000000000)], [(9876543210987654321, 986, 986, 321)], [(123, 124, 456, 789)], [(10000000000000000001, 123456789123456788, 10000000000000000000, 9999999999999999999, 8888888888888888888)], [(1234567891011121314, 9876543210987654322, 1234567891011121314, 1111111111111111111, 1234567891011121314, 1234567891011121314)], [(999999999999999999, 999999999999999998, 999999999999999999)], [(788, 789, 9876543210987654321, 1111111111111111111, 789, 789, 9876543210987654321)]]
results = [123, 456, 567, 123456789, 987654321, 999888777, 1000000000000000000099999999999999999998888888888888888888, 123456789101112131498765432109876543211111111111111111111, 999999999999999999999999999999999998999999999999999997, 123456789123456789987654321987654321123456789123456789, 777777777777777777778888888888888888888899999999999999999999, 123456789123456789123456789987654321987654321987654321123456789123456789123456789, 999999999999999999898765432109876543211111111111111111111, 123456789123456789987654321987654321123456789123456789123456789123456789, 789123456789101112131498765432109876543211111111111111111111, 100000000000000000008888888888888888888, 10000000000000000000888888888888888888810000000000000000000, 1234567891234567899876543219876543211234567891234567899999999999999999999, 12345678912345678999999999999999999877777777777777777777, 123456789123456789123456789123456789, 9998881234567891011121314, 987654321987654321, 123456789123456789123456789123456789123456789123456789, 1234567891011121314987654321098765432112345678910111213141111111111111111111, 456789, 100000000000000000008888888888888888888100000000000000000007777777777777777777710000000000000000000, 987321, 321322, 1111111111111111111, 11111111111111111101234567891011121314987654321098765432112345678910111213141111111111111111111, 999888, 1111111111111111112, 1000000000000000000099999999999999999993227777777777777777777710000000000000000000, 999654888777888, 987321987, 100000000000000000009999999999999999999888888888888888888988888888888888888878888888888888888888, 1000000000000000000088888888888888888898888888888888888888, 987321321, 98777777777777777777777321, 999999999999999999654, 888123456789123456789123456789123456789, 100000000000000000001111111111111111110888888888888888888988888888888888888878888888888888888888, 123456789101112131498765432109876543211234567891011121314111111111111111111112345678910111213141234567891011121314, 788789123456789101112131498765432109876543211111111111111111111, 987654321987654321987654321987654321, 1234567891234567898888888888888888887, 123456122789, 987321987987987, 7891234567891011121314987654321098765432112345678910111213141111111111111111111, 987, 987654321987654321987654321987654321987654321987654321, 999999999999999998123456789123456789123456789123456789123456789123456789, 788789123456789101112131498765432109876543211111111111111111111789, 124456789, 123456789123, 10000000000000000000, 9876543210987654321987321, 999999999999999999987654321987654321987654321987654321, 8888888888888888888877777777777777777777888888888888888888889999999999999999999988888888888888888888, 123456789123456788123456789123456789123456789123456789123456789, 11111111111111111111111111111111111111, 9998881234567891011121314999, 999987654321987654321987654321888, 777777777777777777778888888888888888888799999999999999999999, 1234561234567891011121314123, 123456123, 77788888888888888888898888888888888888888, 999999999999999999910000000000000000000, 88888888888888888888987654321987654321987654321987654321, 1234567891234567899999999999999999999123456789123456789, 999123456789123456789987654321987654321998123456789123456789123456789123456789, 987321987987986987, 123456789123456789987654321987654321123456789123456789123456789123456789123456789123456789, 9876543210987654321654321, 12345678912345678999999999999999999877777777777777777777123456789123456789, 99999999999999999989876543210987654321, 1234567891011121314987654321098765432112345678910111213141111111111111111111999999999999999999812345678910111213131234567891011121314, 78878998765432109876543211111111111111111111789789, 987987, 123456789123456789987654321987654321123456789123456788123456789123456789123456789123456789, 12345678912345678998765432198765432177777777777777777777123456789123456789, 1234567891234567898888888888888888888798765432198765432112345678912345678912345678912345678912345678912345678988888888888888888887, 123456789123456789987654321987654321123456789123456788123456789123456789, 1234567891234567909876543219876543211234567891234567899999999999999999999, 321, 9878888888888888888888321, 8888888888888888888877777777777777777777888888888888888888889999999999999999999998765432109876543219999999999999999999888888888888888888888, 1234567891234567891234567891234567888888888888888888887, 88888888888888888888987654321987654321987654321987654321987654321987654321, 1000000000000000000999999999999999998456, 88888888888888888888987654321987654321987654321987654321987654321987654321987654321987654321, 9876543210987654321987321321, 99910008881234567891011121314, 999123456789123456789987654321987654321998987654321987654321123456789123456789123456789123456789, 1234567891234567899876543219876543218888888888888888888123456789123456789123456789123456789, 123456124789789123, 987987654321, 999999999999999999999999999999999998999999999999999997999999999999999999, 999888999, 1000000000000000000124456789789, 888123456789123456789123456789123456789123456789123456789, 8888888888888888888877777777777777777777888888888888888888889999999999999999999888888888888888888888, 999999999999999999999999999999999998999999999999999997999999999999999999999999999999999999, 123456789101112131498765432109876543218881111111111111111111999999999999999999812345678910111213131234567891011121314, 1234567891234567899999999999999999998888888888888888887, 100000000000000000008888888888888888889888888888888888888810000000000000000000, 9876543210987654321986986321, 123124456789, 100000000000000000011234567891234567881000000000000000000099999999999999999998888888888888888888, 123456789101112131498765432109876543221234567891011121314111111111111111111112345678910111213141234567891011121314, 999999999999999999999999999999999998999999999999999999, 788789987654321098765432111111111111111111117897899876543210987654321]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "tuple_to_int"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert tuple_to_int((1,2,3))==123', 'assert tuple_to_int((4,5,6))==456', 'assert tuple_to_int((5,6,7))==567']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
