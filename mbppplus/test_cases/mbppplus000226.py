import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[{'Math': 81, 'Physics': 83, 'Chemistry': 87}], [{'Math': 400, 'Physics': 300, 'Chemistry': 250}], [{'Math': 900, 'Physics': 1000, 'Chemistry': 1250}], [{'A': 1000, 'B': 1000, 'C': 1000, 'D': 1000, 'E': 1000}], [{'A': -10, 'B': 20, 'C': -5, 'D': 15, 'E': 0}], [{}], [{'A': 1000000, 'B': 500000, 'C': 750000, 'D': 250000, 'E': 500000, 'F': 1000000}], [{'A': 1, 'B': 3, 'C': 2, 'D': 5, 'E': 4, 'F': 7, 'G': 6}], [{'A': -5, 'B': -10, 'C': 0, 'D': -2, 'E': -7, 'F': -3}], [{'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 50, 'F': 60, 'G': 70, 'H': 80, 'I': 90, 'J': 100}], [{'A': 100, 'B': 200, 'C': 300, 'D': -100, 'E': -200, 'F': -300}], [{'Apple': 5, 'Banana': 10, 'Cherry': 15, 'Durian': 20, 'Elderberry': 25}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': 5, 'Elderberry': 5}], [{'A': 1000000, 'B': 500000, 'C': 100000, 'D': 1000000000}], [{'A': 1000000, 'B': 500000, 'C': 100000, 'D': 1000000000, 'E': 100001}], [{'B': 20, 'C': -5, 'D': 15, 'E': 6, 'Durian': 19}], [{'-1.5040512093813732': 31.088880669323828, '-68.06007644803495': -45.19320955711239, '-35.77677868980413': 52.11949901444851, '18.594228907699772': 66.75054378343333, '23.456168040559433': -21.785397857424897, '-64.82206635736263': -90.92860167400039, '34.37817144478964': -54.297828045785266, '87.65436569878796': 40.25079980305773, '64.16101544098183': -89.55867599806567, '60.92484190584344': 80.77796251561224}], [{'A': 1000000, 'B': 500000, 'D': 1000000000}], [{'A': 1000000, 'B': 19, 'C': 750000, 'D': 250000, 'E': 500000, 'F': 1000000}], [{'A': -5, 'B': -10, 'C': 0, 'E': -7, 'F': 7}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': 5}], [{'A': 1000000, 'C': 750000, 'D': 250000, 'E': 500000, 'F': 1000000}], [{'A': -10, 'C': -5, 'D': 15, 'E': 0}], [{'A': 1000000, 'B': 500000, 'C': 100000, 'D': 1000000000, 'AA': -7, '': 500000}], [{'A': 1000000, 'B': 19, 'C': 749999, 'D': 250000, 'E': 500000, 'F': 1000000}], [{'A': 1000000, 'B': 499999, 'D': 1000000000}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': 5, 'Elderberry': 4}], [{'-1.5040512093813732': 31.088880669323828, '-68.06007644803495': -45.19320955711239, '-35.77677868980413': 52.11949901444851, '18.594228907699772': 66.75054378343333, '23.456168040559433': -22.73580203466535, '-64.82206635736263': -90.92860167400039, '34.37817144478964': -54.297828045785266, '64.16101544098183': -89.55867599806567, '60.92484190584344': 80.77796251561224}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': 5, 'ChEerry': 5, 'Duarian': 5}], [{'A': 1000, 'B': 1000, 'C': -5, 'D': 1000, 'E': 1000, 'CC': 1001}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': 5, 'Elderberry': 5, 'Appl': 6}], [{'A': -10, 'B': 20, 'C': -6, 'D': 15, 'E': 0}], [{'Apple': 5, 'Cherry': 5, 'Durian': 5, 'Elderberry': 4, '': 6}], [{'A': 1000, 'B': -6, 'C': -5, 'D': 1000, 'E': 1000, 'CC': 1001}], [{'A': -10, 'B': 20, 'C': -5, 'D': 15, 'E': 749999}], [{'A': 1000, 'B': 1000, 'C': -200, 'D': 1000, 'E': 1000}], [{'Apple': 5, 'Cherry': 4, 'Durian': 5, 'Elderberry': 4, '': 30, 'DurBian': 6}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': 4, 'ChEerry': 5, 'Duarian': 5}], [{'A': 1000000, 'B': 19, 'C': 749999, 'D': 250000, 'F': 1000000}], [{'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 10, 'F': 60, 'G': 70, 'I': 90, 'J': 100}], [{'A': 1000000, 'B': 500000}], [{'A': -10, 'B': 20, 'C': -5, 'E': 0}], [{'A': -10, 'B': 20, 'C': -5, 'D': -100, 'E': 749999}], [{'A': 1000000, 'C': 750000, 'D': 250000, 'E': 500000, 'F': 1000000, 'G': 50}], [{'-1.5040512093813732': 31.088880669323828, '-68.06007644803495': -45.19320955711239, '-35.77677868980413': 52.11949901444851, '18.594228907699772': 86.96654380163642, '23.456168040559433': -22.73580203466535, '-64.82206635736263': -90.92860167400039, '34.37817144478964': -54.297828045785266, '64.16101544098183': -89.55867599806567, '60.92484190584344': 80.77796251561224}], [{'Apple': 5, 'Banana': 5, 'Cherry': 1, 'Durian': 5, 'Elderberry': 4}], [{'Apple': 5, 'Banana': 5, 'Durian': 5, 'Elderberry': 5, 'Duriian': 6}], [{'B': 200, 'C': 300, 'D': -100, 'E': -200, 'F': -300}], [{'A': 10, 'B': 20, 'C': 30, 'E': 50, 'F': 60, 'G': 70, 'H': 80, 'I': 90, 'J': 100}], [{'A': 10, 'B': 20, 'C': 30, 'E': 50, 'F': 60, 'H': 80, 'I': 90, 'J': 100}], [{'A': 1000000, 'B': 19, 'C': 749999, 'D': 250000, 'E': 500000, 'F': 999999}], [{'A': 1000, 'B': 1000, 'C': -5, 'D': 1000, 'E': 1000, 'Duarian': 999}], [{'200': -13.699369452712531, '19': -22.73580203466535, '50': 87.65436569878796, '13': -54.297828045785266, '82': 86.96654380163642, '29': -74.13390884180842}], [{'A': 1000, 'B': 1000, 'C': 71, 'D': 1000, 'E': 1000, 'CC': 1001, 'ECC': 2}], [{'Banana': 5, 'Durian': 5, 'Elderberry': 4}], [{'A': -10, 'C': -5, 'D': 15, 'E': 749999}], [{'200': 87.65436569878796, '19': -22.73580203466535, '50': 87.65436569878796, '13': -54.297828045785266, '82': 86.96654380163642, '29': -74.13390884180842}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': 5, 'Elderberry': 5, 'Bananaa': 6}], [{'A': 10, 'C': 30, 'D': 40, 'E': 50, 'F': 60, 'G': 70, 'H': 80, 'I': 90, 'J': 100}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': 5, 'Duarian': 5}], [{'Banana': 15, 'Durian': 5, 'Elderberry': 4}], [{'Durian': 5}], [{'A': 1000, 'B': 1000, 'C': 71, 'D': 1000, 'E': 1000, 'CC': 1001, 'ECC': -6, '': 1001}], [{'A': 1000000, 'B': 19, 'C': 749999, 'D': 250000, 'F': 999999}], [{'A': 1000, 'C': -5, 'D': 1000, 'E': 1000, 'Duarian': 999, 'AA': 300}], [{'A': 1000000, 'B': 500000, 'C': 100000, 'D': 1000000000, 'AA': -7}], [{'Apple': 5, 'Cherry': 4, 'Durian': 5, 'Elderberry': 4, '': 30, 'DurBian': 6, 'ChEerry': -7}], [{'A': 1000000, 'C': 750000, 'D': 250000, 'E': 500000}], [{'A': 1000000, 'B': 500000, 'C': 750000, 'D': 250000, 'F': 1000000, 'EB': 249999}], [{'Apple': 5, 'Banana': 19, 'Durian': 5, 'Elderberry': 5, 'Duriian': 6}], [{'Apple': 5, 'Cherry': 5, 'Elderberry': 5, 'Appl': 19}], [{'-1.5040512093813732': 31.088880669323828, '-68.06007644803495': -45.19320955711239, '-35.77677868980413': 52.11949901444851, '18.594228907699772': 86.96654380163642, '23.456168040559433': -22.73580203466535, '-64.82206635736263': -90.92860167400039, '34.37817144478964': -54.297828045785266, '64.16101544098183': -89.55867599806567, '60.92484190584344': 80.77796251561224, '-45.19320955711239': 40.25079980305773}], [{'A': -10, 'B': 20, 'C': -6, 'E': 0, 'BI': -300}], [{'B': 20, 'C': -6, 'E': 0}], [{'A': 80, 'C': -5, 'D': 15, 'E': 749999}], [{'B': 20, 'C': -5, 'D': 15, 'E': 0}], [{'A': 1000, 'B': 1000, 'C': 999, 'D': 1000, 'E': 1000}], [{'B': 1000, 'C': -5, 'D': 1000, 'CC': 1001}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': -7, 'Elderberry': 5, 'Bananaa': 6}], [{'-1.5040512093813732': 31.088880669323828, '-68.06007644803495': -45.19320955711239, '-35.77677868980413': 52.11949901444851, '18.594228907699772': 86.96654380163642, '23.456168040559433': -22.73580203466535, '-64.82206635736263': -90.92860167400039, '34.37817144478964': -54.297828045785266, '64.16101544098183': -89.55867599806567, '60.92484190584344': 80.77796251561224, '18.187389932137382': 40.020936818852114}], [{'Cherry': 5, 'Durian': 5, 'Elderberry': 4, '': 6}], [{'Durian': 5, 'DurBian': 6}], [{'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': -100, 'F': 60, 'G': 70, 'I': 90, 'J': 100}], [{'B': -10, 'C': 0, 'D': -2, 'E': -7, 'F': -3}], [{'A': 10, 'C': 30, 'D': 40, 'E': 50, 'G': 70, 'H': 80, 'I': 90, 'J': 100}], [{'-1.5040512093813732': 31.088880669323828, '-68.06007644803495': -45.19320955711239, '-35.77677868980413': 52.11949901444851, '18.594228907699772': 86.96654380163642, '23.456168040559433': -22.73580203466535, '-64.82206635736263': -90.92860167400039, '34.37817144478964': -54.297828045785266, '64.16101544098183': -89.55867599806567, '60.92484190584344': 80.77796251561224, '18.187389932137382': 40.020936818852114, '-90.92860167400039': 80.77796251561224}], [{'Apple': 5, 'Cherry': 4, 'Durian': 249999, 'Elderberry': 4, '': 30, 'DurBian': 6}], [{'A': 1000000, 'B': 499999, 'C': 750000, 'D': 250000, 'E': 500000, 'F': 1000000}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': -7, 'Elderberry': 5, 'Bananaa': 6, 'Ch': -8}], [{'B': 200, 'C': 300, 'D': -100, 'E': -200, 'F': -300, '': 200}], [{'Apple': 15, 'Banana': 5, 'Cherry': 5, 'Durian': 5, 'Elderberry': 5, 'Bananaa': 6, 'Bannanaa': 5}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': 5, 'ChEerry': 5}], [{'A': 1000000, 'B': 500000, 'C': 100000}], [{'A': 10, 'B': 21, 'C': 30, 'D': 40, 'E': 10, 'F': 60, 'G': 70, 'I': 90, 'J': 100}], [{'Apple': 5, 'Cherry': 4, 'Durian': 21, 'Elderberry': 4, '': 30, 'DurBian': 6, 'ChEerry': -7, 'B': 4}], [{'Banana': 5, 'Durian': 5, 'Elderberry': 4, 'Elyderberry': 70}], [{'Apple': 5, 'Banana': 5, 'Elderberry': 5, 'Duriian': 6}], [{'-1.5040512093813732': 31.088880669323828, '-68.06007644803495': -45.19320955711239, '-35.77677868980413': 52.11949901444851, '18.594228907699772': -86.29486535994447, '23.456168040559433': -22.73580203466535, '-64.82206635736263': -90.92860167400039, '34.37817144478964': -54.297828045785266, '64.16101544098183': -89.55867599806567, '60.92484190584344': 80.77796251561224, '-51.29311357277765': -90.12008614835415}], [{'A': 1000000, 'B': 500000, 'D': 250000, 'E': 500000, 'F': 1000000}], [{'A': 10, 'C': 30, 'D': 40, 'E': 50, 'G': 70, 'H': 80, 'I': 90, 'J': 21}], [{'A': -10, 'B': 20, 'C': -5, 'D': 1001, 'E': 749999}], [{'B': 200, 'D': -100, 'F': -300, 'FAppl': -201, 'AA': 201}], [{'B': -10, 'C': 0, 'E': -7, 'F': 7}], [{'A': 80, 'C': -5, 'D': 15, 'E': 749999, 'J': 16, 'CC': 749998}], [{'200': -13.699369452712531, '19': -22.73580203466535, '50': 87.65436569878796, '13': -54.297828045785266, '82': 86.96654380163642, '29': -74.13390884180842, '12': -109.25130401662261}], [{'A': -10, 'C': -5, 'E': 749999, 'J': 6, 'Cherry': 750000}], [{'-1.5040512093813732': 31.088880669323828, '-68.06007644803495': -45.19320955711239, '-35.77677868980413': 52.11949901444851, '18.594228907699772': -86.29486535994447, '-64.82206635736263': -90.92860167400039, '34.37817144478964': -54.297828045785266, '64.16101544098183': -89.55867599806567, '60.92484190584344': 80.77796251561224, '-51.29311357277765': -90.12008614835415, '-68.51509638551735': 60.92484190584344}], [{'A': -10, 'B': 19, 'C': -6, 'D': 15, 'E': 0, 'CECC': 10}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': 5, 'Elderberry': 12, 'Bananaa': 6}], [{'Banana': 4, 'Elderberry': 4, 'EDuarianlderberry': 29, 'Duarian': 29}], [{'Apple': 15, 'Banana': 5, 'Cherry': 5, 'Durian': 5, 'Bananaa': 200, 'Bannanaa': 5}], [{'A': -5, 'B': -10, 'C': 100001, 'D': -2, 'E': -7, 'F': -3}], [{'Apple': 5, 'Banana': 5, 'Cherry': 5, 'Durian': 71, 'Bananaa': 6}], [{'A': 1000, 'B': 1000, 'C': 71, 'D': 1000, 'E': 21, 'CC': 1001, 'ECC': -6, 'DD': 29}]]
results = [[('Chemistry', 87), ('Physics', 83), ('Math', 81)], [('Math', 400), ('Physics', 300), ('Chemistry', 250)], [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)], [('A', 1000), ('B', 1000), ('C', 1000), ('D', 1000), ('E', 1000)], [('B', 20), ('D', 15), ('E', 0), ('C', -5), ('A', -10)], [], [('A', 1000000), ('F', 1000000), ('C', 750000), ('B', 500000), ('E', 500000), ('D', 250000)], [('F', 7), ('G', 6), ('D', 5), ('E', 4), ('B', 3), ('C', 2), ('A', 1)], [('C', 0), ('D', -2), ('F', -3), ('A', -5), ('E', -7), ('B', -10)], [('J', 100), ('I', 90), ('H', 80), ('G', 70), ('F', 60), ('E', 50), ('D', 40), ('C', 30), ('B', 20), ('A', 10)], [('C', 300), ('B', 200), ('A', 100), ('D', -100), ('E', -200), ('F', -300)], [('Elderberry', 25), ('Durian', 20), ('Cherry', 15), ('Banana', 10), ('Apple', 5)], [('Apple', 5), ('Banana', 5), ('Cherry', 5), ('Durian', 5), ('Elderberry', 5)], [('D', 1000000000), ('A', 1000000), ('B', 500000), ('C', 100000)], [('D', 1000000000), ('A', 1000000), ('B', 500000), ('E', 100001), ('C', 100000)], [('B', 20), ('Durian', 19), ('D', 15), ('E', 6), ('C', -5)], [('60.92484190584344', 80.77796251561224), ('18.594228907699772', 66.75054378343333), ('-35.77677868980413', 52.11949901444851), ('87.65436569878796', 40.25079980305773), ('-1.5040512093813732', 31.088880669323828), ('23.456168040559433', -21.785397857424897), ('-68.06007644803495', -45.19320955711239), ('34.37817144478964', -54.297828045785266), ('64.16101544098183', -89.55867599806567), ('-64.82206635736263', -90.92860167400039)], [('D', 1000000000), ('A', 1000000), ('B', 500000)], [('A', 1000000), ('F', 1000000), ('C', 750000), ('E', 500000), ('D', 250000), ('B', 19)], [('F', 7), ('C', 0), ('A', -5), ('E', -7), ('B', -10)], [('Apple', 5), ('Banana', 5), ('Cherry', 5), ('Durian', 5)], [('A', 1000000), ('F', 1000000), ('C', 750000), ('E', 500000), ('D', 250000)], [('D', 15), ('E', 0), ('C', -5), ('A', -10)], [('D', 1000000000), ('A', 1000000), ('B', 500000), ('', 500000), ('C', 100000), ('AA', -7)], [('A', 1000000), ('F', 1000000), ('C', 749999), ('E', 500000), ('D', 250000), ('B', 19)], [('D', 1000000000), ('A', 1000000), ('B', 499999)], [('Apple', 5), ('Banana', 5), ('Cherry', 5), ('Durian', 5), ('Elderberry', 4)], [('60.92484190584344', 80.77796251561224), ('18.594228907699772', 66.75054378343333), ('-35.77677868980413', 52.11949901444851), ('-1.5040512093813732', 31.088880669323828), ('23.456168040559433', -22.73580203466535), ('-68.06007644803495', -45.19320955711239), ('34.37817144478964', -54.297828045785266), ('64.16101544098183', -89.55867599806567), ('-64.82206635736263', -90.92860167400039)], [('Apple', 5), ('Banana', 5), ('Cherry', 5), ('Durian', 5), ('ChEerry', 5), ('Duarian', 5)], [('CC', 1001), ('A', 1000), ('B', 1000), ('D', 1000), ('E', 1000), ('C', -5)], [('Appl', 6), ('Apple', 5), ('Banana', 5), ('Cherry', 5), ('Durian', 5), ('Elderberry', 5)], [('B', 20), ('D', 15), ('E', 0), ('C', -6), ('A', -10)], [('', 6), ('Apple', 5), ('Cherry', 5), ('Durian', 5), ('Elderberry', 4)], [('CC', 1001), ('A', 1000), ('D', 1000), ('E', 1000), ('C', -5), ('B', -6)], [('E', 749999), ('B', 20), ('D', 15), ('C', -5), ('A', -10)], [('A', 1000), ('B', 1000), ('D', 1000), ('E', 1000), ('C', -200)], [('', 30), ('DurBian', 6), ('Apple', 5), ('Durian', 5), ('Cherry', 4), ('Elderberry', 4)], [('Apple', 5), ('Banana', 5), ('Cherry', 5), ('ChEerry', 5), ('Duarian', 5), ('Durian', 4)], [('A', 1000000), ('F', 1000000), ('C', 749999), ('D', 250000), ('B', 19)], [('J', 100), ('I', 90), ('G', 70), ('F', 60), ('D', 40), ('C', 30), ('B', 20), ('A', 10), ('E', 10)], [('A', 1000000), ('B', 500000)], [('B', 20), ('E', 0), ('C', -5), ('A', -10)], [('E', 749999), ('B', 20), ('C', -5), ('A', -10), ('D', -100)], [('A', 1000000), ('F', 1000000), ('C', 750000), ('E', 500000), ('D', 250000), ('G', 50)], [('18.594228907699772', 86.96654380163642), ('60.92484190584344', 80.77796251561224), ('-35.77677868980413', 52.11949901444851), ('-1.5040512093813732', 31.088880669323828), ('23.456168040559433', -22.73580203466535), ('-68.06007644803495', -45.19320955711239), ('34.37817144478964', -54.297828045785266), ('64.16101544098183', -89.55867599806567), ('-64.82206635736263', -90.92860167400039)], [('Apple', 5), ('Banana', 5), ('Durian', 5), ('Elderberry', 4), ('Cherry', 1)], [('Duriian', 6), ('Apple', 5), ('Banana', 5), ('Durian', 5), ('Elderberry', 5)], [('C', 300), ('B', 200), ('D', -100), ('E', -200), ('F', -300)], [('J', 100), ('I', 90), ('H', 80), ('G', 70), ('F', 60), ('E', 50), ('C', 30), ('B', 20), ('A', 10)], [('J', 100), ('I', 90), ('H', 80), ('F', 60), ('E', 50), ('C', 30), ('B', 20), ('A', 10)], [('A', 1000000), ('F', 999999), ('C', 749999), ('E', 500000), ('D', 250000), ('B', 19)], [('A', 1000), ('B', 1000), ('D', 1000), ('E', 1000), ('Duarian', 999), ('C', -5)], [('50', 87.65436569878796), ('82', 86.96654380163642), ('200', -13.699369452712531), ('19', -22.73580203466535), ('13', -54.297828045785266), ('29', -74.13390884180842)], [('CC', 1001), ('A', 1000), ('B', 1000), ('D', 1000), ('E', 1000), ('C', 71), ('ECC', 2)], [('Banana', 5), ('Durian', 5), ('Elderberry', 4)], [('E', 749999), ('D', 15), ('C', -5), ('A', -10)], [('200', 87.65436569878796), ('50', 87.65436569878796), ('82', 86.96654380163642), ('19', -22.73580203466535), ('13', -54.297828045785266), ('29', -74.13390884180842)], [('Bananaa', 6), ('Apple', 5), ('Banana', 5), ('Cherry', 5), ('Durian', 5), ('Elderberry', 5)], [('J', 100), ('I', 90), ('H', 80), ('G', 70), ('F', 60), ('E', 50), ('D', 40), ('C', 30), ('A', 10)], [('Apple', 5), ('Banana', 5), ('Cherry', 5), ('Durian', 5), ('Duarian', 5)], [('Banana', 15), ('Durian', 5), ('Elderberry', 4)], [('Durian', 5)], [('CC', 1001), ('', 1001), ('A', 1000), ('B', 1000), ('D', 1000), ('E', 1000), ('C', 71), ('ECC', -6)], [('A', 1000000), ('F', 999999), ('C', 749999), ('D', 250000), ('B', 19)], [('A', 1000), ('D', 1000), ('E', 1000), ('Duarian', 999), ('AA', 300), ('C', -5)], [('D', 1000000000), ('A', 1000000), ('B', 500000), ('C', 100000), ('AA', -7)], [('', 30), ('DurBian', 6), ('Apple', 5), ('Durian', 5), ('Cherry', 4), ('Elderberry', 4), ('ChEerry', -7)], [('A', 1000000), ('C', 750000), ('E', 500000), ('D', 250000)], [('A', 1000000), ('F', 1000000), ('C', 750000), ('B', 500000), ('D', 250000), ('EB', 249999)], [('Banana', 19), ('Duriian', 6), ('Apple', 5), ('Durian', 5), ('Elderberry', 5)], [('Appl', 19), ('Apple', 5), ('Cherry', 5), ('Elderberry', 5)], [('18.594228907699772', 86.96654380163642), ('60.92484190584344', 80.77796251561224), ('-35.77677868980413', 52.11949901444851), ('-45.19320955711239', 40.25079980305773), ('-1.5040512093813732', 31.088880669323828), ('23.456168040559433', -22.73580203466535), ('-68.06007644803495', -45.19320955711239), ('34.37817144478964', -54.297828045785266), ('64.16101544098183', -89.55867599806567), ('-64.82206635736263', -90.92860167400039)], [('B', 20), ('E', 0), ('C', -6), ('A', -10), ('BI', -300)], [('B', 20), ('E', 0), ('C', -6)], [('E', 749999), ('A', 80), ('D', 15), ('C', -5)], [('B', 20), ('D', 15), ('E', 0), ('C', -5)], [('A', 1000), ('B', 1000), ('D', 1000), ('E', 1000), ('C', 999)], [('CC', 1001), ('B', 1000), ('D', 1000), ('C', -5)], [('Bananaa', 6), ('Apple', 5), ('Banana', 5), ('Cherry', 5), ('Elderberry', 5), ('Durian', -7)], [('18.594228907699772', 86.96654380163642), ('60.92484190584344', 80.77796251561224), ('-35.77677868980413', 52.11949901444851), ('18.187389932137382', 40.020936818852114), ('-1.5040512093813732', 31.088880669323828), ('23.456168040559433', -22.73580203466535), ('-68.06007644803495', -45.19320955711239), ('34.37817144478964', -54.297828045785266), ('64.16101544098183', -89.55867599806567), ('-64.82206635736263', -90.92860167400039)], [('', 6), ('Cherry', 5), ('Durian', 5), ('Elderberry', 4)], [('DurBian', 6), ('Durian', 5)], [('J', 100), ('I', 90), ('G', 70), ('F', 60), ('D', 40), ('C', 30), ('B', 20), ('A', 10), ('E', -100)], [('C', 0), ('D', -2), ('F', -3), ('E', -7), ('B', -10)], [('J', 100), ('I', 90), ('H', 80), ('G', 70), ('E', 50), ('D', 40), ('C', 30), ('A', 10)], [('18.594228907699772', 86.96654380163642), ('60.92484190584344', 80.77796251561224), ('-90.92860167400039', 80.77796251561224), ('-35.77677868980413', 52.11949901444851), ('18.187389932137382', 40.020936818852114), ('-1.5040512093813732', 31.088880669323828), ('23.456168040559433', -22.73580203466535), ('-68.06007644803495', -45.19320955711239), ('34.37817144478964', -54.297828045785266), ('64.16101544098183', -89.55867599806567), ('-64.82206635736263', -90.92860167400039)], [('Durian', 249999), ('', 30), ('DurBian', 6), ('Apple', 5), ('Cherry', 4), ('Elderberry', 4)], [('A', 1000000), ('F', 1000000), ('C', 750000), ('E', 500000), ('B', 499999), ('D', 250000)], [('Bananaa', 6), ('Apple', 5), ('Banana', 5), ('Cherry', 5), ('Elderberry', 5), ('Durian', -7), ('Ch', -8)], [('C', 300), ('B', 200), ('', 200), ('D', -100), ('E', -200), ('F', -300)], [('Apple', 15), ('Bananaa', 6), ('Banana', 5), ('Cherry', 5), ('Durian', 5), ('Elderberry', 5), ('Bannanaa', 5)], [('Apple', 5), ('Banana', 5), ('Cherry', 5), ('Durian', 5), ('ChEerry', 5)], [('A', 1000000), ('B', 500000), ('C', 100000)], [('J', 100), ('I', 90), ('G', 70), ('F', 60), ('D', 40), ('C', 30), ('B', 21), ('A', 10), ('E', 10)], [('', 30), ('Durian', 21), ('DurBian', 6), ('Apple', 5), ('Cherry', 4), ('Elderberry', 4), ('B', 4), ('ChEerry', -7)], [('Elyderberry', 70), ('Banana', 5), ('Durian', 5), ('Elderberry', 4)], [('Duriian', 6), ('Apple', 5), ('Banana', 5), ('Elderberry', 5)], [('60.92484190584344', 80.77796251561224), ('-35.77677868980413', 52.11949901444851), ('-1.5040512093813732', 31.088880669323828), ('23.456168040559433', -22.73580203466535), ('-68.06007644803495', -45.19320955711239), ('34.37817144478964', -54.297828045785266), ('18.594228907699772', -86.29486535994447), ('64.16101544098183', -89.55867599806567), ('-51.29311357277765', -90.12008614835415), ('-64.82206635736263', -90.92860167400039)], [('A', 1000000), ('F', 1000000), ('B', 500000), ('E', 500000), ('D', 250000)], [('I', 90), ('H', 80), ('G', 70), ('E', 50), ('D', 40), ('C', 30), ('J', 21), ('A', 10)], [('E', 749999), ('D', 1001), ('B', 20), ('C', -5), ('A', -10)], [('AA', 201), ('B', 200), ('D', -100), ('FAppl', -201), ('F', -300)], [('F', 7), ('C', 0), ('E', -7), ('B', -10)], [('E', 749999), ('CC', 749998), ('A', 80), ('J', 16), ('D', 15), ('C', -5)], [('50', 87.65436569878796), ('82', 86.96654380163642), ('200', -13.699369452712531), ('19', -22.73580203466535), ('13', -54.297828045785266), ('29', -74.13390884180842), ('12', -109.25130401662261)], [('Cherry', 750000), ('E', 749999), ('J', 6), ('C', -5), ('A', -10)], [('60.92484190584344', 80.77796251561224), ('-68.51509638551735', 60.92484190584344), ('-35.77677868980413', 52.11949901444851), ('-1.5040512093813732', 31.088880669323828), ('-68.06007644803495', -45.19320955711239), ('34.37817144478964', -54.297828045785266), ('18.594228907699772', -86.29486535994447), ('64.16101544098183', -89.55867599806567), ('-51.29311357277765', -90.12008614835415), ('-64.82206635736263', -90.92860167400039)], [('B', 19), ('D', 15), ('CECC', 10), ('E', 0), ('C', -6), ('A', -10)], [('Elderberry', 12), ('Bananaa', 6), ('Apple', 5), ('Banana', 5), ('Cherry', 5), ('Durian', 5)], [('EDuarianlderberry', 29), ('Duarian', 29), ('Banana', 4), ('Elderberry', 4)], [('Bananaa', 200), ('Apple', 15), ('Banana', 5), ('Cherry', 5), ('Durian', 5), ('Bannanaa', 5)], [('C', 100001), ('D', -2), ('F', -3), ('A', -5), ('E', -7), ('B', -10)], [('Durian', 71), ('Bananaa', 6), ('Apple', 5), ('Banana', 5), ('Cherry', 5)], [('CC', 1001), ('A', 1000), ('B', 1000), ('D', 1000), ('C', 71), ('DD', 29), ('E', 21), ('ECC', -6)]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "sort_counter"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ["assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"]:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
