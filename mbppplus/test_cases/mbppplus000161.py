import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[5, 10], [-1, -2], [9, 7], [3.14, 10.65], [-2.1, 0.9], [4.7, -3.8], [0, 10], [-10, 0], [0, 0], [-10000000000000000000000000, 1e-26], [-9876543210987654321098765, -1234567890123456789012345], [3.141592653589793, 3.141592653589793], [1.1808193778623197, 0.9], [0, 9], [3.141592653589793, 10.65], [0, -10], [-10000000000000000000000000, -1234567890123456789012345], [10.65, 10.65], [2.9618248823452746, 3.141592653589793], [1.2157775014136278, 0.6793588880224353], [-9999999999999999999999998, 0.9], [9, -1], [-10000000000000000000000000, 11], [0.9, 0.9], [11, 0.9], [3.141592653589793, 0.9], [-9876543210987654321098765, -9876543210987654321098765], [10, -10], [2.0531824740205407, 3.141592653589793], [9, 10], [0.6793588880224353, 2.0531824740205407], [-1234567890123456789012344, -1234567890123456789012345], [-10000000000000000000000000, -10000000000000000000000000], [3.141592653589793, 1.2157775014136278], [-1234567890123456789012345, -1234567890123456789012345], [11, -1234567890123456789012344], [1.5845776850148763, 0.9], [-9876543210987654321098765, 10], [-1, -10000000000000000000000000], [2.3167165662630365, 1.5845776850148763], [11, 12], [-9999999999999999999999997, 0.9], [3.7369883507451815, 3.141592653589793], [1.7912598325814533, 2.0531824740205407], [10, -1], [-1234567890123456789012345, -10000000000000000000000000], [3.141592653589793, 10.723965513304417], [10, -1234567890123456789012345], [1.2157775014136278, 1e-26], [10, 10], [-10000000000000000000000001, 1e-26], [3.489417024918704, 0.9], [-9999999999999999999999999, 0.9], [11.354840748288053, 2.484392829474946], [9, 9], [-10, -1234567890123456789012344], [1.5845776850148763, 1.5845776850148763], [-1234567890123456789012345, -9876543210987654321098765], [1.437569968606471, 0.9], [10, 9], [-1234567890123456789012344, -1234567890123456789012344], [11.354840748288053, 1e-26], [11, 13], [3.7369883507451815, 3.7484448127691747], [-10, -10], [1.437569968606471, 1.8110406201833071], [2.3167165662630365, 2.484392829474946], [1.2157775014136278, -2.1], [-0.030376207066556082, 7.499539649487587], [-2.1, 1.2157775014136278], [2, 1], [-1234567890123456789012345, -1], [1, -10000000000000000000000000], [3.141592653589793, 10.640794492137154], [-9999999999999999999999999, -10000000000000000000000000], [1, -9999999999999999999999997], [-2.1, -1.7697103312809708], [1, 1], [-9999999999999999999999999, -1234567890123456789012345], [-9999999999999999999999997, -9999999999999999999999997], [1.1808193778623197, 1.8110406201833071], [-9999999999999999999999999, 12], [3.141592653589793, 1.1808193778623197], [-1234567890123456789012346, -1234567890123456789012345], [0.8312079285541487, 1.2157775014136278], [3.141592653589793, 2.2911536081938935], [2.9618248823452746, 7.499539649487587], [1.7661199773658156, 2.2911536081938935], [2.9618248823452746, 3.7484448127691747], [-10, -9], [7.3022277742249955, 7.499539649487587], [1.898572449510145, 2.36750373246299], [3.141592653589793, 1.898572449510145], [2.9618248823452746, 2.9632529449641662], [-10, -1234567890123456789012345], [10, 2.9632529449641662], [11.042105761712191, 11.52667925889018], [12, -1234567890123456789012345], [2.36750373246299, 0.6793588880224353], [1, 10], [0, 13], [11, 11], [3.7369883507451815, 2.9632529449641662], [0.8312079285541487, 0.8312079285541487], [-9876543210987654321098766, -10000000000000000000000001], [4.0762338243861995, 3.141592653589793], [1.898572449510145, 1.898572449510145], [9, -11], [13, 12], [3.653195415338968, 3.141592653589793], [-1234567890123456789012345, 11], [-11, 0]]
results = [10, -1, 9, 10.65, 0.9, 4.7, 10, 0, 0, 1e-26, -1234567890123456789012345, 3.141592653589793, 1.1808193778623197, 9, 10.65, 0, -1234567890123456789012345, 10.65, 3.141592653589793, 1.2157775014136278, 0.9, 9, 11, 0.9, 11, 3.141592653589793, -9876543210987654321098765, 10, 3.141592653589793, 10, 2.0531824740205407, -1234567890123456789012344, -10000000000000000000000000, 3.141592653589793, -1234567890123456789012345, 11, 1.5845776850148763, 10, -1, 2.3167165662630365, 12, 0.9, 3.7369883507451815, 2.0531824740205407, 10, -1234567890123456789012345, 10.723965513304417, 10, 1.2157775014136278, 10, 1e-26, 3.489417024918704, 0.9, 11.354840748288053, 9, -10, 1.5845776850148763, -1234567890123456789012345, 1.437569968606471, 10, -1234567890123456789012344, 11.354840748288053, 13, 3.7484448127691747, -10, 1.8110406201833071, 2.484392829474946, 1.2157775014136278, 7.499539649487587, 1.2157775014136278, 2, -1, 1, 10.640794492137154, -9999999999999999999999999, 1, -1.7697103312809708, 1, -1234567890123456789012345, -9999999999999999999999997, 1.8110406201833071, 12, 3.141592653589793, -1234567890123456789012345, 1.2157775014136278, 3.141592653589793, 7.499539649487587, 2.2911536081938935, 3.7484448127691747, -9, 7.499539649487587, 2.36750373246299, 3.141592653589793, 2.9632529449641662, -10, 10, 11.52667925889018, 12, 2.36750373246299, 10, 13, 11, 3.7369883507451815, 0.8312079285541487, -9876543210987654321098766, 4.0762338243861995, 1.898572449510145, 9, 13, 3.653195415338968, 11, 0]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "maximum"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert maximum(5,10) == 10', 'assert maximum(-1,-2) == -1', 'assert maximum(9,7) == 9']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
