import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]], [[1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[], [], []], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]], [[1, 2, 3, 4, 5, 6, 7], [7, 6, 5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6, 7]], [[1, 2, 3, 4, 5, 6, 7], [2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6, 7]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6]], [[10, 20, 30], [0, 5, 10], [10, 15, 20]], [[1, 2, 3, 4, 5], [9, 8, 7, 6, 5], [6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]], [[11, 22, 33, 44, 55], [10, 20, 30, 40, 50], [20, 40, 60, 80, 100]], [[0.5, 1, 1.5, 2, 2.5], [0.2, 0.4, 0.6, 0.8, 1], [0.2, 0.4, 0.6, 0.8, 1]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 3, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9], [0, 8, 1, 2, 3, 3, 7, 6, 5, 8, 9]], [[5, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]], [[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], [[1, 3, 5, 7, 9, 2, 20, 4, 6, 8, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[6, 11, 8, 9, 10], [9, 8, 7, 6, 5], [6, 11, 8, 9, 10]], [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1], [3, 1, 2, 3, 4, 5, 6]], [[2, 4, 6, 8, 8, 10, 12, 14], [1, 2, 3, 5, 5, 6], [2, 4, 6, 8, 8, 10, 12, 14]], [[5, 3, 4, 5, 6, 7], [0, 1, 2, 3, 1, 4, 5, 6], [0, 1, 2, 3, 1, 4, 5, 6]], [[5, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [1, 60, 2, 3, 4, 5, 6, 7]], [[10, 20, 30], [0, 5, 10], [10, 20, 30]], [[0.5, 1, 1.5, 2, 2.5], [0.2, 0.4, 0.6, 0.8, 1], [0.2, 1.5, 0.4, 0.6, 0.8, 1]], [[4, 'Qmha', False], [], [35, 96, 80, 59, 44, -20, 30, 8, -30]], [[33, 1, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 3, 5, 7, 30, 2, 4, 6, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 30, 2, 4, 6, 8, 10]], [[10, 20, 30], [10, 20, 30], [10, 20, 30]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [0, 4, 6, 8, 10, 8]], [[1, 2, 22, 3, 4, 5, 6], [3, 1, 9, 3, 4, 6, 6], [3, 1, 9, 3, 4, 6, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 8], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9]], [[10, 20, 30], [0, 10], [10, 15, 20]], [[], [False, False, True], []], [[0, 1, 2, 3, 1, 1, 4, 5, 6], [0, 1, 2, 3, 1, 1, 4, 5, 6], [0, 1, 2, 3, 1, 1, 4, 5, 6]], [[1, 3, 5, 7, 30, 2, 4, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 30, 2, 4, 8, 10]], [[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6, 7], [2, 4, 6, 8, 10, 12, 14]], [[10, 20, 31], [0, 5, 10], [10, 15, 15, 20, 20]], [[1, 2, 3, 4, 5, 6, 7, 8, 40], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 8], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9]], [[2, 3, 4, 5], [9, 8, 7, 6, 5], [6, 7, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 60, 9], [1, 2, 3, 4, 5, 6, 7, 8, 60, 9], [0, 8, 1, 2, 3, 3, 7, 6, 5, 8, 9]], [[1, 2, 4, 5], [1, 2, 4, 5], [9, 8, 7, 6, 5, 9]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6, 5], [1, 2, 3, 4, 5, 6, 7]], [[1, 2, 3], [3, 2, 3], [3, 2, 3]], [[3, 4, 6, 8, 10, 12, 14], [3, 4, 6, 8, 10, 12, 14], [3, 4, 6, 8, 10, 12, 14]], [[5, 2, 3, 4, 5, 6, 7], [0, 60, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 1]], [[0, 1, 2, 3, 4, 7, 60, 6, 5, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 4]], [[10, 20, 30], [0, 5, 10, 10], [10, 19, 15, 20]], [[10, 10, 20, 30], [10, 15, 20, 15], [10, 15, 20, 15]], [[33, 1, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10], [0, 1, 2, 3, 4, 6, 7, 8, 9], [0, 1, 2, 3, 4, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 40], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 8], [0, 1, 2, 4, 7, 6, 5, 8, 9]], [[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 33, 5, 6, 7], [2, 4, 6, 8, 10, 12, 14]], [[1, 1, 3, 4, 5, 6, 5, 7], [0, 1, 10, 2, 3, 4, 5, 6, 20], [1, 1, 3, 4, 5, 6, 5, 7]], [[4, 3, 3, 3, 3, 3, 3, 4, 3, 3], [4, 3, 3, 3, 3, 3, 3, 4, 3, 3], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], [[1, 2, 3, 4, 5, 6], [3, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], [[10, 30, 10], [10, 30, 10], [10, 30, 10]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [4, 6, 8, 10, 8, 8]], [[1, 3, 5, 9, 7, 30, 2, 4, 6, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 9, 7, 30, 2, 4, 6, 8, 10]], [[False, False, False, False, False], [], [-19.126915383548493, False, 2.5, [[], 'Qmha'], -36, None, 8]], [[2, 3, 4, 5], [2, 3, 4, 5], [9, 8, 7, 6, 5, 6]], [[2, 3, 4, 5, 3], [9, 8, 7, 6, 5, 6], [2, 3, 4, 5, 3]], [[0.2, 0.6, 0.8, 2, 1], [0.2, 0.6, 0.8, 2, 1], [0.2, 0.4, 0.8, 1]], [[10, 30], [0, 10], [0, 10]], [[0.2, 0.6, 0.8, 2, 1], [1.5, 0.2, 0.4, 0.8, 1], [1.5, 0.2, 0.4, 0.8, 1]], [[10, 20], [10, 20], [10, 20]], [[1, 2, 3], [1, 3, 3], [1, 2, 3]], [[2, 3, 4, 5], [9, 8, 7, 6, 5, 6], [2, 3, 4, 5]], [[-54], [4, 'Qmha', False], []], [[2, 3, 5, 7, 30, 2, 4, 6, 8, 10, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 5, 7, 30, 2, 4, 6, 8, 10, 3]], [[2, 3, 5, 7, 30, 2, 20, 6, 8, 10, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 5, 7, 30, 2, 20, 6, 8, 10, 3]], [[55, 2, 3, 4, 5, 6, 7, 8, 40, 8], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 8], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9]], [[33, 1, 2, 3, 5, 6, -20, 7, 8, 9, 10], [0, 1, 2, 3, 6, 5, 6, 7, 8, 9], [0, 1, 2, 3, 6, 5, 6, 7, 8, 9]], [[0.2, 0.4, 0.6, 0.8, 1], [0.2, 0.4, 0.6, 0.8, 1], [0.2, 0.4, 0.6, 0.8, 1]], [[5, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [1, 60, 2, 3, 4, 3, 5, 6, 7]], [[5, 2, 3, 4, 6, 7, 7], [5, 2, 3, 4, 6, 7, 7], [1, 60, 2, 3, 4, 3, 5, 5, 7]], [[0.5, 1, 1.5, 2, 2.5, 1, 1.5], [0.5, 1, 1.5, 2, 2.5, 1, 1.5], [0.2, 0.4, 0.6, 1]], [[0, 1, 2, 3, 1, 1, 5, 6, 0], [0, 1, 2, 3, 1, 1, 5, 6, 0], [0, 1, 2, 3, 1, 1, 5, 6, 0]], [[2, 4, 6, 8, 8, 10, 0, 14], [1, 2, 3, 5, 5, 6], [2, 4, 6, 8, 8, 10, 0, 14]], [[9, 8, 7, 6, -54], [2, 6, 7, 8], [9, 8, 7, 6, -54]], [[5, 3, 4, 5, 6, 7, 3], [0, 1, 2, 3, 3, 1, 4, 5, 6], [0, 1, 2, 3, 3, 1, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 19, 3, 4, 5, 6], [0, 1, 2, 19, 3, 4, 5, 6]], [[2, 4, 6, 8, 10, 12, 14, 4], [1, 2, 3, 4, 5, 7, 3], [1, 2, 3, 4, 5, 7, 3]], [[1, 2, 3, 4, 33, 5, 6, 7], [2, 4, 6, 10, 12, 14], [2, 4, 6, 10, 12, 14]], [[1, 2, 4, 5], [1, 2, 4, 5], [9, 8, 7, 6, 5, 9, 9]], [[0, 8, 1, 2, 3, 3, 7, 6, 5, 9, 9], [1, 2, 3, 4, 5, 6, 7, 8, 60, 9], [0, 8, 1, 2, 3, 3, 7, 6, 5, 9, 9]], [[1, 2, 3, 4, 5], [8, 7, 6, 5], [6, 7, 8, 9, 10]], [[2, 4, 6, 10, 12, 14, 14], [2, 4, 6, 10, 12, 14, 14], [2, 4, 6, 10, 12, 14, 14]], [[2, 6, 8, 7, 8], [2, 6, 8, 7, 8], [9, 8, 7, 6, -54]], [[0, 1, 2, 3, 4, 7, 5, 5, 8, 9, 8], [0, 1, 2, 3, 4, 7, 5, 5, 8, 9, 8], [0, 1, 2, 3, 4, 7, 5, 5, 8, 9, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 8, 1, 2, 3, 3, 7, 6, 5, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[100, 20, 30], [100, 20, 30], [100, 20, 30]], [[-54], [4, 'Qmha', False], [1.5, 5.545422274822442, 48.537942334058584, 66.85132571363468, 0.4, 0.2, 48.92270766385428, 0.2, 82.31395095377587]], [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], [[None], [False, False, True], []], [[1, 2, 3, 4, 5, 6], [1, 2, 7, 3, 4, 5, 6, 7], [1, 2, 7, 3, 4, 5, 6, 7]], [[10, 80, 10], [10, 80, 10], [10, 80, 10]], [[1, 2, 3, 4, 5, -30, 3], [1, 2, 3, 4, 5, -30, 3], [1, 2, 3, 4, 5, -30, 3]], [[1, 2, 3, 4, 5, 6, 7], [4, 6, 8, 10, 8, 8], [1, 2, 3, 4, 5, 6, 7]], [[-54, 3, 5, 7, 9, 2, 20, 4, 6, 8, 10], [10, 9, 8, 7, 6, 5, 4, 2, 2, 1, 10], [10, 9, 8, 7, 6, 5, 4, 2, 2, 1, 10]], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [9, 8, 7, 6, 5]], [[0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 2, 5], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 2, 5], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 2, 5]], [[1, 3, 5, 7, 30, 2, 4, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[-20, 20, 30], [5, 10, 10], [-20, 20, 30]], [[0, 1, 2, 3, 3, 1, 4, 5, 6], [0, 1, 2, 3, 3, 1, 4, 5, 6], [0, 1, 2, 3, 3, 1, 4, 5, 6]], [[1, 2, 7, 3, 4, 5, 6, 7], [1, 2, 7, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6]], [[10, 20, 30], [0, 5, 10, 6, 10], [10, 19, 15, 20]], [[4, 'Qmha', False], [95, 4, 95], [35, 96, 80, 59, 44, -20, 30, 50, -30]], [[0, 5, 10, 6, 10, 10], [0, 5, 10, 6, 10, 10], [10, 19, 15, 20]], [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 30, 1], [6, 5, 4, 3, 2, 30, 1]], [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 4, 1], [3, 1, 2, 3, 4, 5, 6]], [[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 33, 5, 6, 8, 7], [2, 4, 6, 8, 10, 12, 14]], [[10, 20, 30], [0, 5, 10, 10], [0, 5, 10, 10]], [[10, 10, 20, 30], [10, 15, 15], [10, 15, 15]]]
results = [[1, 7], [1, 6], [1, 5], [], [], [], [], [], [1, 2, 3], [], [4], [], [], [], [], [], [], [], [], [], [], [], [], [7], [], [], [], [], [], [], [], [], [1, 2, 3, 4, 5, 6], [1, 10], [10, 20, 30], [], [3, 4, 6], [], [], [], [0, 1, 2, 3, 1, 1, 4, 5, 6], [1, 8], [], [], [], [], [7], [], [], [2, 3], [3, 4, 6, 8, 10, 12, 14], [], [], [], [10, 20], [1, 2, 3, 4], [], [], [1, 5], [], [], [10, 30, 10], [], [1], [], [], [], [0.2, 0.8], [], [1], [10, 20], [1, 3], [], [], [10], [10], [], [1, 2, 3, 7, 8, 9], [0.2, 0.4, 0.6, 0.8, 1], [], [], [], [0, 1, 2, 3, 1, 1, 5, 6, 0], [], [7], [], [], [], [], [], [7, 9], [], [2, 4, 6, 10, 12, 14, 14], [], [0, 1, 2, 3, 4, 7, 5, 5, 8, 9, 8], [7], [100, 20, 30], [], [1, 2, 3, 4, 5, 6], [], [1, 2], [10, 80, 10], [1, 2, 3, 4, 5, -30, 3], [], [7, 10], [], [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 2, 5], [1, 8], [], [0, 1, 2, 3, 3, 1, 4, 5, 6], [1, 2], [], [], [], [], [], [], [], [10]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "extract_index_list"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]', 'assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]', 'assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]', 'assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
