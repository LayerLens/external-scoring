import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[{'a': 100, 'b': 200, 'c': 300}], [{'a': 25, 'b': 18, 'c': 45}], [{'a': 36, 'b': 39, 'c': 49}], [{}], [{'a': 1000000, 'b': 999999, 'c': 1000001}], [{'a': 1000000000, 'b': 2000000000, 'c': 3000000000}], [{'b': 2000000000, 'c': 3000000000}], [{'a': 1000000, 'b': 999999}], [{'a': 1000000000, 'b': 999999}], [{'b': 1999999999, 'c': 1000001, '': 3000000000}], [{'a': 1000000, 'b': 999998, 'c': 1000001}], [{'': 3000000000, 'c': 2000000000}], [{'a': 1000000000, 'b': 1000000000, 'c': 3000000000}], [{'a': 1000001, 'b': 999999}], [{'a': 1000000, 'c': 1000001}], [{'a': 1000000, 'b': 999999, 'c': 1000001, '': 1999999999}], [{'b': 2000000000}], [{'a': 1000000, 'b': 999999, 'c': 2999999999}], [{'a': 999999, 'b': 999998, 'c': 1000001}], [{'a': 999999, 'b': 2000000000, 'c': 1000001, '': 3000000000}], [{'a': 999999, 'b': 1000002, 'c': 1000001, '': 3000000000}], [{'b': 999999, 'c': 1000001}], [{'c': 1000000000, 'a': 1000000000}], [{'b': 2000000000, '': 2000000000}], [{'a': 1000000, 'b': 999999, 'c': 1000001, '': 999998}], [{'a': 1000000000}], [{'b': 1000002, 'c': 1000001, '': 3000000000}], [{'a': 2999999999, 'b': 2000000000, 'c': 1000001, 'bb': 3000000000}], [{'a': 1000001, 'b': 999998, 'c': 1000001}], [{'a': 999999, 'b': 999998, 'c': 1000000, 'bb': 1000001}], [{'a': 1000000000, 'b': 999999, '': 1000000000}], [{'a': 1000001, 'c': 2999999999}], [{'b': 999998, 'c': 999998}], [{'a': 1000000001}], [{'b': 999998, '': 1000000000}], [{'a': 1000000, 'b': 999999, 'c': 1000001, '': 999999}], [{'-74.66033573549664': 3000000000, '40.06660936473111': 16, '3.5240647102472593': 93, '-36.90905808979343': 26, '-88.03974519895088': 36, '4.283511885784776': 1999999999, '90.27479950111882': -10, '27.153580187375766': 49, '75.20584319153858': -71, '-65.82670218861853': -82}], [{'a': 999999, 'b': 999998, 'c': 1000000, 'bb': 1000001, 'cc': 999998}], [{'-74.66033573549664': 3000000000, '40.06660936473111': 16, '3.5240647102472593': 93, '-36.90905808979343': 26, '-88.03974519895088': 36, '4.283511885784776': 16, '90.27479950111882': -10, '27.153580187375766': 49, '75.20584319153858': -71, '-65.82670218861853': -82}], [{'b': 2000000000, '': 999999}], [{'b': 1000002, '': 3000000000}], [{'b': 2000000000, 'c': 3000000000, 'cc': 1000000001}], [{'a': 999999, 'b': 999998, '': 3000000000, 'cca': 3000000000}], [{'a': 1000001, 'b': -10, '': 1000000}], [{'c': 2999999998}], [{'b': 16}], [{'-6.592133142656678': -74.66033573549664, '4.283511885784776': 29.179082806283958, '96.95801895498732': -63.94902533164137, '-43.659979177568474': -80.16037131046572, '-43.89754125964028': -88.34305526116584}], [{'a': 1000002, 'b': 999998, 'c': 1000001, 'cc': 1000000}], [{'b': 999998, '': 1000000001}], [{'a': 1000000}], [{'a': 1000002, 'b': 999998, 'c': 1000001, 'cc': 1000000, '': 999999}], [{'a': 1000000, 'b': 999999, 'c': 2999999999, '': 2999999999}], [{'-6.592133142656678': -36.90905808979343, '4.283511885784776': 29.179082806283958, '96.95801895498732': -63.94902533164137, '-43.659979177568474': -80.16037131046572, '-43.89754125964028': -88.34305526116584}], [{'b': 1000001}], [{'b': 999998, 'c': 3000000000}], [{'a': 1000002, 'b': 999998, 'c': 1000001, 'cc': 1000000, 'cca': 1000002}], [{'a': 2999999999, 'b': 2000000000, 'c': 1000001, 'bb': 3000000000, 'aa': 16}], [{'b': 1999999999, '': 3000000000}], [{'b': 2999999998, '': 3000000000}], [{'-74.66033573549664': 1000001, '40.06660936473111': 16, '3.5240647102472593': 93, '-36.90905808979343': 26, '-88.03974519895088': 36, '4.283511885784776': 1999999999, '90.27479950111882': -10, '27.153580187375766': 49, '75.20584319153858': -71, '-65.82670218861853': -82}], [{'a': 1000000, 'b': 999998, 'c': 1000001, 'cc': 1000001}], [{'a': 1000000000, 'b': 2000000000, 'c': 3000000000, 'aa': 26}], [{'a': 1000000000, 'aa': 1000000001, 'cc': 1999999999}], [{'-74.66033573549664': 1000001, '40.06660936473111': 16, '3.5240647102472593': 93, '-36.90905808979343': 26, '-88.03974519895088': 36, '4.283511885784776': 1999999999, '90.27479950111882': -10, '75.20584319153858': -71, '-65.82670218861853': -82}], [{'a': 1000000002}], [{'b': 999997, '': 1000000000}], [{'a': 999999, 'c': 1000001}], [{'b': 999999, 'c': 1000001, '': 1000002}], [{'-74.66033573549664': 1000001, '40.06660936473111': 16, '3.5240647102472593': 93, '-36.90905808979343': 26, '-88.03974519895088': 36, '4.283511885784776': 1999999999, '90.27479950111882': -10, '27.153580187375766': 49, '75.20584319153858': -71, '-65.82670218861853': -82, '89.97296312885616': -71}], [{'a': 1000000, 'c': 1000001, 'ca': 999999}], [{'b': 999998, '': 1000000001, 'cc': 999999}], [{'': 1000000001, 'a': 1000000001}], [{'a': 1000001, 'cc': 2999999999}], [{'b': 999996, '': 1000000000}], [{'b': 999998, 'c': 3000000000, '': 93, 'bb': 26}], [{'b': 2999999998, 'cca': 999999}], [{'a': 1000000, 'b': 999998, 'c': 1000001, 'cc': 1000001, 'bb': 1000000001}], [{'b': 999999, 'c': 1000001, '': 999998}], [{'96.95801895498732': 1000000002, '-88.03974519895088': 49}], [{'b': 999997, '': 1000000001}], [{'a': 1000000000, 'b': 999999, 'cc': 1000000001}], [{'a': 1000000, 'b': 999999, 'c': 1000002}], [{'a': 999996}], [{'a': 999999, 'c': 1000000, 'bb': 999999, 'cc': 999998}], [{'a': 999999, 'c': 1000000, 'bb': 1000000, 'cc': 999998}], [{'b': 999999, 'c': 1000001, 'bb': 49}], [{'b': 999999, 'c': -10, '': 999998, 'aa': 16}], [{'b': 1000002, 'c': 999999}], [{'a': 1000000000, 'b': 999999, 'ccab': 1000000}], [{'4.283511885784776': 29.179082806283958, '96.95801895498732': -63.94902533164137, '-43.659979177568474': -80.16037131046572, '-43.89754125964028': -63.94902533164137}], [{'a': 999999, 'c': 1000000, 'bb': 999999, 'cc': 999998, 'aa': 999997}], [{'a': 999999, 'c': 1000001, '': 3000000000}], [{'b': 16, 'ca': 999999}], [{'4.283511885784776': 29.179082806283958, '96.95801895498732': -64.13993946348552, '-43.659979177568474': -80.16037131046572, '-43.89754125964028': -63.94902533164137}], [{'b': 1000000, 'c': 1000001, '': 999998}], [{'a': 1000000000, 'aa': 3000000000}], [{'a': 1000000, 'b': 999998, 'c': 1000001, 'cc': 1000001, '': 1000000}], [{'-74.66033573549664': 3000000000, '40.06660936473111': 16, '3.5240647102472593': 93, '-36.90905808979343': 26, '-88.03974519895088': 36, '4.283511885784776': 1999999999, '90.27479950111882': -10, '27.153580187375766': 48, '75.20584319153858': -71, '-65.82670218861853': -82}], [{'b': 2999999998}], [{'': 999998}], [{'b': 999999}], [{'a': 999999, 'c': 1000000, 'bb': 999999, 'cc': 48}], [{'b': 1000002, '': 3000000000, 'bb': 2999999999}], [{'-6.592133142656678': -74.66033573549664, '4.283511885784776': 29.179082806283958, '-43.659979177568474': -80.16037131046572, '-43.89754125964028': -88.34305526116584}], [{'b': 17, 'ca': 999999}], [{'b': 1999999999, 'c': 1000001, '': 3000000000, 'bb': 999997}]]
results = [600, 88, 124, 0, 3000000, 6000000000, 5000000000, 1999999, 1000999999, 5001000000, 2999999, 5000000000, 5000000000, 2000000, 2000001, 2002999999, 2000000000, 3001999998, 2999998, 5002000000, 3003000002, 2000000, 2000000000, 4000000000, 3999998, 1000000000, 3002000003, 8001000000, 3000000, 3999998, 2000999999, 3001000000, 1999996, 1000000001, 1000999998, 3999999, 5000000056, 4999996, 3000000073, 2000999999, 3001000002, 6000000001, 6001999997, 1999991, 2999999998, 16, -277.9337048324856, 4000001, 1000999999, 1000000, 5000000, 6001999997, -240.18242718678238, 1000001, 3000999998, 5000003, 8001000016, 4999999999, 5999999998, 2001000057, 4000000, 6000000026, 4000000000, 2001000008, 1000000002, 1000999997, 2000000, 3000002, 2000999986, 3000000, 1001999998, 2000000002, 3001000000, 1000999996, 3001000117, 3000999997, 1004000001, 2999998, 1000000051, 1000999998, 2001000000, 3000001, 999996, 3999996, 3999997, 2000049, 2000003, 2000001, 1001999999, -178.8793391674645, 4999993, 3002000000, 1000015, -179.07025329930866, 2999999, 4000000000, 5000000, 5000000055, 2999999998, 999998, 999999, 3000046, 6001000001, -213.98467950084427, 1000016, 5001999997]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "return_sum"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ["assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"]:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
