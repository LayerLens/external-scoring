import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[5], [3], [10], [-3], [-2.5], [4.87], [0.25], [-1.5], [1000000000], [1e-07], [-3.14159], [0], [2.5], [-10.75], [1000.99], [0.5], [-0.5], [0.1], [-0.1], [7.5], [-7.5], [-100], [1000000000.0], [1e-09], [-0.7833397694106897], [0.8494504982876602], [0.15352390338434846], [-1.5921304345343799], [649.4568442171686], [-98], [1213822087.9025333], [-3.3073827123371813], [-0.7173157124933989], [0.060867338964320276], [0.14202999273585748], [0.07731273407773312], [0.21845268051821995], [-0.7897050637830042], [-2.077650969935703], [-51], [0.48099036515089505], [-3.6650740669567794], [-53], [-13.991843109620316], [-2], [-54], [-4.224549503602699], [-11.5925721122433], [834.4099469283142], [-1.362652227511529], [0.669095102959225], [-1.1124744378873135], [99], [-0.7225210145234627], [2.9408787220495345], [True], [79.42277112345812], [6.424249164056521], [-1.4304272670642526], [-7.783795864228866], [-55], [-5.895708615626183], [-3.2831281220684794], [-1], [-99], [-1.7101417197726843], [-2.27164824673296], [False], [-0.8123412262207785], [-0.0862816333496792], [-56], [96.86102612940118], [3.150457377596041], [1.3491782276693538], [-6.622554416660341], [-0.8740457687240922], [-1.2506691418209748], [-1.6834766016684863], [-0.88077825995143], [-5.283993759870942], [1.317025041202332e-07], [-3.371613058891193], [-10.694700345005673], [-0.770562557059889], [92.37966491121615], [2.155625055096069], [999999999], [-52], [0.2348918214522808], [-1.8441850039935714], [-0.17181241425157523], [0.528043166028691], [-2.8178101657048966], [-0.1026154716805201], [-27.177579261950612], [-1.3887345698294844], [0.27433384840036557], [-0.8287577161233002], [0.09411992864949742], [3.7280094428014032], [-1.7309883161021529], [650.2971930104544], [-2.4035389795800386], [-0.0906065143363286], [-2.798971522040114], [-0.8051303292507048], [-0.9283454987422104], [-1.685988421113601], [-7.563181339792204], [0.11067389399020672], [7.447501343369524], [-8.562451124993594], [-34], [-1.1119968344584181], [26], [-1.5655892787150538], [2.4582707902800376], [29], [-1.9700898710134198], [-14.996207385575758], [5.945011428956811e-08], [0.6821813827747135], [0.47296433668740345], [-1.9118829776343407]]
results = [150, 54, 600, 54, 37.5, 142.3014, 0.375, 13.5, 6000000000000000000, 6e-14, 59.21752636859999, 0, 37.5, 693.375, 6011885.880600001, 1.5, 1.5, 0.06000000000000001, 0.06000000000000001, 337.5, 337.5, 60000, 6e+18, 6.000000000000001e-18, 3.6817271660423554, 4.329396894246925, 0.14141753346220057, 15.209275923423798, 2530765.155003142, 57624, 8.840184366480391e+18, 65.6326824352011, 3.087250988339475, 0.02222899771558477, 0.12103511301928638, 0.035863553103445654, 0.28632944175357283, 3.7418045265871123, 25.899801317248606, 15606, 1.388110388207948, 80.59660749767464, 16854, 1174.6300416253769, 24, 17496, 107.08091105033886, 806.3263690653664, 4177439.7571974727, 11.14092655885279, 2.6861295408240955, 7.425596249716164, 58806, 3.132219698568083, 51.89260594682222, 6, 37847.85943757528, 247.62586393128547, 12.276732998165441, 363.5248683359184, 18150, 208.5562804822128, 64.6735815955014, 6, 58806, 17.547508210242444, 30.962314541309592, 0, 3.9593896069072687, 0.044667121520930844, 18816, 56292.35029704323, 59.55229012829594, 10.921691340102113, 263.14936200976433, 4.583736034946936, 9.385039813819281, 17.004560810191652, 4.654622059218413, 167.52354032613033, 1.0407329754924026e-13, 68.20664771331376, 686.2596928167868, 3.562599926056048, 51204.01493465149, 27.88031626894759, 5999999988000000006, 16224, 0.33104500671102094, 20.406109973728615, 0.17711703414572935, 1.672977511137622, 47.64032477969914, 0.06317961016929373, 4431.724887237648, 11.571502232636899, 0.45155436226892853, 4.121036112203452, 0.05315136581391891, 83.38832643369858, 17.977923302893, 2537318.635423657, 34.66199775816392, 0.04925724264107592, 47.00544948714932, 3.8894090824760896, 5.17095219020954, 17.055341736774796, 343.210271871486, 0.07349226486573308, 332.79165755694515, 439.89341560742434, 6936, 7.419221759073255, 4056, 14.706418737765135, 36.25857167006424, 5046, 23.28752459921804, 1349.3174157071815, 2.120589653425626e-14, 2.792228634026521, 1.342171582668933, 21.931779121007715]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "surfacearea_cube"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert surfacearea_cube(5)==150', 'assert surfacearea_cube(3)==54', 'assert surfacearea_cube(10)==600']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
