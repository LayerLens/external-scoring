import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]], [[10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]], [['a', 'a', 'b', 'c', 'd', 'd']], [['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a']], [['apple', 'apple', 'banana', 'orange', 'apple', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange']], [['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a', 'e', 'e', 'f', 'f', 'f', 'g', 'h', 'i', 'j', 'j']], [['apple', 'apple', 'banana', 'orange', 'apple', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'apple', 'orange', 'kiwi', 'kiwi', 'kiwi']], [['a', 'a', 'b', 'c', 'd', 'd', 'e', 'f', 'g', 'g', 'h', 'i', 'j', 'j', 'k', 'k', 'k', 'l', 'm', 'm']], [[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 8, 8, 9]], [['a', 'a', 'bb', 'c', 'd', 'd', 'a', 'a', 'e', 'f', 'f', 'f', 'g', 'h', 'i', 'j', 'j', 'f']], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 3, 5, 6, 6, 7, 7, 7, 8, 8, 9]], [['a', 'a', 'bb', 'c', 'd', 'd', 'a', 'a', 'e', 'f', 'f', 'g', 'h', 'i', 'j', 'j', 'f']], [['a', 'a', 'bb', 'c', 'd', 'd', 'a', 'a', 'e', 'f', 'f', 'h', 'i', 'j', 'j', 'f']], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]], [['banana', 'lm', 'd', 'g', 'k', 'CPAKrs', 'y', 'l']], [['apple', 'apple', 'banana', 'orange', 'apple', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'apple', 'orange', 'kiwi', 'kiwi']], [['a', 'a', 'c', 'd', 'd', 'a', 'a', 'e', 'f', 'f', 'g', 'h', 'i', 'j', 'j', 'f']], [['j', 'bb', 'c', 'd', 'd', 'a', 'a', 'e', 'f', 'f', 'h', 'i', 'j', 'j', 'f']], [['bb', 'apple', 'XkdbOWvF', 'wUpBgeXR', 'UKW', 'e', 'f', 'l', 'lm', 'CPAKrs']], [['apple', 'apple', 'banana', 'apple', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'apple']], [['a', 'a', 'c', 'd', 'g', 'd', 'a', 'a', 'e', 'f', 'f', 'g', 'h', 'i', 'j', 'j', 'f']], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 4]], [['j', 'bbe', 'bb', 'c', 'd', 'd', 'a', 'a', 'e', 'f', 'f', 'h', 'i', 'j', 'j', 'f']], [[True, None]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 3, 6, 6, 7, 6, 7, 7, 8, 9]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [['apple', 'apple', 'banana', 'lm', 'orange', 'apple', 'banana', 'banana', 'banana', 'apple', 'kiwi', 'orange']], [['apple', 'apple', 'banana', 'apple', 'bbe', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'apple', 'bbe']], [['a', 'a', 'bb', 'c', 'd', 'a', 'a', 'e', 'f', 'f', 'f', 'g', 'h', 'i', 'j', 'j', 'f']], [[True, False, None]], [['a', 'a', 'beb', 'c', 'd', 'd', 'a', 'a', 'e', 'f', 'f', 'f', 'g', 'i', 'j', 'j', 'f']], [['banana', 'lm', 'd', 'g', 'k', 'CPAKrs', 'y', 'll', 'CPAKrs']], [['apple', 'apple', 'banana', 'orange', 'apple', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'apple', 'orange', 'kiwi', 'kiwi', 'kiwi', 'kiwi']], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 7]], [['a', 'a', '', 'bb', 'c', 'd', 'a', 'a', 'e', 'f', 'f', 'f', 'g', 'h', 'i', 'j', 'j', 'f']], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 8, 8, 9, 1]], [['a', 'a', 'bb', 'c', 'd', 'a', 'a', 'e', 'h', 'f', 'f', 'g', 'h', 'i', 'j', 'j', 'f']], [['a', 'a', 'c', 'd', 'g', 'd', 'a', 'a', 'e', 'f', 'f', 'y', 'g', 'h', 'i', 'j', 'j', 'f']], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 6, 0, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 0, 0]], [[True, False]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 3, 5, 6, 6, 7, 7, 7, 8, 8, 9, 3]], [[1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 4, 5, 3, 5, 6, 6, 7, 7, 7, 8, 8, 9]], [['apple', 'apple', 'banana', 'orange', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'banana']], [['a', 'a', 'bb', 'c', 'd', 'b', 'a', 'a', 'e', 'h', 'f', 'f', 'g', 'h', 'i', 'jh', 'j', 'j', 'f']], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 7]], [['apple', 'banana', 'orangbe', 'apple', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'apple', 'orange', 'kiwi', 'kiwi', 'kiwi', 'kiwi']], [['banana', 'lm', 'd', 'g', 'k', 'CPAKrs', 'y']], [['a', 'a', 'bb', 'c', 'd', 'd', 'a', 'a', 'e', 'f', 'f', 'f', 'g', 'h', 'i', 'j', 'j', 'f', 'j']], [['apple', 'banana', 'orange', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'banana']], [['banana', 'lm', 'd', 'orange', 'g', 'k', 'CPAKrs', 'y', 'll', 'CPAKrs']], [['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a', 'e', 'e', 'f', 'f', 'f', 'g', 'h', 'i', 'j', 'j', 'f']], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 3, 7, 7, 8, 6, 8, 9]], [['beb', 'apple', 'apple', 'banana', 'orange', 'apple', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange']], [['a', 'orange', 'c', 'd', 'd', 'a', 'a', 'e', 'e', 'f', 'f', 'f', 'g', 'h', 'i', 'j', 'j', 'h']], [['apple', 'apple', 'banana', 'orange', 'apple', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'apple', 'orange', 'kiwi', 'kiwi', 'kiwi', 'kiwi', 'orange']], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 3, 7, 0, 7, 8, 6, 8, 9, 9]], [[1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 7]], [['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a', 'e', 'e', 'f', 'f', 'f', 'g', 'h', 'j', 'j']], [['beb', 'apple', 'apple', 'banana', 'orange', 'apple', 'banana', 'banana', 'kiwi', 'kiwi', 'orange']], [[True, False, True, None]], [['apple', 'apple', 'banana', 'orange', 'apple', 'banana', 'banana', 'banana', 'kiCPAKrswi', 'kiwi', 'orange', 'apple', 'orange', 'kiwi', 'kiwi', 'kiwi', 'kiwi']], [['apple', 'apple', 'banana', 'apple', 'bbe', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'bbe', 'apple']], [[True, True, False]], [[1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 7, 8]], [['a', 'a', 'bb', 'c', 'd', 'd', 'a', 'a', 'e', 'f', 'f', 'f', 'g', 'h', 'i', 'j', 'j', 'f', 'j', 'a']], [['apple', 'apple', 'banana', 'orange', 'apple', 'banana', 'banana', 'banana', 'kiwkiwi', 'kiwi', 'orange', 'apple', 'orange', 'kiwi', 'kiwi', 'kiwi', 'kiwi']], [['banana', 'lm', 'd', 'jh', 'g', 'k', 'CPAKrs', 'y', 'll', 'CPAKrs']], [['apple', 'apple', 'banana', 'orange', 'apple', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'apple', 'orange', 'kiwi', 'kiwi', 'kiwi', 'kiwi', 'banana']], [['apple', 'applle', 'banana', 'apple', 'orangbe', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'bbe', 'apple', 'apple']], [['a', 'a', 'a', 'b', 'c', 'd', 'd', 'a', 'a', 'e', 'e', 'f', 'f', 'f', 'g', 'h', 'i', 'j', 'j']], [['banana', 'lm', 'd', '', 'k', 'y', 'l']], [['apple', 'XkdbOWvF', 'wUpBgeXR', 'UKW', 'e', 'f', 'l', 'llm', 'CPAKrs']], [[True, None, None]], [[True, True]], [['beb', 'apple', 'apple', 'banana', 'oapplerange', 'apple', 'banana', 'banana', 'kiwi', 'kiwi', 'orange']], [[False, True, True, False, None, True]], [['banana', 'lm', 'd', 'g', 'k', 'CPAKrs', 'y', 'banana']], [['j', 'bbe', 'bb', 'c', 'd', 'd', 'a', 'a', 'e', 'f', 'f', 'h', 'i', 'j', 'j', 'f', 'i']], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 6, 2, 0, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [['banana', 'lm', 'baanbana', 'd', 'jh', 'g', 'k', 'banbana', 'CPAKrs', 'y', 'll', 'CPAKrs']], [['e', 'beb', 'i', 'apple', 'apple', 'banana', 'orange', 'apple', 'orangbe', 'banana', 'banana', 'kiwi', 'kiwi', 'orange']], [['a', 'a', '', 'c', 'd', 'd', 'e', 'f', 'g', 'g', 'h', 'i', 'j', 'j', 'k', 'k', 'k', 'l', 'm', 'm']], [['apple', 'banana', 'orange', 'banana', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'kiwi']], [[1, 2, 2, 3, 1, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 7, 8]], [['a', 'a', 'bb', 'c', 'd', 'b', 'a', 'f', 'a', 'e', 'h', 'f', 'f', 'g', 'h', 'i', 'jh', 'j', 'j', 'f']], [['banana', 'lm', 'd', 'jh', 'g', 'k', 'CPAKrs', 'y', 'llm', 'CPAKrs']], [['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a', 'e', 'f', 'f', 'f', 'g', 'h', 'i', 'j', 'j']], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 7, 0, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 3, 7, 0, 2, 7, 8, 6, 8, 9, 9]], [[0, 0, 1, 2, 4, 4, 5, 6, 6, 7, 0, 0, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 4, 6, 0, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0, 9]], [['banana', 'lm', 'd', 'k', 'CPAKrs', 'y', 'banana']], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0, 4]], [['j', 'bb', 'c', 'd', 'd', 'a', 'a', 'f', 'f', 'h', 'i', 'j', 'j', 'f']], [[0, 0, 1, 2, 4, 4, 4, 5, 1, 6, 6, 7, 8, 9, 4, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]], [[1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 8, 8, 3, 9, 7, 9]], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 7, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 0, 3, 2, 2, 1, 0, 0]], [[True, False, False]], [[False, True, False]], [['banana', 'lm', 'd', 'g', 'k', 'y', 'banana']], [['e', 'beb', 'i', 'apple', 'apple', 'banana', 'orange', 'apple', 'ee', 'orangbe', 'banana', 'banana', 'kiwi', 'kiwi', 'orange']], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 7, 0, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0]], [['banana', 'baanbana', 'lm', 'CPAKrs', 'd', 'g', 'k', 'CPAKrs', 'y', 'y']], [['apple', 'banana', 'orange', 'banana', 'banana', 'kiwi', 'kiwi', 'orange', 'banana']], [['banana', 'lm', 'd', 'jh', 'g', 'k', 'CPAKrs', 'y', 'llm', 'CPAKrs', 'CPAKrs']], [['apple', 'bb', 'apple', 'banana', 'lm', 'orange', 'apple', 'banana', 'banana', 'apple', 'kiwi', 'orange']], [['j', 'bb', 'c', 'd', 'd', 'a', 'a', 'f', 'f', 'h', 'i', 'j', 'j', 'f', 'd', 'd', 'd']], [[0, 0, 1, 2, 4, 4, 4, 5, 6, 6, 6, 2, 1, 0, 9, 4, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4, 3, 2, 2, 1, 0, 0]]]
results = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], [10, 15, 19, 18, 17, 26, 17, 18, 10], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'a'], ['apple', 'banana', 'orange', 'apple', 'banana', 'kiwi', 'orange'], ['a', 'b', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j'], ['apple', 'banana', 'orange', 'apple', 'banana', 'kiwi', 'orange', 'apple', 'orange', 'kiwi'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm'], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0], [], [1, 2, 3, 4, 5, 6, 7, 8, 9], ['a', 'bb', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j', 'f'], [1, 2, 3, 4, 5, 3, 5, 6, 7, 8, 9], ['a', 'bb', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j', 'f'], ['a', 'bb', 'c', 'd', 'a', 'e', 'f', 'h', 'i', 'j', 'f'], [1, 2, 3, 4, 5, 6, 7, 8, 9], ['banana', 'lm', 'd', 'g', 'k', 'CPAKrs', 'y', 'l'], ['apple', 'banana', 'orange', 'apple', 'banana', 'kiwi', 'orange', 'apple', 'orange', 'kiwi'], ['a', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j', 'f'], ['j', 'bb', 'c', 'd', 'a', 'e', 'f', 'h', 'i', 'j', 'f'], ['bb', 'apple', 'XkdbOWvF', 'wUpBgeXR', 'UKW', 'e', 'f', 'l', 'lm', 'CPAKrs'], ['apple', 'banana', 'apple', 'banana', 'kiwi', 'orange', 'apple'], ['a', 'c', 'd', 'g', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j', 'f'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 4], ['j', 'bbe', 'bb', 'c', 'd', 'a', 'e', 'f', 'h', 'i', 'j', 'f'], [True, None], [1, 2, 3, 4, 5, 3, 6, 7, 6, 7, 8, 9], [0, 1, 2, 4, 5, 6, 7, 8, 9, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0], ['apple', 'banana', 'lm', 'orange', 'apple', 'banana', 'apple', 'kiwi', 'orange'], ['apple', 'banana', 'apple', 'bbe', 'banana', 'kiwi', 'orange', 'apple', 'bbe'], ['a', 'bb', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j', 'f'], [True, False, None], ['a', 'beb', 'c', 'd', 'a', 'e', 'f', 'g', 'i', 'j', 'f'], ['banana', 'lm', 'd', 'g', 'k', 'CPAKrs', 'y', 'll', 'CPAKrs'], ['apple', 'banana', 'orange', 'apple', 'banana', 'kiwi', 'orange', 'apple', 'orange', 'kiwi'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 7], ['a', '', 'bb', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j', 'f'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 1], ['a', 'bb', 'c', 'd', 'a', 'e', 'h', 'f', 'g', 'h', 'i', 'j', 'f'], ['a', 'c', 'd', 'g', 'd', 'a', 'e', 'f', 'y', 'g', 'h', 'i', 'j', 'f'], [0, 1, 2, 4, 5, 6, 0, 9, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 0], [True, False], [1, 2, 3, 4, 5, 3, 5, 6, 7, 8, 9, 3], [1, 2, 3, 4, 5, 3, 5, 6, 7, 8, 9], ['apple', 'banana', 'orange', 'banana', 'kiwi', 'orange', 'banana'], ['a', 'bb', 'c', 'd', 'b', 'a', 'e', 'h', 'f', 'g', 'h', 'i', 'jh', 'j', 'f'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 7], ['apple', 'banana', 'orangbe', 'apple', 'banana', 'kiwi', 'orange', 'apple', 'orange', 'kiwi'], ['banana', 'lm', 'd', 'g', 'k', 'CPAKrs', 'y'], ['a', 'bb', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j', 'f', 'j'], ['apple', 'banana', 'orange', 'banana', 'kiwi', 'orange', 'banana'], ['banana', 'lm', 'd', 'orange', 'g', 'k', 'CPAKrs', 'y', 'll', 'CPAKrs'], ['a', 'b', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j', 'f'], [1, 2, 3, 4, 5, 6, 3, 7, 8, 6, 8, 9], ['beb', 'apple', 'banana', 'orange', 'apple', 'banana', 'kiwi', 'orange'], ['a', 'orange', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j', 'h'], ['apple', 'banana', 'orange', 'apple', 'banana', 'kiwi', 'orange', 'apple', 'orange', 'kiwi', 'orange'], [1, 2, 3, 4, 5, 6, 3, 7, 0, 7, 8, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 7], ['a', 'b', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'j'], ['beb', 'apple', 'banana', 'orange', 'apple', 'banana', 'kiwi', 'orange'], [True, False, True, None], ['apple', 'banana', 'orange', 'apple', 'banana', 'kiCPAKrswi', 'kiwi', 'orange', 'apple', 'orange', 'kiwi'], ['apple', 'banana', 'apple', 'bbe', 'banana', 'kiwi', 'orange', 'bbe', 'apple'], [True, False], [1, 2, 3, 4, 5, 6, 7, 8, 9, 7, 8], ['a', 'bb', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j', 'f', 'j', 'a'], ['apple', 'banana', 'orange', 'apple', 'banana', 'kiwkiwi', 'kiwi', 'orange', 'apple', 'orange', 'kiwi'], ['banana', 'lm', 'd', 'jh', 'g', 'k', 'CPAKrs', 'y', 'll', 'CPAKrs'], ['apple', 'banana', 'orange', 'apple', 'banana', 'kiwi', 'orange', 'apple', 'orange', 'kiwi', 'banana'], ['apple', 'applle', 'banana', 'apple', 'orangbe', 'banana', 'kiwi', 'orange', 'bbe', 'apple'], ['a', 'b', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j'], ['banana', 'lm', 'd', '', 'k', 'y', 'l'], ['apple', 'XkdbOWvF', 'wUpBgeXR', 'UKW', 'e', 'f', 'l', 'llm', 'CPAKrs'], [True, None], [True], ['beb', 'apple', 'banana', 'oapplerange', 'apple', 'banana', 'kiwi', 'orange'], [False, True, False, None, True], ['banana', 'lm', 'd', 'g', 'k', 'CPAKrs', 'y', 'banana'], ['j', 'bbe', 'bb', 'c', 'd', 'a', 'e', 'f', 'h', 'i', 'j', 'f', 'i'], [0, 1, 2, 4, 5, 6, 2, 0, 9, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0], ['banana', 'lm', 'baanbana', 'd', 'jh', 'g', 'k', 'banbana', 'CPAKrs', 'y', 'll', 'CPAKrs'], ['e', 'beb', 'i', 'apple', 'banana', 'orange', 'apple', 'orangbe', 'banana', 'kiwi', 'orange'], ['a', '', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm'], ['apple', 'banana', 'orange', 'banana', 'kiwi', 'orange', 'kiwi'], [1, 2, 3, 1, 4, 5, 6, 7, 8, 9, 7, 8], ['a', 'bb', 'c', 'd', 'b', 'a', 'f', 'a', 'e', 'h', 'f', 'g', 'h', 'i', 'jh', 'j', 'f'], ['banana', 'lm', 'd', 'jh', 'g', 'k', 'CPAKrs', 'y', 'llm', 'CPAKrs'], ['a', 'b', 'c', 'd', 'a', 'e', 'f', 'g', 'h', 'i', 'j'], [0, 1, 2, 4, 5, 6, 7, 0, 9, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0], [1, 2, 3, 4, 5, 6, 3, 7, 0, 2, 7, 8, 6, 8, 9], [0, 1, 2, 4, 5, 6, 7, 0, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0], [0, 1, 2, 4, 5, 6, 4, 6, 0, 9, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0, 9], ['banana', 'lm', 'd', 'k', 'CPAKrs', 'y', 'banana'], [0, 1, 2, 4, 5, 6, 7, 8, 9, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0, 4], ['j', 'bb', 'c', 'd', 'a', 'f', 'h', 'i', 'j', 'f'], [0, 1, 2, 4, 5, 1, 6, 7, 8, 9, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0], [1, 2, 3, 4, 5, 6, 7, 8, 3, 9, 7, 9], [0, 1, 2, 4, 5, 6, 7, 0, 9, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 0, 3, 2, 1, 0], [True, False], [False, True, False], ['banana', 'lm', 'd', 'g', 'k', 'y', 'banana'], ['e', 'beb', 'i', 'apple', 'banana', 'orange', 'apple', 'ee', 'orangbe', 'banana', 'kiwi', 'orange'], [0, 1, 2, 4, 5, 6, 7, 0, 9, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0], ['banana', 'baanbana', 'lm', 'CPAKrs', 'd', 'g', 'k', 'CPAKrs', 'y'], ['apple', 'banana', 'orange', 'banana', 'kiwi', 'orange', 'banana'], ['banana', 'lm', 'd', 'jh', 'g', 'k', 'CPAKrs', 'y', 'llm', 'CPAKrs'], ['apple', 'bb', 'apple', 'banana', 'lm', 'orange', 'apple', 'banana', 'apple', 'kiwi', 'orange'], ['j', 'bb', 'c', 'd', 'a', 'f', 'h', 'i', 'j', 'f', 'd'], [0, 1, 2, 4, 5, 6, 2, 1, 0, 9, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1, 0]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "consecutive_duplicates"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]', 'assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]', "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']"]:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
