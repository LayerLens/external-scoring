import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4], [[10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5], [[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 5], [[1, 1, 1, 2, 2, 3, 3, 3], 4], [[10, 20, 30, 40, 50, 60], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7], [[1, 1, 1, 2, 2, 40, 3, 3], 4], [[1, 1, 1, 2, 39, 2, 40, 50, 3, 3], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6], [[1, 1, 1, 2, 39, 2, 40, 3, 3, 3], 4], [[2, 1, 1, 1, 2, 2, 40, 3, 3], 4], [[1, 2, 3, 4, 5], 2], [[10, 20, 30, 40, 50, 60], 5], [[1, 1, 1, 39, 2, 40, 7, 3, 3, 3], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1], [[2, 1, 1, 1, 2, 2, 40, 3, 3], 1], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 3, 4], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 10], 9], [[1, 1, 1, 2, 2, 3, 3], 4], [[1, 4, 3, 4, 3, 4], 6], [[2, 1, 1, 2, 2, 40, 3, 3], 1], [[1, 1, 1, 39, 39, 2, 40, 3, 3, 3], 1], [[10, 20, 30, 40, 50, 60], 6], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 8], 5], [[10, 20, 40, 50, 60, 40], 3], [[1, 4, 3, 4, 3, 4], 5], [[1, 2, 3, 2, 4, 5, 6, 7, 8, 9, 10, 8], 5], [[1, 2, 3, 4, 4], 1], [[1, 2, 3, 2, 4, 5, 7, 7, 8, 9, 10, 8], 5], [[50, 2, 3, 4, 5], 5], [[3, 1, 2, 3, 4, 5], 3], [[1, 1, 1, 2, 39, 2, 40, 3, 3, 3], 1], [[1, 1, 1, 39, 2, 40, 3, 3, 3, 3], 2], [[2, 1, 1, 2, 2, 2, 40, 3, 3], 1], [[1, 1, 1, 4, 39, 2, 40, 7, 3, 3, 3, 4], 1], [[1, 40, 2, 3, 1, 4, 4], 2], [[1, 2, 3, 2, 4, 30, 5, 6, 7, 8, 9, 10, 8], 5], [[1, 2, 3, 2, 4, 30, 5, 6, 7, 8, 9, 10, 8], 4], [[2, 1, 1, 2, 2, 40, 3, 3], 2], [[10, 20, 30, 40, 50, 60], 4], [[1, 2, 3, 2, 4, 30, 5, 6, 7, 8, 9, 10], 5], [[1, 40, 2, 3, 1, 4, 4, 1], 2], [[1, 1, 1, 39, 39, 2, 40, 3, 3, 3, 3], 1], [[1, 1, 1, 39, 2, 40, 7, 3, 3, 3, 3, 1], 2], [[1, 1, 1, 39, 2, 40, 7, 3, 3, 3, 7], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9], [[1, 2, 3, 4, 3, 4], 3], [[1, 40, 2, 3, 1, 4, 4, 1, 40], 2], [[1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 8], 5], [[1, 1, 1, 2, 2, 40, 3, 0], 4], [[1, 2, 3, 0, 4, 5, 6, 6, 8, 9, 10, 8, 0], 5], [[2, 1, 1, 2, 2, 3, 3], 1], [[2, 1, 1, 2, 2, 40, 3, 3], 4], [[1, 1, 2, 2, 3, 3, 3], 4], [[2, 1, 1, 0, 2, 2, 40, 3, 3, 2], 1], [[2, 1, 1, 2, 2, 40, 40, 3, 3], 1], [[1, 40, 2, 3, 1, 4, 4, 1], 3], [[1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3], 1], [[1, 1, 1, 39, 39, 8, 30, 2, 40, 3, 3, 3], 1], [[10, 20, 40, 50, 60, 40, 50], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 9], [[1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 3], 1], [[3, 1, 2, 3, 1, 4, 5], 3], [[2, 1, 1, 2, 2, 2, 40, 3, 3, 3], 1], [[10, 0, 30, 40, 50, 4], 6], [[2, 6, 1, 2, 2, 40, 3, 3], 2], [[1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 3], 2], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 5], 6], [[1, 1, 1, 39, 2, 40, 7, 3, 3, 3, 7], 7], [[1, 40, 2, 3, 1, 4, 4, 1, 40], 1], [[1, 1, 7, 1, 2, 39, 2, 40, 3, 3, 3], 2], [[2, 7, 1, 1, 2, 2, 40, 3, 3], 1], [[1, 1, 1, 39, 39, 8, 30, 2, 40, 3, 3, 3], 9], [[1, 4, 3, 4, 3, 4, 4], 6], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 5, 10], 6], [[1, 1, 1, 2, 39, 2, 40, 3, 3, 3], 5], [[10, 20, 40, 50, 60, 7, 40, 50, 50], 2], [[1, 8, 2, 3, 2, 4, 30, 5, 6, 7, 8, 9, 10, 8, 30], 5], [[3, 10, 0, 30, 40, 50, 4], 6], [[2, 1, 1, 1, 2, 40, 3, 3], 4], [[10, 20, 40, 50, 60, 40, 50], 2], [[1, 2, 3, 10, 4, 5], 5], [[1, 1, 1, 2, 2, 40, 3, 0], 7], [[2, 1, 1, 2, 2, 40, 40, 3, 3, 3], 7], [[1, 1, 1, 39, 2, 40, 7, 3, 3, 3, 7], 8], [[2, 1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 3, 1], 1], [[1, 2, 3, 4, 4, 1], 1], [[1, 2, 3, 2, 4, 30, 5, 6, 7, 8, 9, 10, 8, 8], 5], [[1, 2, 3, 2, 2, 30, 7, 5, 6, 7, 8, 9, 10, 8, 2], 5], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 5, 3, 10], 6], [[2, 1, 1, 2, 2, 40, 40, 3, 3], 9], [[1, 40, 2, 3, 1, 4, 5, 1], 2], [[2, 60, 1, 1, 2, 2, 2, 40, 3, 3, 3], 1], [[50, 2, 4, 5], 2], [[10, 10, 20, 40, 50, 60, 40, 50], 2], [[10, 20, 40, 50, 60, 19, 40, 50], 2], [[1, 1, 7, 1, 2, 39, 2, 40, 3, 3, 3], 3], [[1, 2, 3, 2, 2, 30, 7, 5, 6, 6, 8, 9, 10, 8, 2], 5], [[1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 3], 7], [[2, 1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 1], 8], [[1, 1, 1, 39, 39, 30, 60, 2, 40, 3, 3, 3], 1], [[50, 4, 5], 2], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 5, 10], 10], [[1, 1, 1, 4, 39, 2, 40, 3, 3, 3, 4], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8]]
results = [[1, 1, 3, 4, 4, 5, 1], [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10], [2, 3, 4, 5], [1, 2, 3, 4], [1, 1, 1, 2, 3, 3, 3], [10, 20, 40, 50, 60], [1, 2, 3, 4, 5, 6, 8, 9, 10], [1, 1, 1, 2, 40, 3, 3], [1, 1, 1, 39, 2, 40, 50, 3, 3], [1, 2, 3, 4, 5, 7, 8, 9, 10], [1, 1, 1, 39, 2, 40, 3, 3, 3], [2, 1, 1, 2, 2, 40, 3, 3], [1, 3, 4, 5], [10, 20, 30, 40, 60], [1, 1, 39, 2, 40, 7, 3, 3, 3], [2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 1, 1, 2, 2, 40, 3, 3], [1, 2, 4, 5], [1, 2, 3, 4, 4], [1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 1, 2, 3, 3], [1, 4, 3, 4, 3], [1, 1, 2, 2, 40, 3, 3], [1, 1, 39, 39, 2, 40, 3, 3, 3], [10, 20, 30, 40, 50], [1, 2, 3, 4, 6, 7, 8, 9, 10, 8], [10, 20, 50, 60, 40], [1, 4, 3, 4, 4], [1, 2, 3, 2, 5, 6, 7, 8, 9, 10, 8], [2, 3, 4, 4], [1, 2, 3, 2, 5, 7, 7, 8, 9, 10, 8], [50, 2, 3, 4], [3, 1, 3, 4, 5], [1, 1, 2, 39, 2, 40, 3, 3, 3], [1, 1, 39, 2, 40, 3, 3, 3, 3], [1, 1, 2, 2, 2, 40, 3, 3], [1, 1, 4, 39, 2, 40, 7, 3, 3, 3, 4], [1, 2, 3, 1, 4, 4], [1, 2, 3, 2, 30, 5, 6, 7, 8, 9, 10, 8], [1, 2, 3, 4, 30, 5, 6, 7, 8, 9, 10, 8], [2, 1, 2, 2, 40, 3, 3], [10, 20, 30, 50, 60], [1, 2, 3, 2, 30, 5, 6, 7, 8, 9, 10], [1, 2, 3, 1, 4, 4, 1], [1, 1, 39, 39, 2, 40, 3, 3, 3, 3], [1, 1, 39, 2, 40, 7, 3, 3, 3, 3, 1], [1, 1, 39, 2, 40, 7, 3, 3, 3, 7], [1, 2, 3, 4, 5, 6, 7, 8, 10], [1, 2, 4, 3, 4], [1, 2, 3, 1, 4, 4, 1, 40], [1, 2, 3, 0, 5, 6, 7, 8, 9, 10, 8], [1, 1, 1, 2, 40, 3, 0], [1, 2, 3, 0, 5, 6, 6, 8, 9, 10, 8, 0], [1, 1, 2, 2, 3, 3], [2, 1, 1, 2, 40, 3, 3], [1, 1, 2, 3, 3, 3], [1, 1, 0, 2, 2, 40, 3, 3, 2], [1, 1, 2, 2, 40, 40, 3, 3], [1, 40, 3, 1, 4, 4, 1], [1, 1, 39, 39, 30, 2, 40, 3, 3, 3], [1, 1, 39, 39, 8, 30, 2, 40, 3, 3, 3], [10, 20, 50, 60, 40, 50], [1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 3], [3, 1, 3, 1, 4, 5], [1, 1, 2, 2, 2, 40, 3, 3, 3], [10, 0, 30, 40, 50], [2, 1, 2, 2, 40, 3, 3], [1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 3], [1, 2, 3, 4, 5, 7, 9, 10, 5], [1, 1, 1, 39, 2, 40, 3, 3, 3, 7], [40, 2, 3, 1, 4, 4, 1, 40], [1, 7, 1, 2, 39, 2, 40, 3, 3, 3], [7, 1, 1, 2, 2, 40, 3, 3], [1, 1, 1, 39, 39, 8, 30, 2, 3, 3, 3], [1, 4, 3, 4, 3, 4], [1, 2, 3, 4, 5, 7, 9, 10, 5, 10], [1, 1, 1, 2, 2, 40, 3, 3, 3], [10, 40, 50, 60, 7, 40, 50, 50], [1, 8, 2, 3, 4, 30, 5, 6, 7, 8, 9, 10, 8, 30], [3, 10, 0, 30, 40, 4], [2, 1, 1, 2, 40, 3, 3], [10, 40, 50, 60, 40, 50], [1, 2, 3, 10, 5], [1, 1, 1, 2, 2, 40, 0], [2, 1, 1, 2, 2, 40, 3, 3, 3], [1, 1, 1, 39, 2, 40, 7, 3, 3, 7], [1, 1, 1, 39, 39, 30, 2, 40, 3, 3, 3, 3, 1], [2, 3, 4, 4, 1], [1, 2, 3, 2, 30, 5, 6, 7, 8, 9, 10, 8, 8], [1, 2, 3, 2, 30, 7, 5, 6, 7, 8, 9, 10, 8, 2], [1, 2, 3, 4, 5, 7, 9, 10, 5, 3, 10], [2, 1, 1, 2, 2, 40, 40, 3], [1, 2, 3, 1, 4, 5, 1], [60, 1, 1, 2, 2, 2, 40, 3, 3, 3], [50, 4, 5], [10, 20, 40, 50, 60, 40, 50], [10, 40, 50, 60, 19, 40, 50], [1, 1, 1, 2, 39, 2, 40, 3, 3, 3], [1, 2, 3, 2, 30, 7, 5, 6, 6, 8, 9, 10, 8, 2], [1, 1, 1, 39, 39, 30, 40, 3, 3, 3, 3], [2, 1, 1, 1, 39, 39, 30, 40, 3, 3, 3, 1], [1, 1, 39, 39, 30, 60, 2, 40, 3, 3, 3], [50, 5], [1, 2, 3, 4, 5, 6, 7, 9, 10, 10], [1, 1, 4, 39, 2, 40, 3, 3, 3, 4], [1, 2, 3, 4, 5, 6, 7, 9, 10]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "remove_kth_element"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]', 'assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]', 'assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
