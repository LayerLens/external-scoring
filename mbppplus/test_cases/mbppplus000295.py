import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[5, 9, 7, 6], 4], [[7, 3, 5], 3], [[7, 3], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 20], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5], 11], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5, 3], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 20], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5], 10], [[1, 2, 4, 3, 2, 1, 2, 3, 4, 5, 4, 5], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 20], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 4, 5], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 10], [[1, 2, 3, 2, 1, 2, 3, 2, 4, 5, 4, 5, 3], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 6], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5, 3], 7], [[1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 16], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15], 14], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 14], 16], [[1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 16], [[1, 2, 2, 1, 2, 3, 4, 5, 4, 4, 5], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 18], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3], [[1, 2, 3, 2, 1, 2, 3, 17, 4, 5, 4, 5], 1], [[1, 2, 3, 4, 5, 6, 7, 2, 9, 10, 11, 12, 14, 14, 15, 16, 17, 18, 19, 20, 2], 20], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 4, 5], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 14, 19], 16], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 15], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15], 15], [[1, 2, 4, 5, 6, 7, 8, 9, 10], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 1], 20], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 5], [[1, 2, 3, 4, 5, 6, 7, 16, 20, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 16], [[1, 2, 3, 4, 5, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 7, 2], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 18, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 1], 20], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 12], [[1, 2, 3, 4, 5, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 15], [[1, 2, 4, 5, 6, 7, 8, 9, 10], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15], 14], [[1, 2, 3, 4, 5, 6, 8, 9, 10, 6], 3], [[1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16], 16], [[2, 3, 2, 4, 2, 3, 2, 4, 5, 4, 5, 3], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 6], 6], [[0, 2, 4, 3, 2, 1, 2, 3, 4, 5, 4, 5], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], 8], [[1, 4, 2, 3, 4, 5, 6, 7, 4, 8, 9, 10], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 13, 15, 16, 17, 18, 19, 20, 2], 20], [[1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16], 17], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 8], 8], [[1, 2, 2, 1, 2, 3, 4, 5, 4, 3, 5], 8], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15], 20], [[1, 4, 2, 3, 4, 5, 6, 7, 4, 8, 9, 10], 6], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15, 1], 14], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 15, 16, 17, 18, 19, 20, 2], 20], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 7], [[1, 2, 3, 4, 5, 6, 7, 8, 18, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 1], 20], [[1, 2, 3, 4, 5, 6, 7, 2, 8, 9, 10, 19, 6], 6], [[1, 2, 3, 4, 5, 5, 6, 7, 8, 17, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 6], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 21], [[1, 2, 3, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 20], [[1, 4, 2, 3, 4, 5, 6, 7, 8, 2, 9, 10], 11], [[1, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6], 3], [[1, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 6], 1], [[1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16], 8], [[1, 2, 3, 4, 5, 6, 9, 7, 8, 9, 2, 10], 4], [[1, 2, 3, 4, 5, 6, 13, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 8], 6], [[1, 2, 3, 4, 5, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 7, 2], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 5, 19, 20, 15], 14], [[1, 2, 8, 4, 5, 6, 7, 8, 9, 10], 3], [[1, 2, 5, 3, 9, 3, 1, 2, 4, 3, 17, 4, 5, 4, 5], 0], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 10, 12, 13, 14, 15, 16, 17, 5, 19, 10, 20, 15], 2], [[1, 2, 3, 5, 6, 7, 16, 20, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1], 16], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 16], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 5, 19, 20, 15, 1], 14], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 3], [[2, 3, 2, 4, 2, 3, 2, 4, 5, 4, 5, 3, 5], 11], [[17, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15], 14], [[1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 2, 9, 10, 5], 11], [[1, 4, 2, 3, 4, 5, 6, 7, 4, 8, 9, 10], 7], [[1, 2, 5, 3, 9, 3, 1, 2, 4, 3, 17, 4, 5, 4, 5, 9], 0], [[14, 4, 2, 3, 4, 5, 6, 7, 4, 8, 9, 10], 6], [[1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16, 16], 15], [[1, 2, 2, 1, 2, 3, 4, 5, 4, 3, 5], 9], [[1, 2, 3, 3, 1, 2, 3, 17, 4, 5, 4, 5], 1], [[1, 4, 2, 3, 4, 5, 6, 4, 8, 9], 3], [[21, 1, 4, 2, 3, 4, 5, 6, 7, 4, 8, 9, 10], 7], [[1, 2, 4, 4, 5, 6, 7, 8, 9, 6, 10, 12, 13, 14, 15, 16, 17, 5, 19, 10, 20, 15], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2], 16], [[1, 2, 3, 3, 1, 2, 9, 3, 17, 4, 5, 4, 5], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 8], 3], [[1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5], 10], [[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5, 2], 11], [[2, 3, 2, 4, 2, 3, 2, 4, 5, 4, 5, 3, 5, 3], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 4], [[1, 2, 3, 3, 1, 2, 3, 17, 4, 5, 5], 9], [[1, 2, 4, 3, 2, 1, 2, 3, 4, 5, 4, 5], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 14, 19], 20], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 8], 4], [[17, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 5, 19, 20, 15], 14]]
results = [47, 12, 4, 339, 2664, 202, 202, 2664, 159, 202, 2651, 159, 42, 339, 186, 63, 32, 402, 1200, 735, 1200, 1200, 206, 1923, 6, 0, 2615, 10, 1200, 1064, 6, 840, 14, 2651, 42, 1397, 300, 2650, 24, 528, 1042, 26, 0, 731, 6, 1200, 208, 63, 200, 168, 350, 2511, 1560, 168, 96, 2651, 61, 24, 735, 2766, 426, 84, 2650, 63, 60, 2874, 2663, 354, 22, 0, 224, 24, 63, 402, 935, 22, 0, 3, 1408, 1200, 935, 6, 208, 939, 288, 84, 0, 98, 1064, 132, 0, 14, 176, 3, 1199, 0, 6, 301, 202, 208, 24, 218, 159, 2664, 24, 1117]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "pair_xor_Sum"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert pair_xor_Sum([5,9,7,6],4) == 47', 'assert pair_xor_Sum([7,3,5],3) == 12', 'assert pair_xor_Sum([7,3],2) == 4']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
