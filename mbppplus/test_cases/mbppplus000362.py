import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[[1, 3], [5, 7], [9, 11], [13, 15, 17]]], [[[1, 2], [2, 3], [4, 5]]], [[[1, 0], [2, 0]]], [[[1, 2]]], [[]], [[[1]]], [[[1, [2, [3, 4]]]]], [[[[1, 2, 3], [4, 5, [6, 7, [8, 9]]]]]], [[[[1, 2, [3, 4]], [5, 6, [7, 8, [9, 10]]]], [[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[1, [2, [3]]], [4, [5, [6]]]]]], [[[[1], [2], [3]], [[4], [5]], [[6], [7], [8], [9]]]], [[[[[[1, 2]]]]]], [[[[[[[[[1, 2, 3]]]]]]]]], [[[[4, 5, [6, 7, [8, 9]]]]]], [[2, 3, [4, [5, [6, [7, [8, 9]]]]]]], [[1, [2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[1, 0]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[True, None, False, 'obIluFKJh', None, 'HHSVQOINN', 'HHSVQOINN']], [[[[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]], [[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]]]], [[2, 4, 3, [4, [5, [6, [7, [8, 9]]]]]]], [[[[1], [2], [3]], [[4], [5]], [[6], [7], [8], [9]], [[6], [7], [8], [9]]]], [[[[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]]]], [[2, 3, [4, [5, [6, [7, [8, 9]]]]], [4, [5, [6, [7, [8, 9]]]]]]], [[[[5], [5]]]], [[[[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]]], [[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]]]]], [[[[1, [2], [2]], [1, [2], [2]]], [[1, [2], [2]], [1, [2], [2]]]]], [[[[1, [2], [2], [2]], [1, [2], [2], [2]], [1, [2], [2], [2]]], [[1, [2], [2], [2]], [1, [2], [2], [2]], [1, [2], [2], [2]]]]], [[[[[[[[[1, 2, 3]]]], [[[[1, 2, 3]]]]]]], [[[[[[[1, 2, 3]]]], [[[[1, 2, 3]]]]]]]]], [[[14], [14]]], [[[[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]]], [[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]]], [[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]]]]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[[1, 3], [4, 5, [6, 7, [8, 9]]]]]], [[[[15, 16, [17, 18, [19, 20]]]], [[15, 16, [17, 18, [19, 20]]]], [[15, 16, [17, 18, [19, 20]]]]]], [[[[2, [3, 4]]], [[2, [3, 4]]]]], [[[[5]]]], [[[[6], [7], [8], [9], [6]], [[1], [2], [3]], [[4], [5]], [[6], [7], [8], [9], [6]], [[6], [7], [8], [9], [6]]]], [[[[1, 2, 3, 2], [1, 2, 3, 2], [4, 5, [6, 7, [8, 9]]]]]], [[[[[[1, 2]]], [[[1, 2]]]], [[[[1, 2]]], [[[1, 2]]]]]], [[[[1, [2], [2], [2]], [1, [2], [2], [2]], [1, [2], [2], [2]]], [[1, [2], [2], [2]], [1, [2], [2], [2]], [1, [2], [2], [2]]], [[1, [2], [2], [2]], [1, [2], [2], [2]], [1, [2], [2], [2]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[1], [1]]], [[[[[[1, 2]]], [[[1, 2]]]], [[[[1, 2]]], [[[1, 2]]]], [[[[1, 2]]], [[[1, 2]]]]]], [[[[1, [2, [3]]], [4, [5, [6]]]], [[1, [2, [3]]], [4, [5, [6]]]]]], [['obIluFKJh', 'HHSVQOINN']], [[2, [4, [5, [6, [7, [8, 9]]]]]]], [[-10.342467253952691, -91.98145901709941]], [[[[2, [3, 4]]], [[2, [3, 4]]], [[2, [3, 4]]]]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[2, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 1, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[16, 19, 99, -25, 3, -100, 11]], [[[[15, 16, [17, 18, [19, 20]]]], [[15, 16, [17, 18, [19, 20]]]]]], [[[], [], [], []]], [[[[[[[[[1, 2, 3]]]], [[[[1, 2, 3]]]]]]], [[[[[[[1, 2, 3]]]], [[[[1, 2, 3]]]]]]], [[[[[[[1, 2, 3]]]], [[[[1, 2, 3]]]]]]]]], [[2, 3, [[[6, [7, [8, 9]]]]], [[[6, [7, [8, 9]]]]], 2]], [[[True, False, True, False, True, False, True], [], [], []]], [[[[2, [3, 4]], [2, [3, 4]]], [[2, [3, 4]], [2, [3, 4]]]]], [[[1, 1], [1, 1]]], [[[1, 1], [1, 1], [1, 1]]], [[[[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[1, 2, [3, 4]], [5, 6, [7, 8, [9, 10]]]], [[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]], [[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]]]]]], [[[47.25172202541427, -91.98145901709941, -91.98145901709941, -10.342467253952691, -91.98145901709941, -10.342467253952691, -10.342467253952691, -10.342467253952691], []]], [[[[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[1, 2, [3, 4]], [5, 6, [7, 8, [9, 10]]]], [[11, 12, [13, 14]], [15, 16, [17, 18, [19, 20]], 16]]]], [[[[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[]]], [[[[0], [0], [0]]]], [[[[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]], [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]], [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]], [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]], [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]], [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[[4, 1, 3], [4, 5, [6, 7, [8, 9]]], [4, 1, 3]], [[4, 1, 3], [4, 5, [6, 7, [8, 9]]], [4, 1, 3]]]], [[[[1], [2], [3], [2]], [[4], [5]], [[6], [7], [8], [9]]]], [[[2, 99, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 99, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 99, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 99, 1, [3, [4], [5, [6], [7, [8], [9]]]]], [2, 99, 1, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]]], [[[[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]], [[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]], [[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]], [[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]]]], [[[[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]]], [[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]]], [[11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]], [15, 16, [17, 18, [19, 20]]], [11, 12, [13, 14], [13, 14]], [11, 12, [13, 14], [13, 14]]]]], [[[[4], [5], [4]], [[1], [2], [3], [2]], [[4], [5], [4]], [[6], [7], [8], [9]], [[1], [2], [3], [2]]]], [[[True, False, True, False, True, False, True], ['HHSVQOINN', 'obIluFKJh', 'obIluFKJh', 'qzJkrue, None], [], [], []]], [[[], [], [True, None], [], [18, 0, -63, 9, 6, 3, 20, -63, 4, 60], [], [], []]], [[[True, False, True, False, True, False, True, True], [], [], [True, False, True, False, True, False, True, True], []]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[[4], [5], [4]], [[1], [], [3], [], []], [[4], [5], [4]], [[6], [7], [8], [9]], [[1], [], [3], [], []]]], [[0]], [[True, None, False, None, 'HHSVQOINN', 'HHSVQOINN']], [[[[[2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]], [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 20, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]], [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]], [2, [3, [4], [5, [6], [7, [8], [9]]]]]]], [[[47.25172202541427, -91.98145901709941, -91.98145901709941, -11.162037698096084, -91.98145901709941, -10.342467253952691, -10.342467253952691, -10.342467253952691], [], [], [], [47.25172202541427, -91.98145901709941, -91.98145901709941, -11.162037698096084, -91.98145901709941, -10.342467253952691, -10.342467253952691, -10.342467253952691]]], [[[[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]], [[3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]], 2, 1, [3, [4], [5, [6], [7, [8], [9]]], [5, [6], [7, [8], [9]]]]]]], [[[[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [17, 17, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[True, None, False, 'obIluFKJh', None, 'HHSVQOINN', 'HHSVQOINN', False]], [[[[11, 12], [11, 12], [15, 16, [17, 18, [19, 20]]]], [[11, 12], [11, 12], [15, 16, [17, 18, [19, 20]]]], [[1, 2, [3, 4]], [5, 6, [7, 8, [9, 10]]]], [[11, 12], [11, 12], [15, 16, [17, 18, [19, 20]]]], [[11, 12], [11, 12], [15, 16, [17, 18, [19, 20]]]]]], [[['qQtdzvurOO', 'qzJk', 'HHSVQOINN', 'qQtdzvurOOqzJk', 'y', 'HHSVQOINN', 'HHSVQOINN'], ['qQtdzvurOO', 'qzJk', 'HHSVQOINN', 'qQtdzvurOOqzJk', 'y', 'HHSVQOINN', 'HHSVQOINN'], []]], [[[[1, 3], [4, 5, [6, 7, [8, 9]]]], [[1, 3], [4, 5, [6, 7, [8, 9]]]]]], [[2, 4, 2, [4, [5, [6, [7, [8, 9]]]]]]]]
results = [4, 3, 2, 1, 0, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 0, 2, 0, 2, 1, 4, 1, 2, 1, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 1, 5, 1, 2, 3, 1, 2, 3, 2, 0, 1, 0, 3, 3, 4, 0, 2, 4, 3, 2, 4, 2, 2, 3, 2, 3, 2, 1, 2, 2, 1, 1, 2, 3, 5, 2, 3, 5, 4, 4, 4, 3, 5, 4, 5, 5, 2, 5, 2, 4, 4, 6, 2, 6, 3, 3, 2, 3, 2, 2, 1, 4, 4, 6, 8, 5, 4, 5, 0, 0, 1, 5, 5, 4, 2, 5, 0, 5, 3, 2, 1]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "count_list"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4', 'assert count_list([[1,2],[2,3],[4,5]]) == 3', 'assert count_list([[1,0],[2,0]]) == 2']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
