import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 0, 2, 0, 3, 4]], [[2, 3, 2, 0, 0, 4, 0, 5, 0]], [[0, 1, 0, 1, 1]], [[]], [[2, 3, 4, 0, 0, 7, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0]], [[0, 4, 2, 0, 9, 0, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0]], [[0, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 0, 7, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10]], [[5, 0, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 0]], [[2, 3, 4, 0, 0, 9, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 7]], [[0, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 0, 7, 0, 2, 0]], [[5, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 3]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 7, 0]], [[5, 0, 1, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[0, 4, 2, 0, 9, 0, 8, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0]], [[5, 0, 9, 0, 3, 5, 2, 8, 6, 0, 7, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10]], [[2, 3, 4, 0, 0, 9, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]], [[5, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 3, 7]], [[2, 3, 4, 0, 0, 9, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0, 0]], [[5, 9, 0, 3, 0, 2, 8, 8, 7, 0, 7, 0, 3, 7, 0]], [[61, -7, 42, -5, 90, 97]], [[0, 9, 0, 3, 5, 8, 6, 0, 0, 0]], [[0, 0, 0, 0, 0, 5, 1, 9, 0, 3, 0, 7, 0, 0]], [[0, 0, 0, 0, 0, 5, 1, 9, 0, 3, 0, 7, 0, 0, 0]], [[3, 4, 0, 0, 9, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0, 0]], [[0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 6, 3, 4, 5, 6, 7, 8, 9, 10]], [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10]], [[-5, 0, 9, 0, 3, 5, 2, 8, 6, 12, 7, 0, 0]], [[5, 1, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 6, 3, 4, 5, 5, 7, 8, 9, 10]], [[2, 3, 4, 0, 0, 9, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 6, 0]], [[2, 3, 4, 0, 9, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 6, 0, -1]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 1, 7, 1]], [[5, 0, 1, 0, 3, 0, 8, 6, 0, 7, 0, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 0]], [[3, 4, 0, 0, 9, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 0, 0]], [[0, 4, 2, 0, 9, 0, 8, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 3, 0]], [[2, 3, 4, 0, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]], [[0, 9, 0, 3, 8, 6, 0, 0, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 12, 0, 0]], [[5, 0, 1, 0, 3, 0, 8, 6, 0, 7, 0, 0, 8]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 11, 0, 0]], [[0, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 7, 0, 2, 0, 0]], [[5, 0, 1, 9, 0, 3, -1, 2, -5, 6, 0, 7, 11, 0, 0]], [[5, 0, 1, 0, 3, 0, 8, 6, 0, 6, 0, 0]], [[2, 3, 4, 0, 0, 9, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0, 9]], [[5, 0, 1, 9, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 11, 0, 0, 9]], [[5, 0, 1, 9, -1, 3, 0, 2, 8, 6, 0, 7, 11, 0, 0]], [[0, 4, 2, 0, 9, 0, 8, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0, 3]], [[90, 9, 0, 3, 8, 6, 0, 0, 0]], [[0, 4, 2, 9, 0, 8, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0, 3]], [[2, 3, 4, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]], [[5, 1, 9, 0, 3, 0, 8, 6, 0, 7, 0, 5]], [[5, 0, 1, 0, 5, 3, 0, 8, 6, 0, 7, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 61, 3, 4, 5, 6, 7, 9, 7, 6]], [[False, False, True, True, True, True]], [[5, 0, 5, 1, 0, 3, 0, 8, 6, 0, 7, 0, 0, 8]], [[2, 3, 4, 0, 0, 9, 2, 5, 6, 0, 0, 9, 0, 8, 11, 0, 0, 12, 13, 14, 0]], [[1, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[2, 3, 4, 0, 9, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 9, 14, 6, 0, -1, 0]], [[5, 11, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 12, 0, 0, 1]], [[5, 1, 9, 0, 3, 0, 8, 6, -1, 7, 0, 5, 5]], [[5, 0, 1, 0, 3, 0, 8, 6, 7, -1, 0, 8]], [[0, 1, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[0, 0, 0, 0, 0, 5, 1, 9, 0, 3, 0, 7, 0, 0, 0, 0]], [[0, 0, -5, 0, 0, 0, 5, 1, 0, 9, 0, 4, 0, 7, 0, 2, 0]], [[5, 0, 1, 9, 0, 3, 0, 2, 5, 8, 6, 0, 7, 0, 7, 0, 6]], [[5, 0, 9, 9, 0, 0, 8, 6, 0, -1, 7, 0, 9]], [[False, False, True, False, True, True]], [[5, 0, 1, 9, 0, 3, 0, -1, 2, 8, 6, 0, 7, 11, 0, 0]], [[0, 1, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 0, 7, 0, 0]], [[5, 1, 9, 0, 3, 0, 8, 6, -1, 7, 0, 5, 5, 3]], [[5, 9, 0, 3, 3, 0, 2, 8, 6, 0, 7, 0, 3, 7]], [[5, 0, 1, 9, 0, 3, 0, 8, 6, 0, 7, 0, 0]], [[2, 3, 4, 0, 0, 9, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 12, 13, 15, 0]], [[1, 8, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[8, 9, 0, 3, 0, 8, 6, 0, 7, 0]], [[0, 4, 2, 9, 0, 8, 3, 7, 1, 9, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0, 3]], [[0, 1, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 0, 7, 0, 0, 0]], [[0, 4, 2, 0, 0, 3, 7, 0, 0, 5, 1, 6, 0, 8, 0, 0, 0]], [[5, 1, 9, 0, 3, 0, 9, 6, 0, 7, 5]], [[0, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 7, 0, 1, 0, 1]], [[5, 9, 0, 3, 0, 8, 8, 7, 0, 7, 0, 3, 7, 0]], [[61, -7, 42, -5, 97]], [[5, 0, 1, 9, -1, 3, 0, 2, 8, 6, 0, 7, 11, 0, 0, -1]], [[27, 27]], [[5, 1, 9, 0, 3, 0, 8, 6, -2, 7, 0, 5, 5]], [[0, 1, 0, 0, 0, 0, 5, 1, 0, 9, 0, 3, 0, 7, 7, 0, 0]], [[90, 1, 9, 0, 3, 0, 8, 6, -2, 7, 0, 5, 5]], [[2, 9, 4, 0, 0, 9, 2, 5, 5, 6, 0, 9, 0, 8, 11, 0, 0, 12, 13, 14, 0]], [[0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 6, 4, 4, 5, 5, 7, 8, 9, 10]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 1, 2, 3, 4, 5, 27, 6, 7, 9, 10]], [[5, 0, 1, 9, 0, 0, 2, 8, 6, 0, 7, 0, 0]], [[5, 0, 1, 9, 0, 3, 0, 8, 6, 0, 6, 0, 0, 0]], [[0, 0, 0, 0, 5, 0, 9, 0, 3, 7, 0, 2, 0, 0]], [[5, 0, 1, 9, -1, 3, 0, 2, 8, 6, 0, 7, 6, 11, 0, 0]], [[5, 0, 1, 9, -1, 3, 0, 2, 8, 6, 0, 7, 6, 11, 0, 0, 2]], [[5, 0, 1, 9, -1, 3, 0, 2, 8, 6, 0, 11, 0, 0, -1]], [[2, 3, 4, 0, 0, 9, 0, 5, 6, 0, 0, 0, 8, 10, 0, 12, 13, 15, 0]], [[5, 9, 3, 0, 2, 8, 8, 7, 0, 7, 0, 3, 0]], [[5, -1, 1, 9, -1, 3, 0, 2, 8, 6, 0, 6, 11, 0, 0, 6]], [[5, 0, 1, 9, 0, 3, 0, 2, 8, 6, 0, 7, 0, 0, 1, 0]], [[5, 1, 9, 0, 3, 0, 8, 6, 0, 0, 7, 0]], [[0, 4, 2, 0, 0, 3, 7, 0, 1, 0, 5, 1, 6, 0, 8, 0, 0, 0]]]
results = [[1, 2, 3, 4, 0, 0], [2, 3, 2, 4, 5, 0, 0, 0, 0], [1, 1, 1, 0, 0], [], [2, 3, 4, 7, 5, 6, 9, 8, 10, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 2, 8, 6, 7, 0, 0, 0, 0, 0], [4, 2, 9, 3, 7, 5, 1, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 3, 4, 5, 6, 7, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 9, 3, 2, 8, 6, 7, 0, 0, 0, 0, 0, 0], [2, 3, 4, 9, 5, 6, 9, 8, 10, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 2, 8, 6, 7, 7, 0, 0, 0, 0, 0], [5, 1, 9, 3, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 9, 3, 2, 8, 6, 7, 3, 0, 0, 0, 0], [5, 1, 9, 3, 2, 8, 6, 7, 7, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 8, 6, 7, 0, 0, 0, 0, 0], [4, 2, 9, 8, 3, 7, 5, 1, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 9, 3, 5, 2, 8, 6, 7, 0, 0, 0, 0, 0], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 4, 9, 5, 6, 9, 8, 10, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0], [5, 9, 3, 2, 8, 6, 7, 3, 7, 0, 0, 0, 0], [2, 3, 4, 9, 5, 6, 9, 8, 10, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 9, 3, 2, 8, 8, 7, 7, 3, 7, 0, 0, 0, 0, 0], [61, -7, 42, -5, 90, 97], [9, 3, 5, 8, 6, 0, 0, 0, 0, 0], [5, 1, 9, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 9, 5, 6, 9, 8, 10, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, 1, 6, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 2, 3, 4, 5, 6, 7, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-5, 9, 3, 5, 2, 8, 6, 12, 7, 0, 0, 0, 0], [5, 1, 9, 3, 8, 6, 7, 0, 0, 0, 0], [-1, 1, 6, 3, 4, 5, 5, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 4, 9, 5, 6, 9, 8, 10, 12, 13, 14, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 4, 9, 5, 6, 9, 8, 10, 12, 13, 14, 6, -1, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 2, 8, 6, 7, 1, 7, 1, 0, 0, 0, 0, 0], [5, 1, 3, 8, 6, 7, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 2, 8, 6, 7, 0, 0, 0, 0, 0, 0], [3, 4, 9, 5, 6, 9, 8, 10, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 9, 8, 3, 7, 5, 1, 6, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 4, 5, 6, 9, 8, 10, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0], [9, 3, 8, 6, 0, 0, 0, 0, 0], [5, 1, 9, 3, 2, 8, 6, 7, 12, 0, 0, 0, 0, 0, 0], [5, 1, 3, 8, 6, 7, 8, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 2, 8, 6, 7, 11, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, -1, 2, -5, 6, 7, 11, 0, 0, 0, 0, 0], [5, 1, 3, 8, 6, 6, 0, 0, 0, 0, 0, 0], [2, 3, 4, 9, 5, 6, 9, 8, 10, 12, 13, 14, 9, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 9, 3, 8, 6, 7, 0, 0, 0, 0, 0], [5, 1, 9, 3, 2, 8, 6, 7, 11, 9, 0, 0, 0, 0, 0, 0], [5, 1, 9, -1, 3, 2, 8, 6, 7, 11, 0, 0, 0, 0, 0], [4, 2, 9, 8, 3, 7, 5, 1, 6, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [90, 9, 3, 8, 6, 0, 0, 0, 0], [4, 2, 9, 8, 3, 7, 5, 1, 6, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 4, 5, 6, 9, 8, 10, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 8, 6, 7, 5, 0, 0, 0, 0], [5, 1, 5, 3, 8, 6, 7, 0, 0, 0, 0, 0, 0], [1, 2, 61, 3, 4, 5, 6, 7, 9, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [True, True, True, True, 0, 0], [5, 5, 1, 3, 8, 6, 7, 8, 0, 0, 0, 0, 0, 0], [2, 3, 4, 9, 2, 5, 6, 9, 8, 11, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0], [1, 9, 3, 8, 6, 7, 0, 0, 0, 0], [2, 3, 4, 9, 5, 6, 9, 8, 10, 12, 13, 9, 14, 6, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 11, 1, 9, 3, 2, 8, 6, 7, 12, 1, 0, 0, 0, 0, 0], [5, 1, 9, 3, 8, 6, -1, 7, 5, 5, 0, 0, 0], [5, 1, 3, 8, 6, 7, -1, 8, 0, 0, 0, 0], [1, 9, 3, 8, 6, 7, 0, 0, 0, 0, 0], [5, 1, 9, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-5, 5, 1, 9, 4, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 2, 5, 8, 6, 7, 7, 6, 0, 0, 0, 0, 0, 0], [5, 9, 9, 8, 6, -1, 7, 9, 0, 0, 0, 0, 0], [True, True, True, 0, 0, 0], [5, 1, 9, 3, -1, 2, 8, 6, 7, 11, 0, 0, 0, 0, 0, 0], [1, 5, 1, 9, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 8, 6, -1, 7, 5, 5, 3, 0, 0, 0], [5, 9, 3, 3, 2, 8, 6, 7, 3, 7, 0, 0, 0, 0], [5, 1, 9, 3, 8, 6, 7, 0, 0, 0, 0, 0, 0], [2, 3, 4, 9, 5, 6, 9, 8, 10, 12, 13, 15, 0, 0, 0, 0, 0, 0, 0, 0], [1, 8, 9, 3, 8, 6, 7, 0, 0, 0, 0], [8, 9, 3, 8, 6, 7, 0, 0, 0, 0], [4, 2, 9, 8, 3, 7, 1, 9, 5, 1, 6, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0], [1, 5, 1, 9, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 3, 7, 5, 1, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 9, 6, 7, 5, 0, 0, 0], [5, 1, 9, 3, 7, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 9, 3, 8, 8, 7, 7, 3, 7, 0, 0, 0, 0, 0], [61, -7, 42, -5, 97], [5, 1, 9, -1, 3, 2, 8, 6, 7, 11, -1, 0, 0, 0, 0, 0], [27, 27], [5, 1, 9, 3, 8, 6, -2, 7, 5, 5, 0, 0, 0], [1, 5, 1, 9, 3, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [90, 1, 9, 3, 8, 6, -2, 7, 5, 5, 0, 0, 0], [2, 9, 4, 9, 2, 5, 5, 6, 9, 8, 11, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0], [-1, 1, 6, 4, 4, 5, 5, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0], [15, 1, 2, 3, 4, 5, 27, 6, 7, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 2, 8, 6, 7, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 8, 6, 6, 0, 0, 0, 0, 0, 0, 0], [5, 9, 3, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, -1, 3, 2, 8, 6, 7, 6, 11, 0, 0, 0, 0, 0], [5, 1, 9, -1, 3, 2, 8, 6, 7, 6, 11, 2, 0, 0, 0, 0, 0], [5, 1, 9, -1, 3, 2, 8, 6, 11, -1, 0, 0, 0, 0, 0], [2, 3, 4, 9, 5, 6, 8, 10, 12, 13, 15, 0, 0, 0, 0, 0, 0, 0, 0], [5, 9, 3, 2, 8, 8, 7, 7, 3, 0, 0, 0, 0], [5, -1, 1, 9, -1, 3, 2, 8, 6, 6, 11, 6, 0, 0, 0, 0], [5, 1, 9, 3, 2, 8, 6, 7, 1, 0, 0, 0, 0, 0, 0, 0], [5, 1, 9, 3, 8, 6, 7, 0, 0, 0, 0, 0], [4, 2, 3, 7, 1, 5, 1, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "move_zero"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]', 'assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]', 'assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
