import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[10, 20], [10, 5], [4, 2], [1000000000000, 1000000000000], [0.5, 0.5], [2.5, 4.8], [2.5, 0.5], [0.5, 4.8], [4.8, 4.8], [0.5, 2.5], [3.232269033100607, 4.8], [2.2649401818410433, 2.5], [3.355279579797867, 0.5], [2.827945062082224, 3.232269033100607], [2.827945062082224, 0.5], [3.6724676500173103, 0.5], [2.5, 2.5], [2.502529257484548, 0.5], [3.6724676500173103, 3.6724676500173103], [4.30918028054133, 0.5], [3.232269033100607, 3.232269033100607], [2.502529257484548, 2.502529257484548], [4.30918028054133, 4.30918028054133], [2.4015224002109283, 2.5], [2.7249479696078422, 0.44475025198075785], [0.44475025198075785, 3.387688585553926], [3.232269033100607, 4.30918028054133], [0.28729718633895834, 2.502529257484548], [4.643217137707291, 3.6724676500173103], [999999999999, 999999999999], [1.6141425564518155, 2.5], [3.232269033100607, 1.9400105931597424], [3.387688585553926, 2.902763503893509], [0.44475025198075785, 2.7249479696078422], [4.577650682955883, 4.577650682955883], [2.5, 4.577650682955883], [2.502529257484548, 1.1182095268286556], [2.7249479696078422, 2.7249479696078422], [0.44475025198075785, 0.5], [2.800623749840809, 3.1735103883415894], [1.6141425564518155, 4.30918028054133], [4.361641706471223, 4.643217137707291], [3.9979716418805142, 3.9979716418805142], [0.24900631443838703, 0.44475025198075785], [0.18551896339706864, 2.926505105970933], [2.5, 5.337986881695393], [0.28729718633895834, 0.3318682967427828], [2.4015224002109283, 4.8], [0.44475025198075785, 3.232269033100607], [2.7249479696078422, 2.2649401818410433], [3.355279579797867, 2.800623749840809], [2.2649401818410433, 1.8949633184341914], [4.643217137707291, 4.730780679514876], [3.232269033100607, 3.9979716418805142], [3.232269033100607, 4.3597224259926195], [4.938837763181859, 3.038849187066821], [5.337986881695393, 3.6724676500173103], [4.30918028054133, 2.7249479696078422], [0.18551896339706864, 3.387688585553926], [3.6724676500173103, 4.5109674752781945], [5.544111628815752, 4.30918028054133], [4.938837763181859, 4.938837763181859], [1.6141425564518155, 2.491326410875134], [1.528102887111072, 2.800623749840809], [2.902763503893509, 4.2131518375751345], [2.491326410875134, 4.577650682955883], [1.9400105931597424, 2.5], [2.0880062589453283, 1.528102887111072], [5.188901974559672, 4.8], [0.8502551367130722, 0.5], [2.502529257484548, 2.6163599366446024], [4.862586711733384, 4.577650682955883], [1.802585055580215, 2.6054612383549913], [999999999999, 1000000000000], [1.974235844442287, 2.5], [3.6724676500173103, 4.361641706471223], [3.232269033100607, 4.579129400641797], [3.232269033100607, 4.016409477413704], [4.2131518375751345, 0.5], [2.6702456228971103, 2.5], [5.379360395952477, 3.6724676500173103], [3.6942938709602657, 3.315493434137359], [1.6141425564518155, 5.544111628815752], [0.5, 2.6163599366446024], [2.5, 6.256758684348407], [3.232269033100607, 5.631658366081931], [4.910950854987185, 7.04710869277477], [2.6702456228971103, 1.4909857068122419], [1.0508042106584865, 0.5], [0.33636486737458804, 0.5], [4.2833724450533825, 4.512760196950995], [2.4015224002109283, 3.4317007071978676], [6.1423927104422855, 4.30918028054133], [1.3470152550051346, 1.3470152550051346], [1.528102887111072, 2.2649401818410433], [0.8502551367130722, 4.577650682955883], [0.3137198020642086, 0.5], [0.33636486737458804, 3.038849187066821], [2.5, 4.206007575725365], [4.577650682955883, 0.44475025198075785], [5.544111628815752, 5.544111628815752], [2.926505105970933, 4.30918028054133], [2.2649401818410433, 2.7249479696078422], [3.1440798686211, 4.643217137707291], [0.24900631443838703, 0.5511696162230015], [1000000000000, 1000000000001]]
results = [200, 50, 8, 1000000000000000000000000, 0.25, 12.0, 1.25, 2.4, 23.04, 1.25, 15.514891358882913, 5.662350454602608, 1.6776397898989335, 9.140679251478147, 1.413972531041112, 1.8362338250086552, 6.25, 1.251264628742274, 13.487018640423665, 2.154590140270665, 10.447563102341134, 6.262652684566163, 18.56903469020626, 6.003806000527321, 1.2119212961175423, 1.5066753520574458, 13.928429978841528, 0.7189696144062332, 17.052064730235998, 999999999998000000000001, 4.035356391129539, 6.270636164157376, 9.833658788702559, 1.2119212961175423, 20.954885775166463, 11.444126707389708, 2.7983520568866633, 7.425341437069902, 0.22237512599037892, 8.887808563955984, 6.955631274244734, 20.25204952002606, 15.983777249280775, 0.11074562109127245, 0.542922193635956, 13.344967204238483, 0.09534482788930398, 11.527307521012455, 1.4375524669410955, 6.171844149790968, 9.396875678537796, 4.291978563036444, 21.966041925858015, 12.922519933264777, 14.091795790450197, 15.00838312170011, 19.60358413924311, 11.74229205613525, 0.628480474704046, 16.566382123239432, 23.890576504012714, 24.39211845103119, 4.021355981805915, 4.279641237843577, 12.229783390474973, 11.404422046208586, 4.850026482899356, 3.190688392600345, 24.906729477886422, 0.4251275683565361, 6.547517289563536, 22.259223381898526, 4.696565491152228, 999999999999000000000000, 4.935589611105717, 16.017988067981864, 14.800978160255024, 12.982115978096108, 2.1065759187875672, 6.675614057242775, 19.755527031919783, 12.24840707294265, 8.948986517790898, 1.3081799683223012, 15.641896710871016, 18.20303494168859, 34.60800445996988, 3.981298057417543, 0.5254021053292433, 0.16818243368729402, 19.32983267875357, 8.241306119155363, 26.46867754317871, 1.8144500972165478, 3.4610616310051747, 3.8921710072613425, 0.1568599010321043, 1.022162103779106, 10.515018939313412, 2.0359112947245173, 30.737173752770055, 12.610838093553461, 6.171844149790968, 14.59864552830198, 0.13724471476610983, 1000000000001000000000000]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "rectangle_area"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert rectangle_area(10,20)==200', 'assert rectangle_area(10,5)==50', 'assert rectangle_area(4,2)==8']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
