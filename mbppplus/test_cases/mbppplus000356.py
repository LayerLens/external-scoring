import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [['(7, 8, 9)'], ['(1, 2, 3)'], ['(4, 5, 6)'], ['(7, 81, 19)'], ['(1000000, 2000000, 3000000)'], ['(999999, 888888, 777777)'], ['(123456789, 987654321, 1111111111)'], ['(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)'], ['(11, 22, 33, 44, 55, 66, 77, 88, 99, 100)'], ['(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000)'], ['((7, 8, 9)'], ['(7, 8, 9))'], ['(1 , 2   , 3)'], ['(1000000, 2000000, 30000000)'], ['(100)'], ['(1000000000, 2000000000, 3000000000)'], ['(10, 20, 30, 40)'], ['(100, 200, 300, 400, 500, 600)'], ['(1, 2, 3, 4, 5, 6, 7, 8, 9)'], ['(9, 8, 7, 6, 5, 4, 3, 2, 1)'], ['(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000)'], ['(10, 600)'], ['(123456789, 98765411111)'], ['(100, 600)'], ['(10,  600)'], ['(1 , 2, 3)'], ['(1, 3)'], ['(10, 2000000000, 3000000000)'], ['(10000000, 2000000, 30000000)'], ['(1000)'], ['(7, 8, 940)'], ['(1 , 22   , 3)'], ['(10, 20000000000, 3000000000)'], ['((10, 600)'], ['(100, 200, 300, 4000, 500, 600)'], ['(1000000000, 20000000, 3000000000)'], ['(100000000, 2000000, 30000000)'], ['(7, 8, 9 ))'], ['(100000000, 20000000, 300030000)'], ['(1  , 22   , 3)'], ['(10, 20000000000, 300000000)'], ['(10, 2000002000, 3000000000)'], ['(10, 200000000000, 300000000)'], ['(10, 200000000000, 3000000000)'], ['(9999799, 888888, 777777)'], ['(100, 200, 300, 4000, 0500, 600)'], ['(1723456789, 98765411111)'], ['(9999799, 8888888, 77777)'], ['(999999, 888888, 7787777)'], ['(999999, 888888, 97787777)'], ['(10, 2000000000, 30300000000)'], ['(999999, 8787777)'], ['(100, 200, 300, 4000, 000)'], ['(110, 600)'], ['(999999, 8888889, 777777)'], ['(999999, 8888888, 7787777)'], ['(123456789, 998765411111)'], ['(1 , 23, 3)'], ['(10, 6600)'], ['(10,  6000)'], ['(9989999, 888888, 97787777)'], ['(10, 2000000000000, 300000000)'], ['(100000, 3000000000)'], ['(1000, 200000, 5000, 6000, 7000, 08000, 9000, 10000)'], ['(1723456789, 998765411111)'], ['(1234561789, 98765411111)'], ['(1000, 2000, 3000, 4000, 5000, 6000, 70000, 8000, 9000, 10000)'], ['(1, 33)'], ['(9999799, 88888887)'], ['((1  , 22   , 3)'], ['(10 ,  600)'], ['(99899888888, 97787777)'], ['(1   , 22   , 3)'], ['(19000)'], ['(100,  200, 300, 400, 500, 600)'], ['(156789, 998765411111)'], ['(10, 2000000000000, 3000000)'], ['(1 , 3)'], ['(999999, 8888888, 97787777)'], ['(999999, 7787777)'], ['(9999799, 88889888, 77777)'], ['(10000000, 2000000, 300000000)'], ['(100000000, 2000000, 300000000)'], ['(1 , 2    , 3)'], ['(12345617819, 98765411111)'], ['(010, 20, 30, 40)'], ['(999999, 8898888, 777777)'], ['(123456)'], ['(9999799, 8888887)'], ['(9999799, 888898888, 77777)'], ['(999977)'], ['(100000)'], ['(999999, 77877777)'], ['(9999799, 888898888, 777777)'], ['(010, 20, 30, 400)'], ['(7, 8 , 9))'], ['(100010000000, 30000000)'], ['(1723456789, 398765411111)'], ['(110, 600))'], ['(0100000)'], ['(100000000, 2000000000000)'], ['(1, 2, 3, 4, 59, 6, 7, 8, 9)'], ['(100, 2000000000, 3000000000)'], ['(100, 2000, 300, 4000, 500, 600)'], ['(10, 020000000000, 300000000)'], ['(1000000)'], ['(1000800000, 2000000000000)'], ['(1256789, 98765411111)'], ['(1000000000, 2000000, 300000000)'], ['(999999, 778777772000000000000))'], ['(1 , 23 )'], ['(1000, 2000, 30000, 4000, 5000, 6000, 7000, 8000, 9000)'], ['(9899999, 77877777)'], ['(100000000, 200000000, 300030000)'], ['(1823456789, 9987654111811)'], ['(9999799, 88888788, 77777)'], ['(9999799, 88887777)'], ['(12345619789, 98765411111)'], ['(9,  8, 7, 6, 5, 4, 3, 2, 1)'], ['(1000, 2000, 3000, 4000, 5000, 6000, 70000, 8000, 9000, 1000)'], ['(9999799, 8888798888, 77777)']]
results = [(7, 8, 9), (1, 2, 3), (4, 5, 6), (7, 81, 19), (1000000, 2000000, 3000000), (999999, 888888, 777777), (123456789, 987654321, 1111111111), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (11, 22, 33, 44, 55, 66, 77, 88, 99, 100), (1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000), (7, 8, 9), (7, 8, 9), (1, 2, 3), (1000000, 2000000, 30000000), (100,), (1000000000, 2000000000, 3000000000), (10, 20, 30, 40), (100, 200, 300, 400, 500, 600), (1, 2, 3, 4, 5, 6, 7, 8, 9), (9, 8, 7, 6, 5, 4, 3, 2, 1), (1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000), (10, 600), (123456789, 98765411111), (100, 600), (10, 600), (1, 2, 3), (1, 3), (10, 2000000000, 3000000000), (10000000, 2000000, 30000000), (1000,), (7, 8, 940), (1, 22, 3), (10, 20000000000, 3000000000), (10, 600), (100, 200, 300, 4000, 500, 600), (1000000000, 20000000, 3000000000), (100000000, 2000000, 30000000), (7, 8, 9), (100000000, 20000000, 300030000), (1, 22, 3), (10, 20000000000, 300000000), (10, 2000002000, 3000000000), (10, 200000000000, 300000000), (10, 200000000000, 3000000000), (9999799, 888888, 777777), (100, 200, 300, 4000, 500, 600), (1723456789, 98765411111), (9999799, 8888888, 77777), (999999, 888888, 7787777), (999999, 888888, 97787777), (10, 2000000000, 30300000000), (999999, 8787777), (100, 200, 300, 4000, 0), (110, 600), (999999, 8888889, 777777), (999999, 8888888, 7787777), (123456789, 998765411111), (1, 23, 3), (10, 6600), (10, 6000), (9989999, 888888, 97787777), (10, 2000000000000, 300000000), (100000, 3000000000), (1000, 200000, 5000, 6000, 7000, 8000, 9000, 10000), (1723456789, 998765411111), (1234561789, 98765411111), (1000, 2000, 3000, 4000, 5000, 6000, 70000, 8000, 9000, 10000), (1, 33), (9999799, 88888887), (1, 22, 3), (10, 600), (99899888888, 97787777), (1, 22, 3), (19000,), (100, 200, 300, 400, 500, 600), (156789, 998765411111), (10, 2000000000000, 3000000), (1, 3), (999999, 8888888, 97787777), (999999, 7787777), (9999799, 88889888, 77777), (10000000, 2000000, 300000000), (100000000, 2000000, 300000000), (1, 2, 3), (12345617819, 98765411111), (10, 20, 30, 40), (999999, 8898888, 777777), (123456,), (9999799, 8888887), (9999799, 888898888, 77777), (999977,), (100000,), (999999, 77877777), (9999799, 888898888, 777777), (10, 20, 30, 400), (7, 8, 9), (100010000000, 30000000), (1723456789, 398765411111), (110, 600), (100000,), (100000000, 2000000000000), (1, 2, 3, 4, 59, 6, 7, 8, 9), (100, 2000000000, 3000000000), (100, 2000, 300, 4000, 500, 600), (10, 20000000000, 300000000), (1000000,), (1000800000, 2000000000000), (1256789, 98765411111), (1000000000, 2000000, 300000000), (999999, 778777772000000000000), (1, 23), (1000, 2000, 30000, 4000, 5000, 6000, 7000, 8000, 9000), (9899999, 77877777), (100000000, 200000000, 300030000), (1823456789, 9987654111811), (9999799, 88888788, 77777), (9999799, 88887777), (12345619789, 98765411111), (9, 8, 7, 6, 5, 4, 3, 2, 1), (1000, 2000, 3000, 4000, 5000, 6000, 70000, 8000, 9000, 1000), (9999799, 8888798888, 77777)]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "tuple_str_int"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert tuple_str_int("(7, 8, 9)") == (7, 8, 9)', 'assert tuple_str_int("(1, 2, 3)") == (1, 2, 3)', 'assert tuple_str_int("(4, 5, 6)") == (4, 5, 6)', 'assert tuple_str_int("(7, 81, 19)") == (7, 81, 19)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
