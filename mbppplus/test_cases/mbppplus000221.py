import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[(1, 5, 7, 8, 10)], [(2, 6, 8, 9, 11)], [(3, 7, 9, 10, 12)], [(1, 2, -3, 4, 5)], [(0.5, -1.2, 3.7, 0.9)], [(-10, 15, -20, 25, -30)], [(2, 2.5, -3, 1.5, -2)], [()], [(7,)], [(2, 3.5, -1, 2, -0.5)], [(5,)], [(0, 0, 0, 0, 0)], [(0, 0, 0, 0, 0, 0)], [(5, 5)], [(2, 2.5, -3, 1.5, 0, 2.5)], [(1, 2, -3, 4, 5, 4)], [(2, 3.5, -1, 2, -0.5, -0.5)], [(2, 2.5, -3, 1.5, 3.7, 2.5)], [(7, 7)], [(7, 2, 0, 7)], [(0.5, -1.2, 3.7, 0.9, 3.7)], [(1, -3, 4, 5, 4)], [(2, 1, 2.5, -3, 1.5, 3, -2)], [(1, 2, -3, -10, 4, 5, 4)], [(1, 2, -3, -10, -20, 4, 5, 4)], [(2, -1, 2, -0.5, -0.5)], [(0.5, -1.2, 3.7, 3.7, 0.9, 1.5)], [(1, -3, -3, 5, 4)], [(-1.7891388020246002, 0.5, -1.2, 3.7, 0.9)], [(2, -1, -0.5, -0.5, -0.5)], [(2, 5, 2, -0.5, -0.5)], [(2, 2.5, -3, 1.5, 3.7, 2.5, 1.5)], [(0.5, 0.9, -1.2, 0.9, 3.7)], [(1, 2, -10, 4, 5, 4)], [(7, 7, 7)], [(2, 3.5, 3, 2, -0.5)], [(1, -10, -10, 4, 5, 4)], [(2, 2.5, -3, 1.5)], [(2, -1, 2, -0.5, -0.5, -1)], [(3.393222332151918, 2, 3.5, -20, -1, 1, -0.5, -1)], [(-1.7891388020246002, 0.6001249926867311, -1.2, 3.7, 0.9)], [(5, 5, 5)], [(7, -20, 3, 7)], [(0.6637886009017347, -1.1953847540147688, 3.7, 0.9, 3.7)], [(0.5, -1.2, 3.7, 0.9, 3.7, 3.7)], [(-2, 0, 7)], [(1, 2, -3, -10, -19, -20, 4, 5, 4)], [(7, -20, -20, 3, 7)], [(0.5, 0.9, -1.2, 3.7)], [(0, 0, 0, 0, 0, 0, 0)], [(0, 0, 0, 0, 0, 0, 0, 0)], [(0.5, -1.2, 3.7, 0.9, 3.7, -1.2)], [(2, 3.5, -0.5)], [(5, 5, 5, 5)], [(3.393222332151918, 2, 3.5, -20, -1, 1, -0.5, -3, -1)], [(1, -10, -10, 3, 4, 5, 4)], [(2, -1, -0.5, -0.5, -0.5, -1)], [(0.5, 0.9, -1.1953847540147688, -1.2, 0.9, 3.7, 0.5, 0.9)], [(7, -20, 3)], [(5, 6, 7, 7)], [(2, -1, -0.5, -0.5, -0.5, -0.5)], [(-1.0905407746693552, -1.7891388020246002, 0.5, -1.2, 3.7, 2.5)], [(-1.0905407746693552, -1.7891388020246002, 0.5, -1.2, 2.5)], [(-10, 5)], [(1, -3, -3, 5, 4, 4)], [(2, 5, -0.5, -0.5, -0.5)], [(15, 1, 2, -10, 4, 5, 4)], [(5, 1, 6, 2, -3, 4, 5, 4, -3)], [(0.5, 0.9, -1.1953847540147688, -1.2, 0.6637886009017347, 3.7, 3.7, 0.5, 0.9, -1.2, 0.9)], [(1, 2.5, -3, 1.5, 3)], [(2, 2.5, -3, 0.795579078414846)], [(2, 2.5, -3, -2)], [(1, 1, 2, -3, 4, 5, 4, 4)], [(2, -1, -0.5, -0.5, -0.5, -1, -1)], [(0.5, -1.2, 3.7, 0.9, 3.7, -1.2, -1.2)], [(0, -1, 0, 0, 0, 0, 0)], [(7, -20, 3, -20)], [(2, -3, -10, -19, -20, 4, 5, 4)], [(1, 2, -3, -10, 4, 6, 4, -20)], [(7, 7, 7, 7)], [(2.5, -3, 1.5, 3.7, 2.5, 1.5)], [(-10,)], [(7, -19, 3)], [(7, 7, 7, 7, 7)], [(2, 2.5, -3, 1.5, 3.7)], [(2.5, -3, 1.5, 3.7100374284077136, 0.6001249926867311, 2.5, 1.5)], [(7, 8, -20, -20, 3, 7)], [(5, 1, 6, -10, 2, -3, 4, 5, -3)], [(1, 2, -10, -10, 4, 5, 4)], [(-1.7891388020246002, 0.6001249926867311, -1.2, 1.5, 0.9)], [(0.5, -1.2, 3.7, 0.6001249926867311, 3.7, 0.9, 1.5)], [(0.5, 1.5, 0.9, -1.2, 0.9, 3.7)], [(-2.1831604355627974, -1.5121530645391967, 0.6001249926867311, -1.2, 3.7, 0.9)], [(2, 2.5, -3, 1.5, -1.1953847540147688, 2.5)], [(2, 5, 2, -0.5, -0.5, -0.5)], [(0.5, -1.2, 3.7, 3.7)], [(2, 2, -1, -0.5, -0.5, -0.5, -0.4924192336004098)], [(0.37940521647331327, 0.9, -1.2, 0.9, 3.7)], [(2, -1, 2, -0.5)], [(1, 2, -3, 4, 5, 4, 2)], [(8, 5)], [(-29, 1, -3, -30, 4, 1)], [(1, 1.3351074136147694, -3, 1.5, 3)], [(-29, 1, -3, 1)], [(2, -3, -10, -19, -20, 4, 5, 4, 5)], [(2, 2.5, -3, 1.5, 0, -1.2)], [(0, -1, 0, 0, 0, 0)], [(2, 3.5, -1, 2, -0.5, -0.5, -0.5)], [(3.5, -1, 2, -0.5, -0.5, -0.5)], [(-1.7891388020246002, 0.6001249926867311, -1.2, 1.5, 0.9, 1.3351074136147694)], [(2, 2.5, -2)], [(0.6637886009017347, 3.7, 0.9, 3.7)]]
results = [(6, 12, 15, 18), (8, 14, 17, 20), (10, 16, 19, 22), (3, -1, 1, 9), (-0.7, 2.5, 4.6000000000000005), (5, -5, 5, -5), (4.5, -0.5, -1.5, -0.5), (), (), (5.5, 2.5, 1, 1.5), (), (0, 0, 0, 0), (0, 0, 0, 0, 0), (10,), (4.5, -0.5, -1.5, 1.5, 2.5), (3, -1, 1, 9, 9), (5.5, 2.5, 1, 1.5, -1.0), (4.5, -0.5, -1.5, 5.2, 6.2), (14,), (9, 2, 7), (-0.7, 2.5, 4.6000000000000005, 4.6000000000000005), (-2, 1, 9, 9), (3, 3.5, -0.5, -1.5, 4.5, 1), (3, -1, -13, -6, 9, 9), (3, -1, -13, -30, -16, 9, 9), (1, 1, 1.5, -1.0), (-0.7, 2.5, 7.4, 4.6000000000000005, 2.4), (-2, -6, 2, 9), (-1.2891388020246002, -0.7, 2.5, 4.6000000000000005), (1, -1.5, -1.0, -1.0), (7, 7, 1.5, -1.0), (4.5, -0.5, -1.5, 5.2, 6.2, 4.0), (1.4, -0.29999999999999993, -0.29999999999999993, 4.6000000000000005), (3, -8, -6, 9, 9), (14, 14), (5.5, 6.5, 5, 1.5), (-9, -20, -6, 9, 9), (4.5, -0.5, -1.5), (1, 1, 1.5, -1.0, -1.5), (5.393222332151918, 5.5, -16.5, -21, 0, 0.5, -1.5), (-1.189013809337869, -0.5998750073132688, 2.5, 4.6000000000000005), (10, 10), (-13, -17, 10), (-0.5315961531130341, 2.5046152459852316, 4.6000000000000005, 4.6000000000000005), (-0.7, 2.5, 4.6000000000000005, 4.6000000000000005, 7.4), (-2, 7), (3, -1, -13, -29, -39, -16, 9, 9), (-13, -40, -17, 10), (1.4, -0.29999999999999993, 2.5), (0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0), (-0.7, 2.5, 4.6000000000000005, 4.6000000000000005, 2.5), (5.5, 3.0), (10, 10, 10), (5.393222332151918, 5.5, -16.5, -21, 0, 0.5, -3.5, -4), (-9, -20, -7, 7, 9, 9), (1, -1.5, -1.0, -1.0, -1.5), (1.4, -0.2953847540147688, -2.395384754014769, -0.29999999999999993, 4.6000000000000005, 4.2, 1.4), (-13, -17), (11, 13, 14), (1, -1.5, -1.0, -1.0, -1.0), (-2.879679576693955, -1.2891388020246002, -0.7, 2.5, 6.2), (-2.879679576693955, -1.2891388020246002, -0.7, 1.3), (-5,), (-2, -6, 2, 9, 8), (7, 4.5, -1.0, -1.0), (16, 3, -8, -6, 9, 9), (6, 7, 8, -1, 1, 9, 9, 1), (1.4, -0.2953847540147688, -2.395384754014769, -0.5362113990982652, 4.363788600901735, 7.4, 4.2, 1.4, -0.29999999999999993, -0.29999999999999993), (3.5, -0.5, -1.5, 4.5), (4.5, -0.5, -2.204420921585154), (4.5, -0.5, -5), (2, 3, -1, 1, 9, 9, 8), (1, -1.5, -1.0, -1.0, -1.5, -2), (-0.7, 2.5, 4.6000000000000005, 4.6000000000000005, 2.5, -2.4), (-1, -1, 0, 0, 0, 0), (-13, -17, -17), (-1, -13, -29, -39, -16, 9, 9), (3, -1, -13, -6, 10, 10, -16), (14, 14, 14), (-0.5, -1.5, 5.2, 6.2, 4.0), (), (-12, -16), (14, 14, 14, 14), (4.5, -0.5, -1.5, 5.2), (-0.5, -1.5, 5.2100374284077136, 4.310162421094445, 3.100124992686731, 4.0), (15, -12, -40, -17, 10), (6, 7, -4, -8, -1, 1, 9, 2), (3, -8, -20, -6, 9, 9), (-1.189013809337869, -0.5998750073132688, 0.30000000000000004, 2.4), (-0.7, 2.5, 4.300124992686731, 4.300124992686731, 4.6000000000000005, 2.4), (2.0, 2.4, -0.29999999999999993, -0.29999999999999993, 4.6000000000000005), (-3.695313500101994, -0.9120280718524656, -0.5998750073132688, 2.5, 4.6000000000000005), (4.5, -0.5, -1.5, 0.30461524598523115, 1.3046152459852312), (7, 7, 1.5, -1.0, -1.0), (-0.7, 2.5, 7.4), (4, 1, -1.5, -1.0, -1.0, -0.9924192336004098), (1.2794052164733132, -0.29999999999999993, -0.29999999999999993, 4.6000000000000005), (1, 1, 1.5), (3, -1, 1, 9, 9, 6), (13,), (-28, -2, -33, -26, 5), (2.3351074136147694, -1.6648925863852306, -1.5, 4.5), (-28, -2, -2), (-1, -13, -29, -39, -16, 9, 9, 9), (4.5, -0.5, -1.5, 1.5, -1.2), (-1, -1, 0, 0, 0), (5.5, 2.5, 1, 1.5, -1.0, -1.0), (2.5, 1, 1.5, -1.0, -1.0), (-1.189013809337869, -0.5998750073132688, 0.30000000000000004, 2.4, 2.2351074136147693), (4.5, 0.5), (4.363788600901735, 4.6000000000000005, 4.6000000000000005)]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "add_pairwise"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)', 'assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)', 'assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
