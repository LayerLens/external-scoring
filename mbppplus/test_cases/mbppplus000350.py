import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 2, 3, 1, 1, 4, 5, 6]], [[1, 10, 9, 4, 2, 10, 10, 45, 4]], [[12, 10, 9, 45, 2, 10, 10, 45, 10]], [[-1, -2, -3, -1, -1, -4, -5, -6]], [[0, 0, 0, 0, 0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[-5, -5, -5, -5, -5, -5, -5, -5, -5]], [[]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 5]], [[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]], [[-1, -2, -3, -1, -1, -4, 0, -5, -6]], [[1, -2, 3, 4, -5, 6, 7, -8, 9, 10]], [[1, 2, 3, -6, 5, 1, 2, 3, 4, 5]], [[9, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 4]], [[1, 8, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5]], [[1, 8, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5, 4]], [[1, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5, 4]], [[-2, -3, -1, -1, -4, 0, -5, -8, -6]], [[1, 9, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[8, 9, 10, 10, 10, 10, 10, 10, 10, 11]], [[10, 0, 0, 0, 0, 0, 0, 0]], [[1, 8, 2, 3, 1, 5, 0, 2, 3, 4, 5, 4]], [[-5, -4, -5, -5, -5, -5, -5, -5, -5, -5]], [[-5, -4, -5, -5, -5, 0, -5, -5, -4]], [[-5, -4, -5, -5, -5, -5, -5, -5, 5, -5, -5]], [[1, -2, 3, 4, -5, 6, 7, -8, 9, 10, -2, 9]], [[1, 8, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4]], [[1, 2, 3, 4, 1, 5, 1, 3, 4, 5, 4]], [[-2, -3, -1, -1, -4, 0, -5, -8]], [[1, 8, 2, 3, 4, 1, 5, 1, 3, 4, 5, 4]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 4, 5]], [[1, 8, 2, 3, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4, 1, 5]], [[5, 2, 3, 1, 4, 5, 2, 6, 3, 7, 5]], [[9, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10]], [[8, 9, 10, 10, 10, 10, 10, 10, 11]], [[1, 8, 2, 4, 1, 5, 2, 1, 3, 4, 5, 4]], [[9, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10]], [[-1, -2, -3, -1, -1, -5, -6, -1]], [[8, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4, 1]], [[8, 9, 10, 10, -2, 10, 10, 10, 11, 11]], [[-6, 2, 3, 4, 5, 1, 2, 3, 4, 5]], [[8, 10, 10, 10, 9, 10, 10, 10, 11]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6]], [[-1, 3, -3, -1, -1, -4, -5, -6]], [[9, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 6, 10]], [[1, -2, 3, 4, -5, 6, 7, -8, 9, 10, -2, 9, 1]], [[-5, -4, -5, -5, -5, -5, -5, -5, 5, -5, -5, -5]], [[-3, -6, 2, 3, 4, 5, 1, 2, 3, 4, 5]], [[-3, -6, 3, 3, 4, 5, 1, 2, 3, 4, 5]], [[1, 8, 2, 3, 1, 5, 1, 2, 3, 4, 5, 4]], [[-1, -2, -3, -1, 0, -5, -6, -1]], [[-6, 2, 3, 4, 5, 2, 4, 4, 5]], [[-5, -4, -5, -5, -5, -5, -4, -5, 5, -5, -5, -5]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 2]], [[-6, 2, 9, 3, 4, 2, 4, 4, 5]], [[1, 8, 2, 3, 4, 1, 5, 1, 2, 3, 5, 4]], [[-5, -5, -5, -5, -5, -5, -5, -5]], [[-3, -6, 3, 3, 4, 5, 1, 2, 4, 5]], [[5, 2, 3, 1, 4, 5, 7, 6, 7, 2]], [[7, 8, 10, 10, 10, 9, 10, 10, 10, 11, 10, 7]], [[-6, 2, 9, 3, 4, 2, 4, 5]], [[2, 3, 1, 4, 5, 2, 6, 3, 7, 5]], [[-3, -6, 3, 4, 3, 5, 1, 2, 3, 4, 5]], [[1, -2, 3, 4, -5, 6, 7, -8, 9, 10, -2, 9, -5]], [[2, 3, 1, 4, 5, 2, 6, 3, 5]], [[10, 0, 0, 0, 0, 0, 0, 0, 0]], [[8, 9, 10, 10, 10, 10, 11, 10, 11]], [[9, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10]], [[9, 10, 10, -4, 10, 10, 10, 10, 10, 11, 10, 10, 6, 10]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 4, 3]], [[-3, -6, 3, 3, 4, 5, 1, 2, 4, 5, 2, 5, 5]], [[-3, -6, 3, 3, 4, 5, 1, 0, 2, 3, 5]], [[8, 9, 10, 10, 10, 11, 10, 11]], [[1, 8, 2, 3, 4, 1, 5, 1, 3, 5, 4]], [[-1, -2, -3, -1, -1, -4, 6, -5, -6]], [[-6, 2, 9, 3, 4, 2, 5]], [[8, 2, 3, 4, 5, 1, 10, 3, 4, 5]], [[1, 8, 2, 4, 1, 5, 2, 1, 3, 5, 5, 4]], [[1, 8, 2, 3, 1, 5, 1, 2, 3, 4, 5, 4, 5]], [[1, -2, 3, 4, -5, 6, 7, 9, 10, -2, 9]], [[9, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 9, 10, 10]], [[8, 2, 3, 4, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4, 1, 1]], [[-4, -6, 2, 3, 4, 5, 1, 2, 3, 4, 5]], [[10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[8, 10, 10, -2, 10, 10, 10, 11, 11, -2]], [[5, 2, 3, 1, 4, 5, 7, 1, 6, 7, 2]], [[1, 8, 2, 2, 3, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4, 1, 5]], [[1, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[1, 8, 2, 3, 1, 5, 0, 2, 3, 4, -1, 5, 4]], [[1, 8, 2, 3, 1, 5, 1, 2, 3, 4, 5, 4, 3, 4, 1, 5, 5]], [[8, 2, 3, 4, 1, 5, 2, 1, 2, 3, 4, 5, 4, 3, 4, 1, 1, 4]], [[1, 8, 2, 3, 1, 5, 0, 2, 3, -1, 5, 4]], [[1, 2, 3, -6, 5, 1, 2, 3, 4, 4]], [[1, 8, 2, 3, 1, 5, 2, 3, 4, -1, 5, 4]], [[1, 9, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2]], [[1, 8, 2, 4, 1, 5, 2, 3, 4, -1, 5, 4, 4]], [[-1, 3, -3, -1, -2, -4, -5, -6]], [[5, 2, 3, 4, 5, 2, 6, 7, 4, 5]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3, 6, 9]], [[8, 10, 10, 10, 9, 9, 10, 10, 12]], [[5, 2, 3, 4, 5, 2, 6, 7, 4]], [[1, 8, 2, 3, 5, 0, 2, 3, 4, 5, 4]], [[1, -2, 3, 4, -5, 6, 7, 8, 9, 10, -2, 9]], [[5, 2, 4, 1, 4, 5, 2, 6, -5, 7, 5]], [[6, -3, -1, -1, -4, 0, -5, -8, -6]], [[5, 2, 3, 1, 4, 5, 2, 6, 7, 4, 3, 2, 2]], [[-3, -6, 3, 3, 4, 5, 1, 0, 2, 3]], [[1, 8, 2, 2, 3, 4, 1, 5, 1, 3, 5, 4]], [[9, 10, 10, 10, 10, 10, 11, 10, 10, 11, 10, 10, 10, 10, 11]], [[3, -3, -6, 3, 3, 4, 5, 1, 0, 2, 3, 5, 3]]]
results = [21, 71, 78, -21, 0, 55, 10, -5, 0, 28, 15, -21, 25, 9, 19, 21, 28, 23, 23, 15, -29, 55, 38, 10, 23, -9, -9, -4, 25, 23, 15, -23, 23, 28, 23, 28, 30, 38, 23, 30, -17, 23, 36, 9, 38, 55, -16, 36, 25, -4, 6, 6, 23, -17, 8, -4, 28, 17, 23, -5, 6, 28, 45, 17, 28, 6, 25, 21, 10, 38, 30, 32, 28, 6, 6, 38, 23, -15, 17, 33, 23, 23, 33, 30, 23, 5, 21, 27, 28, 23, 22, 22, 23, 23, 22, 9, 22, 55, 22, -18, 27, 55, 39, 27, 23, 41, 20, -21, 28, 6, 23, 30, 6]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "find_sum"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert find_sum([1,2,3,1,1,4,5,6]) == 21', 'assert find_sum([1,10,9,4,2,10,10,45,4]) == 71', 'assert find_sum([12,10,9,45,2,10,10,45,10]) == 78']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
