import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 2], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 5], [[9, 8, 7, 6, 5, 4, 3, 2, 1], 3], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 7], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 3], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], 4], [[-10, 50, 0, -20, 30, -40, 60, -70, 80, -90, 100], 6], [[-10, 50, 0, -20, 30, -40, 60, -70, 80, -90, 100, -70], 3], [[9, 8, 7, 6, 5, 4, 3, 2, 1], 2], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 25], 7], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 100], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], 9], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 7], [[10, 20, 30, 40, 50, 70, 80, 100], 3], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 6], 9], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 11], 7], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 7], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 6], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 11], 8], [[1000, 900, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[1, 3, 5, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 8], [[1, 3, 5, 6, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 6], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 8], [[1, 3, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11], 7], [[1000, 900, 800, 700, 600, 500, 400, 300, 4, 100], 5], [[70, 900, 800, 700, 600, 500, 400, 300, 200, 100], 4], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 9], [[8, 7, 6, 5, 4, 2, 1], 2], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[100, 200, 300, 400, 500, 600, 4, 700, 800, 900, 1000], 5], [[1, 3, 5, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 1], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 6], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400], 9], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 2], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100], 5], [[10, 20, 40, 30, 40, 50, 60, 70, 80, 90, 100], 3], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 199, 100], 9], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400], 10], [[8, 7, 6, 5, 5, 4, 2, 1], 2], [[1000, 800, 700, 600, 500, 400, 300, 4, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 24], 6], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[9, 8, 7, 6, 4, 3, 2, 1], 4], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 7], 2], [[1, 3, 5, 7, 9, 11, 13, 14, 15, 17, 19, 21, 23, 25], 8], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 24, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 25], 7], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701], 4], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 10], [[10, 21, 30, 40, 50, 70, 80, 100], 3], [[1, 3, 5, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 701], 4], [[1, 3, 5, 25, 7, 9, 11, 13, 15, 16, 19, 21, 23, 25], 7], [[1, 3, 5, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 2], [[1000, 900, 90, 800, 700, 600, 500, 400, 300, 199, 701, 99], 4], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 6], 8], [[101, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 5], [[100, 200, 400, 500, 600, 800, 900, 1000], 5], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 5], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 199, 800, 100], 9], [[8, 7, 6, 5, 5, 4, 2, 0], 2], [[100, 200, 300, 400, 500, 599, 700, 800, 900, 1000], 1], [[1, 3, 5, 7, 21, 11, 13, 15, 17, 19, 21, 23, 25, 21], 7], [[1000, 8, 7, 6, 5, 4, 3, 2, 1, 6, 5], 9], [[101, 100, 200, 300, 3, 400, 500, 600, 700, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 25, 7], 7], [[1000, 900, 800, 700, 900, 600, 500, 400, 300, 199, 100], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 7], [[1000, 8, 7, 6, 5, 4, 3, 2, 1, 6], 9], [[101, 100, 200, 300, 3, 400, 500, 600, 700, 800, 40, 1000], 5], [[1, 23, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 8], [[1000, 900, 800, 700, 600, 15, 500, 400, 300, 4, 100, 400], 5], [[1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11, 21], 7], [[8, 7, 6, 5, 4, 2, 1, 8], 2], [[1000, 900, 800, 400, 700, 600, 500, 400, 300, 199, 701, 100, 100], 5], [[1000, 900, 800, 700, 600, 500, 400, 1001, 300, 200, 100], 9], [[1000, 8, 7, 6, 5, 4, 3, 99, 2, 1, 6], 9], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 9], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 3], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 5], [[1, 3, 5, 9, 11, 13, 15, 17, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 9, 900, 13, 15, 17, 19, 21, 19, 25, 25, 7], 7], [[1, 3, 5, 6, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 2], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 4, 7], 4], [[3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 13, 21, 1, 23, 25, 25, 11, 11], 8], [[100, 200, 400, 500, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 22, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[3, 5, 8, 9, 11, 17, 19, 21, 23, 40, 24, 25], 7], [[100, 200, 300, 400, 30, 600, 700, 800, 900, 1000], 4], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400, 900], 10]]
results = [[85, 75, 65], [85, 75], [85, 75, 65, 58, 35], [9, 8, 7], [1000, 900, 800, 700, 600], [25, 23, 21, 19, 17, 15, 13], [100, 90, 80], [1000, 900, 800, 700], [100, 80, 60, 50, 30, 0], [100, 80, 60], [9, 8], [25, 25, 23, 21, 19, 17, 15], [1000, 900, 800, 700], [1000, 900, 800, 700, 600, 500, 400, 300, 200], [1000, 900, 800, 700, 600], [40, 25, 25, 23, 21, 19, 17], [25, 25, 23, 21, 19, 18, 15], [100, 80, 70], [9, 8, 7, 6, 6, 5, 4, 3, 2], [1000, 900, 800, 700], [25, 25, 23, 21, 19, 18, 15], [25, 25, 23, 21, 19, 18, 15], [9, 8, 7, 7], [1000, 900, 800, 800, 700, 600, 500, 400, 300], [40, 25, 25, 23, 21, 19, 17, 15], [25, 25, 23, 21, 19, 18], [25, 25, 23, 21, 19, 18, 15, 13], [1000, 900, 800, 700, 600, 500, 400, 300, 200], [40, 25, 25, 23, 21, 19, 17, 15], [25, 23, 21, 19, 17, 15, 13, 11], [25, 25, 23, 21, 19, 18], [25, 25, 24, 23, 21, 19, 18], [25, 25, 23, 21, 19, 18, 15, 13], [25, 25, 24, 23, 21, 19, 18], [1000, 900, 800, 700, 600], [900, 800, 700, 600], [1000, 900, 800, 700, 600, 500, 400, 300, 200], [8, 7], [40, 40, 25, 25, 23, 21, 19, 17], [1000, 900, 800, 700, 600], [40, 40, 25, 25, 23, 21, 19, 17], [1000], [1000, 900, 800, 701], [25, 23, 21, 19, 17, 15], [900, 800, 700, 600, 500, 500, 400, 400, 300], [25, 25], [1000, 900, 800, 701, 700], [100, 90, 80], [1000, 900, 800, 700, 600, 500, 400, 300, 199], [900, 800, 700, 600, 500, 500, 400, 400, 300, 200], [8, 7], [1000, 800, 700, 600, 500], [25, 24, 23, 21, 19, 18], [900, 800, 800, 700, 600, 500, 400, 300, 200], [9, 8, 7, 6], [9, 8], [25, 23, 21, 19, 17, 15, 14, 13], [1000, 900, 800, 701, 700], [40, 25, 24, 23, 21, 19, 17], [25, 25, 23, 21, 19, 17, 13], [1000, 900, 800, 700], [1000, 900, 800, 701], [900, 800, 800, 700, 600, 500, 400, 300, 200, 100], [100, 80, 70], [40, 40, 25, 25, 23, 21, 19, 17], [1000, 900, 800, 701], [25, 25, 23, 21, 19, 16, 15], [40, 40], [1000, 900, 800, 701], [9, 8, 7, 6, 6, 5, 4, 3], [1000, 900, 800, 700, 600], [1000, 900, 800, 600, 500], [1000, 900, 800, 700, 600], [1000, 900, 800, 800, 700, 600, 500, 400, 300], [8, 7], [1000], [25, 23, 21, 21, 21, 19, 17], [1000, 8, 7, 6, 6, 5, 5, 4, 3], [1000, 900, 800, 700, 600], [40, 25, 24, 23, 21, 19, 17], [25, 25, 23, 21, 19, 17, 15], [1000, 900, 900, 800], [25, 25, 23, 21, 19, 18, 15], [1000, 8, 7, 6, 6, 5, 4, 3, 2], [1000, 800, 700, 600, 500], [25, 25, 23, 23, 21, 19, 18, 15], [1000, 900, 800, 700, 600], [40, 25, 24, 23, 21, 19, 17, 15], [25, 25, 23, 21, 19, 17, 13, 11], [25, 25, 24, 23, 21, 21, 19], [8, 8], [1000, 900, 800, 701, 700], [1001, 1000, 900, 800, 700, 600, 500, 400, 300], [1000, 99, 8, 7, 6, 6, 5, 4, 3], [40, 25, 25, 23, 21, 19, 17, 15, 13], [900, 800, 800], [25, 23, 21, 19, 17], [40, 25, 25, 23, 21, 17, 15, 13], [900, 25, 25, 21, 19, 19, 17], [40, 40], [9, 8, 7, 7], [40, 25, 24, 23, 21, 19, 17, 15], [25, 25, 23, 21, 15, 13, 13, 11], [1000, 900, 800, 500, 400], [40, 25, 25, 23, 22, 21, 19, 17], [40, 25, 25, 23, 21, 19, 17, 15], [40, 25, 24, 23, 21, 19, 17], [1000, 900, 800, 700], [900, 900, 800, 700, 600, 500, 500, 400, 400, 300]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "heap_queue_largest"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]', 'assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]', 'assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
