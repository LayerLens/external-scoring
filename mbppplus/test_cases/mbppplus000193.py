import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[(10, 4, 6, 9), (5, 2, 3, 3)], [(1, 2, 3, 4), (5, 6, 7, 8)], [(8, 9, 11, 12), (7, 13, 14, 17)], [(0, 0, 0, 0), (0, 0, 0, 0)], [(123, 456, 789, 10), (987, 654, 321, 10)], [(-1, -2, -3, -4), (-5, -6, -7, -8)], [(-10, -20, -30, -40), (-5, -2, -3, -3)], [(2, 5, 8, 10), (3, 5, 10, 12)], [(0, 1, 2, 3), (0, 0, 2, 3)], [(1000000, 2000000, 3000000), (500000, 1250000, 2500000)], [(99999, 88888, 77777), (12345, 54321, 98765)], [(0, 1), (1, 0)], [(), ()], [(0, -1, 2, -3), (0, 0, -2, -3)], [(-10, 0, 20, -30), (5, -2, 10, 3)], [(0, 0, 0, 0), (-1, -1, -1, -1)], [(10, 20, 30, 40), (0, 0, 5, 5)], [(1000, 10000, 100000, 1000000), (-10000, 10000, -100000, -1000000)], [(1000, 10000, 100000, 1000000), (-10000, 10000, 12, -1000000)], [(0, -1, 2, -3), (0, -1, 2, -3)], [(-10000, 10000, 12, -1000000), (-10000, 10000, 12, -1000000)], [(99999, 88888, 77777), (99999, 88888, 77777)], [(-6, 0, 2, 3), (-6, 0, 2, 3)], [(0, -1, 2, 40), (0, -1, 2, -3)], [(0, -1, 2, -4, -3), (0, -1, 2, -2, 40)], [(-10000, 10000, 12, -1000000), (-10000, 9999, 12, -1000000)], [(88888, 77777, 88888), (99999, 88888, 20)], [(99999, 88888, 77777, 99999), (99999, 88888, 77777, 99999)], [(0, 0, 2, 3, 2, 3), (0, 0, 2, 3, 2, 3)], [(9999, -10000, 9999, 12, -1000000), (9999, -10000, 9999, 12, -1000000)], [(2, 5, 8, 10), (2, 5, 8, 10)], [(-5, -2, -3, -3), (-5, -2, -3, -3)], [(1000, 10000, -100000, 1000000), (-10000, 10000, 12, -1000000)], [(499999, 1250000, 2500000), (500000, 1250000, 2500000)], [(1000, 10000, -100000, 1000000), (-9999, 10000, 12, -1000000)], [(-10000, 9999, 12, -1000000), (-10000, 9999, 12, -1000000)], [(-10, 0, 20, -30, -30), (-10, 0, 20, -30, 321)], [(0, -1, 2, -3), (77777, 0, -2, -3)], [(-9999, 10000, 12, -1000000), (-9999, 10000, 12, -1000000)], [(-10, 0, 20, -30, -30), (-10, 0, 20, -30, -30)], [(0, -1, 2, -3, -1), (0, -1, 2, -3, -1)], [(0, 0, -1, 0), (0, 0, 0, 0)], [(-10000, 10000, -100000, -1000000), (1000, 10000, 100000, 1000000)], [(500000, 1250000, 1250001, 2500000, 1250000), (500000, 1250000, 1250001, 2500000, 1250000)], [(-5, -6, -7, -8), (-5, -6, -7, -8)], [(0, -1, 2, -2, 40), (0, -1, 2, -2, 40)], [(-5, -6, -7, -8), (-1, -2, -3, -20)], [(-10000, 9999, 12, 3000000), (-10000, 9999, 12, -1000000)], [(0, 1, 2, 3), (0, 1, 2, 3)], [(0, 0, 2, 3), (0, 1, 2, 3)], [(-10, -20, -30, -40), (-10, -20, -30, -40)], [(0, -1, 98765, 40, 3), (0, -1, 98765, 40, 40)], [(99999, 88888, 99999), (99999, 88888, 99999)], [(-10000, 9999, 12, -1000000, 9999), (-10000, 9999, 12, -1000000, 12)], [(-8, 1, 2, 3), (0, 1, 2, 3)], [(-5, -2, -3, -3), (-5, -2, 1250001, -3)], [(1, -1, 2, 40), (0, -1, 2, -3)], [(0, 0, 2, 3), (0, 0, 2, 3)], [(False,), (False,)], [(2, 8, 10), (2, 8, 10)], [(-10000, -1, 2, -3), (0, -1, 2, -3)], [(100000, 10000, 12, -1000000), (-10000, 9999, 12, -1000000)], [(0, 1, 2, 789), (0, 1, 2, 3)], [(123, 456, 789, 10), (123, 456, 789, 10)], [(-10000, -10000, 12, -1000000), (-10000, 9999, 12, -1000000)], [(-10000, 10000, 12, -1000000), (-10000, 10000, 12, -1000001)], [(12345, 54321, 98765), (12345, 54321, 98765)], [(88888, 77777, 88888), (88888, 77777, 88888)], [(0, -1, 2, 40, -1), (0, -1, 2, 40, -1)], [(-5, -2, 20, -3), (-5, -2, -3, -3)], [(99999, 88888, 654, 99999), (99999, 88888, 654, 99999)], [(-10, -20, -30, -40), (-5, -3, 10000, -3)], [(3, 5, 10, 12), (3, 5, 10, 12)], [(10, 20, 30, 40), (0, 1, 5, 5)], [(10, 20, 30, 40), (10, 20, 30, 40)], [(0, -1, 987, 40, 3), (0, -1, 98765, 40, 3)], [(-5, -2, -3, -2), (-5, -2, 1250001, -3)], [(0, 0, 0), (0, 0, 0)], [(88888, 77777, 88889, 88888), (88888, 77777, 88889, 88889)], [(2, 5, 8, 20), (3, 5, 10, 12)], [(-5, -6, -7, -7, -8), (-5, -6, -7, -7, -8)], [(1000, 10000, 100000, 1000000), (-10000, 9999, -100000, -1000000)], [(1000, 10000, -1000000, 1000000), (-10000, 9999, -100000, -1000000)], [(12345, 54321, 98765, 54321), (987, 12345, 54321, 98765)], [(3, 5, 99999, 12), (3, 5, 10, 12)], [(2, 7, 10), (2, 8, 10)], [(-10, 0, 20, -30), (-10, 0, 20, -30)], [(0, 0, 5, 5), (0, 0, 5, 5)], [(-10, 20, -30, -30), (-10, 20, -30, -30)], [(-5, -1, -3, -2), (-6, -2, 1250001, -3)], [(True,), (False,)], [(-5, -2, -3, -1), (-5, -2, 1250001, -3)], [(-10000, -1000000, 10000, 12, -1000000), (-10000, 10000, 12, -1000000, 10000)], [(1, 0, 20, -30), (5, -2, 10, 3)], [(0, -40, 2, 3), (0, 1, 2, 3)], [(-1, -2, -3, -20), (-5, -6, -7, -8)], [(123, -10, 790, 10), (123, 456, 790, 10)], [(499999, 1250000, 2500000), (499999, 1250000, 2500000)], [(-5, 20, -3), (-2, -3, -3)], [(-9999, 10000, 12, 8), (-9999, 10000, 12, -1000000)], [(99999, 88888, 20), (99999, 88888, 20)], [(0, 0, -1, 1), (0, 0, -1, 1)], [(99999, 88888, 1000, 77777), (99999, 88888, 1000, 77777)], [(-6, 0, 2, 3), (-6, 1, 2, 3)], [(0, 0, 5, 5, 5), (0, 0, 5, 5, 5)], [(-10, 3, -30, -40), (-5, -3, 10000, -3)], [(-10000, 9999, 12, -1000000), (-10000, 9999, 12, 3000000)], [(3, 10, 12), (3, 10, 12)], [(10, 0, 2, 3), (0, 0, 2, 3)], [(1000000, 2000000, 456), (1000000, 2000000, 2999999)], [(-5, -2, -3, -3), (-5, -2, -20, -3)], [(499999, 1250000, 2500000, 499999), (499999, 1250000, 2500000, 499999)], [(-5, -6, -7, -8, -5), (-5, -6, -7, -8, -5)], [(3, 5, 99999, 12), (4, 5, 99999, 12)], [(-10000, 9999, 12, -1000000, 9999), (-40, 9999, 12, -1000000, 12)], [(-5, -6, -7, -8), (-2, -2, -3, -20)]]
results = [(0, 0, 2, 1), (1, 2, 3, 0), (0, 9, 10, 0), (0, 0, 0, 0), (91, 136, 257, 10), (-5, -6, -7, -8), (-14, -20, -32, -40), (2, 5, 8, 8), (0, 0, 2, 3), (458752, 1179776, 2360448), (25, 20528, 65985), (0, 0), (), (0, 0, 2, -3), (4, 0, 0, 2), (0, 0, 0, 0), (0, 0, 4, 0), (224, 10000, 32, 64), (224, 10000, 0, 64), (0, -1, 2, -3), (-10000, 10000, 12, -1000000), (99999, 88888, 77777), (-6, 0, 2, 3), (0, -1, 2, 40), (0, -1, 2, -4, 40), (-10000, 9984, 12, -1000000), (66072, 68368, 16), (99999, 88888, 77777, 99999), (0, 0, 2, 3, 2, 3), (9999, -10000, 9999, 12, -1000000), (2, 5, 8, 10), (-5, -2, -3, -3), (224, 10000, 0, 64), (499968, 1250000, 2500000), (224, 10000, 0, 64), (-10000, 9999, 12, -1000000), (-10, 0, 20, -30, 320), (0, 0, 2, -3), (-9999, 10000, 12, -1000000), (-10, 0, 20, -30, -30), (0, -1, 2, -3, -1), (0, 0, 0, 0), (224, 10000, 32, 64), (500000, 1250000, 1250001, 2500000, 1250000), (-5, -6, -7, -8), (0, -1, 2, -2, 40), (-5, -6, -7, -24), (-10000, 9999, 12, 2131136), (0, 1, 2, 3), (0, 0, 2, 3), (-10, -20, -30, -40), (0, -1, 98765, 40, 0), (99999, 88888, 99999), (-10000, 9999, 12, -1000000, 12), (0, 1, 2, 3), (-5, -2, 1250001, -3), (0, -1, 2, 40), (0, 0, 2, 3), (False,), (2, 8, 10), (0, -1, 2, -3), (98464, 9984, 12, -1000000), (0, 1, 2, 1), (123, 456, 789, 10), (-10000, 0, 12, -1000000), (-10000, 10000, 12, -1000064), (12345, 54321, 98765), (88888, 77777, 88888), (0, -1, 2, 40, -1), (-5, -2, 20, -3), (99999, 88888, 654, 99999), (-14, -20, 9984, -40), (3, 5, 10, 12), (0, 0, 4, 0), (10, 20, 30, 40), (0, -1, 457, 40, 3), (-5, -2, 1250001, -4), (0, 0, 0), (88888, 77777, 88889, 88888), (2, 5, 8, 4), (-5, -6, -7, -7, -8), (224, 9984, 32, 64), (224, 9984, -1033920, 64), (25, 4145, 32769, 32769), (3, 5, 10, 12), (2, 0, 10), (-10, 0, 20, -30), (0, 0, 5, 5), (-10, 20, -30, -30), (-6, -2, 1250001, -4), (False,), (-5, -2, 1250001, -3), (-10000, 9472, 0, 0, 9472), (1, 0, 0, 2), (0, 0, 2, 3), (-5, -6, -7, -24), (123, 448, 790, 10), (499999, 1250000, 2500000), (-6, 20, -3), (-9999, 10000, 12, 0), (99999, 88888, 20), (0, 0, -1, 1), (99999, 88888, 1000, 77777), (-6, 0, 2, 3), (0, 0, 5, 5, 5), (-14, 1, 9984, -40), (-10000, 9999, 12, 2131136), (3, 10, 12), (0, 0, 2, 3), (1000000, 2000000, 136), (-5, -2, -20, -3), (499999, 1250000, 2500000, 499999), (-5, -6, -7, -8, -5), (0, 5, 99999, 12), (-10032, 9999, 12, -1000000, 12), (-6, -6, -7, -24)]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "and_tuples"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)', 'assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)', 'assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
