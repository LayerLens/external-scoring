import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[(1, 5, 7, 8, 10)], [(2, 4, 5, 6, 7)], [(12, 13, 14, 9, 15)], [(12,)], [(1, 2, 3, 4, 5, 6)], [(0.5, 0.25, 0.125, 0.0625)], [(10, 100, 1000, 10000)], [(-1, -2, -3, -4, -5)], [(1, -2, 3, -4, 5)], [()], [(0.5, 0.25, 0.125, 0.5, 0.0625)], [(10, 1, 1000, 10000)], [(2, 3, 4, 5, 6)], [(2, 3, 100, 5, 6)], [(-1, -2, -3, 6, -5)], [(1, -2, 1000, 5, -4, 5)], [(3, 3, 4, 5, 6)], [(0.25, 0.09658093675455971, 0.5, 0.0625)], [(10, 1, 1000)], [(3, -4, 3, 4, 5, 6)], [(2, 3, 3, 5, 6)], [(0.25, 0.125, 0.5, 0.0625, 0.5)], [(0, 2, 3, 4, 5, 6, 3)], [(-1, -2, -3, 6)], [(-2, 3, 5, 5)], [(1, -1, -2, -3, -4, -5)], [(-1, -2, -3, 6, -5, -2)], [(9, 10, 1, 1000)], [(0.25, 0.09658093675455971, 0.5, 0.5, 0.0625)], [(0, -2, -3)], [(1, -2, 3, -4)], [(0.25, 0.125, 0.5, 0.0625, 0.5, 0.5, 0.5)], [(-2, 3, 5)], [(1, 10, 1, -5, 1000, -5)], [(10, 1, 10000, 1000)], [(-2, 3, 5, 3, -2)], [(-1, -2, -3, 6, -1, -5, -2)], [(22,)], [(0, 2, 3, 4, 5, 6, 3, 4)], [(0, 2, 3, 4, 5, 7, 6, 3)], [(0.09658093675455971, 0.5, 0.09658093675455971, 15.165237122536439, 79.3038013402577, 0.25, 69.10512450034832)], [(0.09658093675455971, 0.5, 0.125, 0.09658093675455971, 15.165237122536439, 79.3038013402577, 0.25, 69.10512450034832)], [(-1, -3, 6)], [(-1, -2, -3, 6, -2)], [(21, 22)], [(1, 3, 100, 5, 7, 6)], [(0.25, 0.5, 0.0625, 0.5, 0.5, 0.8942957050187041, 0.5)], [(0, -4, -2, -3)], [(0.25, 0.125, 0.5, 0.0625, 0.5, 0.0625)], [(0.5, 0.25, 0.125, 0.5, 0.0625, 0.25)], [(21, 22, 22, 21)], [(-1, 0, 7, 6, -1)], [(-2, 3, 4, 5)], [(-1, -2, -3, 6, -5, -3)], [(1, 10, -6, 1, -5, 1000, -5)], [(1, -2, 3, 1, -4, 5, 5)], [(0, 2, 3, 4, 5, 6, 4)], [(2, 3, 100, -2, 5, 6)], [(2, 3, 3, 5, 6, 5)], [(1, -5, 3, 4, 5, 6)], [(2, 3, 3, 5, 6, 5, 3)], [(-1, -3, 2, 6)], [(0, -2, -3, -2)], [(1, -2, 1000, 5, 6, -4, 5, 6)], [(-1, -2, -1, -3, 6)], [(0.09150698236271086, 0.5, 0.09658093675455971, 15.165237122536439, 79.3038013402577, 0.25, 0.0625)], [(0.8109212936994514, 0.5, 0.25, 0.8490361128540658, 0.5, 0.0625)], [(0, 2, 3, 4, 5, 7, 6, 3, 5)], [(0, 2, 3, 4, 5, 7, 6, 3, 3)], [(10, 100, 10000)], [(-1, -2, 5, 7, 6, -2)], [(1, -1, -2, -3, -4, -5, -1)], [(1, 10, -6, 1000, -5)], [(0.09658093675455971, 0.5, 0.09658093675455971, 15.165237122536439, 79.3038013402577, 0.25, 69.10512450034832, 0.09658093675455971)], [(1, 2, -2, 3, 4, 5, 6)], [(2, 3, 4, 5)], [(2, -2, 1000, 5, 6, -4, 5, 6)], [(0, 2, 3, 4, 5, 6, 3, 4, 3)], [(1, -1, -2, -3, -5, -1)], [(0.25, 0.125, 0.125, 0.0625, 0.5, 0.25)], [(0, 7, -1, 0)], [(1, 10, -6, 2, -5, 1000, -5)], [(3, 4, 5)], [(0.5, 0.125, 0.5, 0.0625)], [(-2, 2, 3, 3, 5, 6)], [(2, 3, 4, 5, 2)], [(2, 3, 4, 21, 6)], [(-1, -3, -6, -1)], [(0, -2, -3, -2, 0)], [(1, -1, -2, -3, -4, -1)], [(0.25, 0.5, 0.0625, 0.5, 0.5, 0.8942957050187041, 0.5, 0.5)], [(-1, 10, -2, -3, 6, -2)], [(10, 1, 10, 1000)], [(-4, 1, 1000, 10000)], [(0.5, 0.25, 0.125, 0.5, 0.0625, 79.3038013402577, 0.25)], [(False, False, True, True, False, True, False, False, True, False)], [(10, -6, 2, -5, 1000, -5)], [(1, 1000, 7)], [(0.8109212936994514, 0.5, 0.25, 0.125, 0.8109212936994514, 0.5, 0.0625)], [(0.09658093675455971, 79.3038013402577, 0.09658093675455971, 15.165237122536439, 79.3038013402577, 0.25, 69.10512450034832, 0.09658093675455971)], [(10, -6, 2, -5, 5, -5)], [(1, 1000, 5, -4, 5)], [(-1, -2, -3, -6, 0)], [(-1, -3, 6, -5, -3)], [(10, 100, 9, 1000, 10000, 100)], [(-1, -2, -2, 6, -2)], [(-2, -2, -3, 6)], [(0.5, 0.25, 0.5, 0.0625)], [(-1, 0, 6, 7, 6, -1)], [(1, -3, 1000, 5, 6, -4, 5, 6)]]
results = [(5, 35, 56, 80), (8, 20, 30, 42), (156, 182, 126, 135), (), (2, 6, 12, 20, 30), (0.125, 0.03125, 0.0078125), (1000, 100000, 10000000), (2, 6, 12, 20), (-2, -6, -12, -20), (), (0.125, 0.03125, 0.0625, 0.03125), (10, 1000, 10000000), (6, 12, 20, 30), (6, 300, 500, 30), (2, 6, -18, -30), (-2, -2000, 5000, -20, -20), (9, 12, 20, 30), (0.024145234188639928, 0.048290468377279856, 0.03125), (10, 1000), (-12, -12, 12, 20, 30), (6, 9, 15, 30), (0.03125, 0.0625, 0.03125, 0.03125), (0, 6, 12, 20, 30, 18), (2, 6, -18), (-6, 15, 25), (-1, 2, 6, 12, 20), (2, 6, -18, -30, 10), (90, 10, 1000), (0.024145234188639928, 0.048290468377279856, 0.25, 0.03125), (0, 6), (-2, -6, -12), (0.03125, 0.0625, 0.03125, 0.03125, 0.25, 0.25), (-6, 15), (10, 10, -5, -5000, -5000), (10, 10000, 10000000), (-6, 15, 15, -6), (2, 6, -18, -6, 5, 10), (), (0, 6, 12, 20, 30, 18, 12), (0, 6, 12, 20, 35, 42, 18), (0.048290468377279856, 0.048290468377279856, 1.464672807399593, 1202.660952043531, 19.825950335064427, 17.27628112508708), (0.048290468377279856, 0.0625, 0.012072617094319964, 1.464672807399593, 1202.660952043531, 19.825950335064427, 17.27628112508708), (3, -18), (2, 6, -18, -12), (462,), (3, 300, 500, 35, 42), (0.125, 0.03125, 0.03125, 0.25, 0.4471478525093521, 0.4471478525093521), (0, 8, 6), (0.03125, 0.0625, 0.03125, 0.03125, 0.03125), (0.125, 0.03125, 0.0625, 0.03125, 0.015625), (462, 484, 462), (0, 0, 42, -6), (-6, 12, 20), (2, 6, -18, -30, 15), (10, -60, -6, -5, -5000, -5000), (-2, -6, 3, -4, -20, 25), (0, 6, 12, 20, 30, 24), (6, 300, -200, -10, 30), (6, 9, 15, 30, 30), (-5, -15, 12, 20, 30), (6, 9, 15, 30, 30, 15), (3, -6, 12), (0, 6, 6), (-2, -2000, 5000, 30, -24, -20, 30), (2, 2, 3, -18), (0.04575349118135543, 0.048290468377279856, 1.464672807399593, 1202.660952043531, 19.825950335064427, 0.015625), (0.4054606468497257, 0.125, 0.21225902821351644, 0.4245180564270329, 0.03125), (0, 6, 12, 20, 35, 42, 18, 15), (0, 6, 12, 20, 35, 42, 18, 9), (1000, 1000000), (2, -10, 35, 42, -12), (-1, 2, 6, 12, 20, 5), (10, -60, -6000, -5000), (0.048290468377279856, 0.048290468377279856, 1.464672807399593, 1202.660952043531, 19.825950335064427, 17.27628112508708, 6.674237658784117), (2, -4, -6, 12, 20, 30), (6, 12, 20), (-4, -2000, 5000, 30, -24, -20, 30), (0, 6, 12, 20, 30, 18, 12, 12), (-1, 2, 6, 15, 5), (0.03125, 0.015625, 0.0078125, 0.03125, 0.125), (0, -7, 0), (10, -60, -12, -10, -5000, -5000), (12, 20), (0.0625, 0.0625, 0.03125), (-4, 6, 9, 15, 30), (6, 12, 20, 10), (6, 12, 84, 126), (3, 18, 6), (0, 6, 6, 0), (-1, 2, 6, 12, 4), (0.125, 0.03125, 0.03125, 0.25, 0.4471478525093521, 0.4471478525093521, 0.25), (-10, -20, 6, -18, -12), (10, 10, 10000), (-4, 1000, 10000000), (0.125, 0.03125, 0.0625, 0.03125, 4.956487583766107, 19.825950335064427), (0, 0, 1, 0, 0, 0, 0, 0, 0), (-60, -12, -10, -5000, -5000), (1000, 7000), (0.4054606468497257, 0.125, 0.03125, 0.10136516171243143, 0.4054606468497257, 0.03125), (7.659235421639598, 7.659235421639598, 1.464672807399593, 1202.660952043531, 19.825950335064427, 17.27628112508708, 6.674237658784117), (-60, -12, -10, -25, -25), (1000, 5000, -20, -20), (2, 6, 18, 0), (3, -18, -30, 15), (1000, 900, 9000, 10000000, 1000000), (2, 4, -12, -12), (4, 6, -18), (0.125, 0.125, 0.03125), (0, 0, 42, 42, -6), (-3, -3000, 5000, 30, -24, -20, 30)]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "multiply_elements"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)', 'assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)', 'assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)', 'assert multiply_elements((12,)) == ()']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
