import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[(1, 5, 7, (4, 6), 10)], [(2, 9, (5, 7), 11)], [(11, 15, 5, 8, (2, 3), 8)], [(1, 2, 3, (4, 5), 6, 7)], [(1, 2, (3, 4), (5, [6, 7]), 8, ([9, 10], 11))], [(1, (2, [3, [4, [5, [6, 7]]]]), 8, (9, 10))], [(([1, 2], [3, 4], [5, 6]), 7, ([8, 9], [10, [11, [12, [13, 14]]]]))], [(1, 2, 3, (4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]))], [(([[[1, 2], 3], 4], [5, 6]), 7)], [(([[[[1, 2], [3, 4]], 5], [6, 7]], 8), (9, 10))], [(([[[[[[[1, 2], 3], 4], [5, 6]], 7], 8], 9], 10), (11, 12), 13)], [(([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14), 15)], [(1, 2, 3, 4, 5, 6)], [((1, 2), ([3, 4], [5, [6, [7, [8, 9]]]]))], [(([[1, 2], 3], [4, 5]), ([[6, 7], 8], [9, [10, [11, [12, [13, [14, [15, [16, 17]]]]]]]]))], [((1, [2, [3, [4, 5]]]), (6, [7, [8, [9, 10]]]), (11, [12, [13, 14]]), ([[15, 16], [17, 18]], [19, 20]))], [(1, 2, 3, ([[4]],), 5)], [(1, ([2],), ([3], [4, [5]]), 6)], [(([1], [2]), ([3], [4]), ([5], [6]), ([7], [8]))], [(([1], [[2]]), ([[3]],))], [((1, [2, 3], [4, 5], [6, [7, 8, [9, 10]]]), ([11, 12, 13], [14, 15, 16, [17]]), (18, [19], [[20], [21, 22, 23]]), (24, [25]))], [((1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,))], [(([[[[[]]]]],),)], [('a', ('b', ['c', ['d', ['e', ['f', ['g', ['h', ['i', ['j', ['k', ['l', ['m', ['n', ['o', ['p', ['q', ['r', ['s', ['t', ['u', ['v', ['w', ['x', ['y', ['z']]]]]]]]]]]]]]]]]]]]]]]]))], [(([1, 2], [3, 4], [5, 6]), 7, ([8, 9], [10, [11, [12, [13, 14]]]]), ([1, 2], [3, 4], [5, 6]))], [(2, 1, 2, 3, (4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]), (4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]))], [(([[[1, 2], 3], 4], [5, 6]), 7, ([[[1, 2], 3], 4], [5, 6]))], [(1, (13, 2, [3, [4, [5, [6, 7]]]]), (9, 10), (13, 2, [3, [4, [5, [6, 7]]]]))], [(1, (13, 2, [3, [4, [5, [6, 7]]]]), (9, 10), (13, 2, [3, [4, [5, [6, 7]]]]), (13, 2, [3, [4, [5, [6, 7]]]]))], [((1, [2, 3], [4, 5], [6, [7, 8, [9, 10]]]), ([11, 12, 13], [14, 15, 16, [17]]), (18, [19], [[20], [21, 22, 23]]), (24, [25]), ([11, 12, 13], [14, 15, 16, [17]]))], [(([16, 1], [2]), ([3], [4]), ([5], [6]), ([7], [8]))], [((1, [2, [3, [4, 5]]]), (6, [7, [8, [9, 10]]]), ([[15, 16], [17, 18]], [19, 20]))], [(15,)], [(([1, 2], [3, 4], [5, 6]), 7, ([3, 4], [5, 6]), ([10, [11, [12, [13, 14]]]],))], [(([[[1, 2], 3], 4], [5, 6]), 7, ([[[1, 2], 3], 4], [5, 6]), ([[[1, 2], 3], 4], [5, 6]))], [(7, ([[[1, 2], 3], 4], [5, 6]), ([[[1, 2], 3], 4], [5, 6]))], [(7, 8, ([[[1, 2], 3], 4], [5, 6]), ([[[1, 2], 3], 4], [5, 6]))], [(([16, 1], [2]), ([6],), ([7], [8]))], [(([11, 12, 13], [14, 15, 16, [17]]), (18, [19], [[20], [21, 22, 23]]), (24, [25]), ([11, 12, 13], [14, 15, 16, [17]]))], [(([[[1, 2], 3], 4], [5, 6, 5]), 7)], [(([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14), 15, ([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14))], [('a', (['c', ['d', ['e', ['f', ['g', ['h', ['i', ['j', ['k', ['l', ['m', ['n', ['o', ['p', ['q', ['r', ['s', ['t', ['u', ['v', ['w', ['x', ['y', ['z']]]]]]]]]]]]]]]]]]]]]]]],))], [((1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (1,))], [(1, (13, 2, [3, [4, [5, [6, 7]]]]), (9, 10), (13, 2, [3, [4, [5, [6, 7]]]]), (13, 2, [3, [4, [5, [6, 7]]]]), (2, [3, [4, [5, [6, 7]]]]))], [(([1, 2], [3, 4], [5, 6]), 6)], [(1, (2, [3, [4, [5, [6, 7]]]]), 8, (9, 10), 8)], [(2, ([[[1, 2], 3], 4], [5, 6]), 7, ([[[1, 2], 3], 4], [5, 6]))], [((),)], [(([[[1, 2], 3], 4], [5, 6, 5]), 7, ([[[1, 2], 3], 4], [5, 6, 5]))], [(15, 15)], [((1, [2, 3], [4, 5], [6, [7, 8, [9, 10]]]), ([11, 12, 13], [14, 15, 16, [17]]), (18, [19], [[20], [21, 22, 23]]), (18, [19]), (24, [25]), ([11, 12, 13], [14, 15, 16, [17]]))], [(1, 12, (3, 4), (5, [6, 7]), ([9, 10], 11))], [(1, (2, [3, [4, [5, [6, 7]]]], 2), 8, (9, 10), 8)], [(7, 8, ([[[1, 2], 3], 4], [5, 6]), ([[[1, 2], 3], 4], [5, 6]), ([[[1, 2], 3], 4], [5, 6]))], [(([1, 2], [3, 4], [5, 6]), 7, ([1, 2], [3, 4], [5, 6, 6]), ([8, 9], [10, [11, [12, [13, 14]]]]), ([8, 9], [10, [11, [12, [13, 14]]]]))], [(7, ([[[1, 2], 3], 4], [5, 6]), 2, ([[[1, 2], 3], 4], [5, 6]))], [((1, [2, [3, [4, 5]]]), (6, [7, [8, [9, 10]]]))], [(([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14, 14), ([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14), 15, ([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14))], [(([16, 1], [2]), ([16, 1, 1], [2]), ([6],), ([7], [8]))], [((1,), (2,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (1,))], [((), ())], [(([1], [[2]]),)], [(([1, 2], [3, 4], [5, 6]), 7, ([3, 4], [5, 6]), 24, ([10, [11, [12, [13, 14]]]],))], [(1, 1, 2, 3, (4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]))], [(1, 1, 2, 3, (4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]), 3)], [(([1], []), ([5], [6]), ([7], [8]))], [(([1, 2], [3, 4], [5, 6]), 6, ([3, 4], [5, 6]), ([10, [11, [12, [13, 14]]]],))], [('a', 'aa', (['c', ['d', ['e', ['f', ['g', ['h', ['i', ['j', ['k', ['l', ['m', ['n', ['o', ['p', ['q', ['r', ['s', ['t', ['u', ['v', ['w', ['x', ['y', ['z']]]]]]]]]]]]]]]]]]]]]]]],))], [(([[[1, 2], 3], 4], [5, 6]), 25, 7, 7)], [(7, ([8, 9], [10, [11, [12, [13, 14]]]]), ([1, 2], [3, 4], [5, 6]), ([1, 2], [3, 4], [5, 6]))], [(([[[1, 2], 3], 4], [5, 6, 5]), 6)], [(15, 15, 15)], [(([[[1, 2], 3], 4], [5, 6, 5]), 7, ([[[1, 2], 3]], [[[1, 2], 3], 4], [5, 6, 5]))], [(([1, 2], [3, 4], [5, 6]), 7, ([3, 4], [5, 6]), 24, ([10, [11, [12, [13, 14]]]],), (), ([1, 2], [3, 4], [5, 6]))], [(([1], [], []), ([1], []), ([[3]],))], [(([1], []), ([7], [8]))], [(([[[1, 2], 3], 4],), ([[[1, 2], 3], 4], [5, 6]), 6, ([[[1, 2], 3], 4], [5, 6]))], [(1, (13, 2, [3, [4, [5, [6, 7]]]]), (9, 10), (13, 2, [3, [4, [5, [6, 7]]]]), (9, 10))], [(([[[1, 2], 3], 4], [5, 6], [[[1, 2], 3], 4]),)], [(7, ([8, 9], [10, [11, [12, [13, 14]]]]), ([1, 2], [3, 4], [5, 6]), ([1, 2], [3, 4], [4, 6], [5, 6]), ([1, 2], [3, 4], [5, 6]))], [(1, (13, 2, [3, [4, [5, [6, 7]]]]), (9, 10), (13, 2, [3, [4, [5, [6, 7]]]]), (2, [3, [4, [5, [6, 7]]]]))], [(1, (2, [3, [4, [5, [6, 7]]]]), 8, (10, 9, 10), 8)], [(1, 1, 1, 3, (4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]), 3)], [(([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14, 14), ([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14), 3, 15, ([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14), 15)], [(1, 2, 2, 3, (4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]))], [(([[[[[[[1, 2], 3], 4], [5, 6]], 7], 8], 9], 10), (12, 12), 13)], [(1, 1, 2, 3, (4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]), 2, 3, (4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]))], [(([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14, 14), 15, ([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14))], [(8, ([[[1, 2], 3], 4], [5, 6]), ([[[1, 2], 3], 4], [5, 6]))], [(1, (13, 2, [3, [4, [5, [6, 7]]]], [3, [4, [5, [6, 7]]]]), (13, 2, [3, [4, [5, [6, 7]]]]), (9, 10), (13, 2, [3, [4, [5, [6, 7]]]]), (2, [3, [4, [5, [6, 7]]]]))], [(([[[[[], []]]]], [[[[[]]]]]),)], [(([[[[[]]]], [[[[]]]]],), ([[[[[]]]]],))], [(([1], []),)], [(8, 1, (2, [3, [4, [5, [6, 7]]]], 2), 8, (9, 10), 8, 1)], [((1, [2, 3], [4, 5], [6, [7, 8, [9, 10]]]), ([11, 12, 13], [14, 15, 16, [17]]), (18, [19], [[20], [21, 22, 23]]), (24, [25], [25]), (24, [25]))], [(([11, 12, 13], [14, 15, 16, [17]]), (18, [19], [[20], [21, 22, 23]]), (24, [26, 25]), ([11, 12, 13], [14, 15, 16, [17]]))], [(([[[1, 2], 3], 4], [5, 7, 5]), 6)], [(15, 15, 15, 15)], [(15, 15, 15, 18)], [(7, 8, ([[[1, 2], 3], 4], [5, 6]), ([5, 9], [[[1, 2], 3], 4], [5, 6]))], [(([1], []), ([5], [6]), ([7], [8]), ([7],))], [(7, ([[[1, 2], 3], 4], [5, 6]))], [(([[[[[]]]], [[[[]]]]],), ([[[[[]]]], [[[[]]]]],))], [(([1], []), ([1], [[2]]))], [(([16, 1],), ([16, 1, 1], [2]), ([6],), ([7], [8]))], [(([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14, 14), ([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13],), 3, 15, ([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, 14), 15)], [((1, [4, 5], [6, [7, 8, [9, 10]]]), (1, [2, 3], [4, 5], [6, [7, 8, [9, 10]]]), ([11, 12, 13], [14, 15, 16, [17]]), (18, [19]), (24, [25]), ([11, 12, 13], [14, 15, 16, [17]]))], [(([1, 2], [3, 4], [5, 6]), 6, 19, ([3, 4], [5, 6]), ([10, [11, [12, [13, 14]]]],))], [(7, ([[[1, 2], 3], 4], [5, 6]), 2, ([[[1, 2], 3], 4], [5, 6]), 7)], [(([[[[[]]]], [[[[]]]]],), ())], [(1, 2, 3, ([[4]],))], [(1, 2, (3, 4), (5, [6, 7]), ([9, 10], 11))], [(([1, 2], [3, 4], [5, 6], [1, 2]), 7, ([8, 9], [10, [11, [12, [13, 14]]]]))], [(([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14, [[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13]), ([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14), 15, ([[[[[[[1, 2], [3, [[[4, 5], 6], 7]]], 8], 9], [10, 11]], 12], 13], 14))], [(([1], [1, 1], [[2]]), ([[3]],))], [((1, [2, [3, [4, 5]], [3, [4, 5]]]), (6, [7, [8, [9, 10]]]))], [(2, 13, 3, (4, [5, 6, [7, 8, [9, 10, [11, 12, [13, 14]]]]]))], [(True, True, False, False)], [(8, ([[[1, 2], 3], 4], [5, 6]), 7, ([[[1, 2], 3], 4], [5, 6]))], [((), (-55.31819741812587, -80.16469052312337, 40.47580807039117, -33.01552653406965, 21.97711941774041, 63.723553557234595))], [(([[[], [[[]]]]],), ([[[[[]]]]],))], [(1, 2, (3, 3, 4), (5, [6, 7]), ([9, 10], 11))], [(7, ([[[1, 2], 3], 4], [5, 6]), 7)], [(([1], [], []), ([7], [8]))]]
results = [3, 2, 4, 3, 2, 1, 0, 3, 0, 0, 0, 0, 5, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 1, 0, 4, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 2, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 4, 0, 4, 0, 4, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 3, 3, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 2, 0, 0, 0, 0, 3, 3, 1, 0, 0, 2, 1, 0]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "count_first_elements"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3', 'assert count_first_elements((2, 9, (5, 7), 11) ) == 2', 'assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
