import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]], [[[2, 7, 6], [9, 5, 1], [4, 3, 8]]], [[[2, 7, 6], [9, 5, 1], [4, 3, 7]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5]]], [[[-2, 7, 6], [9, -5, 1], [4, 3, -7]]], [[[4, 19, -3], [12, 7, 1], [0, 9, -16]]], [[[1, 2, 3], [4, 5, 6]]], [[[4, 19, -3], [0, 9, -16]]], [[[7, 12, 1, 14], [2, 13, 8, 11]]], [[[7, 1, 14], [7, 1, 14]]], [[[7, 1, 14]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [2, 13, 8, 11]]], [[[7, 12, 1, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[4, 19, -3], [12, 7, 1], [-16, 9, -16], [12, 7, 1]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[-2, 7, 6], [9, -5, 1]]], [[[1, 2, 3], [4, 5, 6], [4, 5, 6]]], [[[4, 19, -3], [12, 7, 1], [0, 9, -16], [12, 7, 1]]], [[[11, 12, 1, 14], [11, 12, 1, 14], [11, 12, 1, 14], [11, 12, 1, 14], [11, 12, 1, 14]]], [[[4, 19, -3], [12, 7, 1], [12, 7, 1]]], [[[4, 5, 6]]], [[[-2, 7, 6], [9, -5, 1], [4, 3, -7], [9, -5, 1]]], [[[0, 9, -16], [4, 19, -3], [12, 7, 1], [0, 9, -16]]], [[[0, 9, -16], [4, 19, -3], [12, 7, 1], [0, 9, -16], [0, 9, -16]]], [[[9, -5, 1], [4, 3, -7]]], [[[7, 12, 1, 2, 14], [7, 12, 1, 2, 14]]], [[[7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12]]], [[[7, 1, 14, 1], [7, 1, 14, 1]]], [[[7, 12, 1, 2], [7, 12, 1, 2]]], [[[7, 14]]], [[[12, 7, -3], [4, 19, -3], [12, 7, -3], [0, 9, -16], [12, 7, -3]]], [[[12, 7, -3], [4, 19, -3], [12, 7, -3], [12, 7, -3]]], [[[9, -5, 1, 9]]], [[[7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12]]], [[[1, 14], [1, 14], [1, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 1, 14, 1]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [2, 13, 8, 11], [7, 12, 1, 14]]], [[[0, 9, -16], [4, 19, -3], [12, 7, 1]]], [[[2, 8, 11, 2], [2, 8, 11, 2], [2, 8, 11, 2]]], [[[7, 14, 14]]], [[[7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12]]], [[[7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6]]], [[[0, 9, -16], [4, 19, -3], [0, 9, -16], [0, 9, -16]]], [[[7, 12, 1, 14], [16, 3, 10, 5], [2, 13, 8, 11]]], [[[7, 12, 16], [7, 12, 16], [7, 12, 16], [7, 12, 16]]], [[[7, 7], [7, 7]]], [[[7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13]]], [[[9, -5, 1], [4, 3, -6]]], [[[7, 12, 1, 2, 14]]], [[[12, 8, 7, 1], [12, 8, 7, 1]]], [[[7, -5, 14], [7, -5, 14], [7, -5, 14], [7, -5, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13]]], [[[8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14]]], [[[7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12]]], [[[4, 19, -16], [12, 7, 1]]], [[[4, 19, -3], [12, 7, 1], [0, 9, -16], [0, 9, -16]]], [[[7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15]]], [[[6, 4, 5, 6]]], [[[7, 7, 7], [7, 7, 7], [7, 7, 7]]], [[[-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12]]], [[[7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12]]], [[[7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12]]], [[[7, 12, 1, 2], [7, 12, 1, 2], [7, 12, 1, 2]]], [[[-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7]]], [[[14], [14], [14]]], [[[7, 12, 1, 1, 14], [7, 12, 1, 1, 14], [7, 12, 1, 1, 14], [7, 12, 1, 1, 14]]], [[[6, 12, 1, 14], [16, 3, 10, 5], [2, 13, 8, 11]]], [[[7, 1, 1, 14], [7, 1, 1, 14], [7, 1, 1, 14], [7, 1, 1, 14]]], [[[-2, 7, 6]]], [[[-5, 13, 8, 11], [7, 12, 1, 14], [-5, 13, 8, 11], [16, 3, 10, 5]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [2, 13, 8, 11]]], [[[7, 12, 1, 2, 14], [7, 12, 1, 2, 14], [7, 12, 1, 2, 14], [7, 12, 1, 2, 14]]], [[[1, -16, 3], [4, 5, 6], [4, 5, 6]]], [[[7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12]]], [[[7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6]]], [[[7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2]]], [[[7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12]]], [[[7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12]]], [[[7, 15, 1, 2, 14], [7, 15, 1, 2, 14], [7, 15, 1, 2, 14]]], [[[12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15]]], [[[7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13]]], [[[7, 12, 1, 14], [14, 13, 8, 11], [16, 3, 10, 5], [14, 13, 8, 11]]], [[[7, 14, 14], [7, 14, 14]]], [[[7, 12, 1, 14, 14], [7, 12, 1, 14, 14]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [2, 13, 8, 11], [2, 13, 8, 11]]], [[[6, 12, 1, 1, 14], [6, 12, 1, 1, 14], [6, 12, 1, 1, 14], [6, 12, 1, 1, 14], [6, 12, 1, 1, 14]]], [[[7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12]]], [[[7, 12, 1], [7, 12, 1], [7, 12, 1], [7, 12, 1], [7, 12, 1]]], [[[12, 7, -3], [4, 19, -3], [12, 7, -3], [12, 7, -3], [12, 7, -3]]], [[[7, 12, 1, 14], [16, 3, 10, 5], [14, 13, 8, 11]]], [[[7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11]]], [[[2, 8, 2], [2, 8, 2], [2, 8, 2], [2, 8, 2]]], [[[7, 15, 1, 2, 14], [7, 15, 1, 2, 14]]], [[[7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12]]], [[[7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7]]], [[[7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12]]], [[[7, 12, 1, 14, 14]]], [[[7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13]]], [[[7, 12, 1, 10, 14]]], [[[6, 1, 1, 14], [6, 1, 1, 14], [6, 1, 1, 14], [6, 1, 1, 14]]], [[[7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12]]]]
results = [True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "magic_square_test"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
