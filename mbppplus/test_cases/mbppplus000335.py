import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]], [[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]], [[[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]], [[['john']]], [[]], [[[]]], [[[1, 2], [2, 3], [1, 2], [1, 2, 3], [2, 3], [1, 2]]], [[['green', 'orange'], [1, 2], ['green', 'orange'], [1, 2, 3]]], [[['cat', 'dog'], ['cat'], ['cat', 'dog'], ['cat', 'dog'], ['cat', 'dog', 'rabbit'], ['rabbit']]], [[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['h', 'i', 'j', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a']]], [[['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana', 'cherry'], ['apple', 'pear']]], [[[1, 2], [2, 1, 3], [1, 2], [2, 3], [1, 2, 3]]], [[[1, 2], [3, 4, 5], [6, 7], [8, 9, 10], [6, 7], [1, 2]]], [[['a', 'b'], ['c'], ['d'], ['e'], ['c'], ['a', 'b']]], [[[1, 2, 3, 4], [5, 6, 7], [1, 2, 3, 4], [8, 9, 10], [1, 2, 3, 4], [5, 6, 7]]], [[['x', 'y'], ['z', 'w'], ['x', 'y'], ['z', 'w'], ['x', 'y']]], [[[], []]], [[['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'cherry'], ['apae', 'bganana', 'cherry'], ['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apae', 'bganana', 'cherry']]], [[['x', 'y'], ['z', 'w'], ['x', 'y'], ['z', 'w'], ['x', 'y'], ['z', 'w']]], [[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['h', 'i', 'j', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['h', 'i', 'j', 'k']]], [[[1, 2, 4], [5, 6, 7], [1, 2, 3, 4], [8, 9, 10], [1, 2, 3, 4], [5, 6, 7]]], [[[True, True, True, False]]], [[['apple', 'banana', 'cherry'], ['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'cherry'], ['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apae', 'bganana', 'cherry']]], [[['a', 'bapae', 'b'], ['c'], ['d'], ['e'], ['c'], ['a', 'b']]], [[['a', 'b'], ['c'], ['d'], ['e'], ['c'], ['a', 'b'], ['c']]], [[['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'cherry', 'apae'], ['apae', 'bganana', 'cherry', 'apae'], ['apae', 'bganana', 'cherry', 'apae'], ['apple', 'pear'], ['apae', 'bganana', 'cherry', 'apae'], ['apple', 'banana', 'cherry']]], [[['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'cherry', 'apae', 'apae'], ['apae', 'bganana', 'cherry', 'apae', 'apae'], ['apae', 'bganana', 'cherry', 'apae', 'apae'], ['apple', 'pear'], ['apae', 'bganana', 'cherry', 'apae', 'apae'], ['apae', 'bganana', 'cherry', 'apae', 'apae'], ['apple', 'banana', 'cherry']]], [[[1, 2], ['green', 'orange'], [1, 2, 3]]], [[[3, 3], [1, 2], [2, 3], [1, 2], [1, 2, 3], [3, 3], [1, 2]]], [[[22.633521147116923, 41.08183937180155, -95.716703243959], [22.633521147116923, 41.08183937180155, -95.716703243959]]], [[['b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b'], ['h', 'i', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['h', 'i', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a']]], [[['a', 'b'], ['c'], ['d'], ['e'], ['c'], ['a', 'b'], ['d']]], [[[1, 2], [2, 1, 3], [2, 3], [1, 2, 3]]], [[['x', 'y'], ['z', 'wf'], ['x', 'y'], ['z', 'w'], ['x', 'y']]], [[[], ['x', 'y'], ['z', 'w'], ['x', 'y'], ['z', 'w']]], [[[5, 1, 2], [2, 1, 3], [5, 1, 2], [2, 3], [1, 2, 3]]], [[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['g', 'f', 'e', 'd', 'c', 'b', 'a', 'g'], ['a', 'b'], ['a', 'b'], ['h', 'i', 'j', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a', 'g'], ['h', 'i', 'j', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a', 'g']]], [[[10, 60, 50.03460044856237], [], []]], [[[5, 1], [2, 1, 3], [5, 1], [2, 3], [1, 2, 3]]], [[['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banadna', 'cherry'], ['apple', 'pear']]], [[[1, 2], [3], [3], [1, 2], [1, 2, 3], [2, 3], [1, 2]]], [[['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'cherry', 'apae'], ['apae', 'bganana', 'cherry', 'apae'], ['apae', 'bganana', 'cherry', 'apae'], ['apple', 'pear'], ['apple', 'banana', 'cherry']]], [[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['g', 'f', 'e', 'd', 'c', 'b', 'a', 'g'], ['a', 'b'], ['a', 'b'], ['h', 'i', 'j', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a', 'g'], ['h', 'i', 'j', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a', 'g'], ['g', 'f', 'e', 'd', 'c', 'b', 'a']]], [[['x', 'y'], ['z', 'w'], ['x', 'y'], ['z', 'w'], ['a', 'y'], ['a', 'y'], ['z', 'w'], ['z', 'w']]], [[['a', 'bapae', 'b'], ['c'], ['d'], ['e'], ['c'], ['a', 'b'], ['c']]], [[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['h', 'i', 'wf', 'j', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['h', 'i', 'wf', 'j', 'k']]], [[['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana', 'apple'], ['apple', 'pear'], ['apple', 'banana', 'apple'], ['apple', 'banana', 'cherry'], ['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'pear']]], [[[1, 2, 3, 4], [5, 10, 6, 7], [1, 2, 3, 4], [8, 9, 10], [1, 2, 3, 4], [5, 10, 6, 7], [5, 6, 7]]], [[[], ['x', 'y'], ['z', 'w'], ['z', 'w']]], [[['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'cherry', 'apae', 'apae'], ['apae', 'bganana', 'cherry', 'apae', 'apae'], ['apae', 'bganana', 'cherry', 'apae', 'apae'], ['apple', 'pear'], ['apae', 'bganana', 'cherry', 'apae', 'apae'], ['apae', 'bganana', 'cherry', 'apae', 'apae'], ['apple', 'banana', 'cherry'], ['apple', 'pear']]], [[[5, 1, 6, 2], [5, 1, 6, 2], [5, 1, 6, 2], [2, 3], [1, 2, 3]]], [[['a', 'b'], ['c'], ['wf'], ['d'], ['e'], ['wf'], ['a', 'b'], ['wf']]], [[[True, True, True, True, False], [True, True, True, True, False], [True, True, True, True, False]]], [[['x', 'xx', 'y'], ['z', 'wf'], ['x'], ['z', 'w'], ['x', 'xx', 'y'], ['x', 'y']]], [[[2, 4], [5, 1], [2, 1, 3], [5, 1], [2, 4], [1, 2, 3]]], [[['a', 'b'], ['c'], ['wf', 'wf'], ['d'], ['e'], ['wf', 'wf'], ['a', 'b'], ['wf', 'wf']]], [[[1, 2], [], [], [1, 2], [1, 2, 3], [2, 3], [1, 2]]], [[['x', 'w', 'xx', 'y'], ['z', 'wf'], ['g', 'x'], ['k', 'z', 'w'], ['x', 'w', 'xx', 'y'], ['x', 'w', 'xx', 'y'], ['x', 'y']]], [[[10, 60, 50.03460044856237], []]], [[['x', 'xx', 'y'], ['z', 'wf'], ['x'], ['z', 'w'], ['x', 'xx', 'y'], ['x', 'y'], ['x', 'y']]], [[[5, 1], [2, 1, 3], [5, 1], [5, 2, 3], [1, 2, 3]]], [[['z', 'wf'], ['x'], ['z', 'w'], ['x', 'xx', 'y'], ['x', 'y'], ['x', 'y']]], [[['apple', 'banana', 'cherry'], ['apple', 'banana', 'cherry'], ['bananaa', 'apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'cherry'], ['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apae', 'bganana', 'cherry'], ['apple', 'pear']]], [[['a', 'b'], ['c'], ['dd', 'd'], ['e'], ['c'], ['ak', 'b'], ['dd', 'd']]], [[[], ['x', 'y'], ['z', 'w'], ['z', 'w'], []]], [[[10, 60, 50.03460044856237], [], [8, 8, 3, -40, 48], [], []]], [[['z', 'wf', 'z'], ['x', 'w', 'xx', 'y'], ['z', 'wf', 'z'], ['g', 'x'], ['k', 'z', 'w'], ['x', 'w', 'xx', 'y'], ['x', 'w', 'xx', 'y'], ['x', 'y']]], [[['a', 'b'], ['wf', 'a', 'a'], ['c'], ['wf', 'a', 'a'], ['d'], ['e'], ['wf', 'a', 'a'], ['a', 'b'], ['wf', 'a', 'a'], ['wf', 'a', 'a'], ['e']]], [[['a', 'b'], ['c'], ['wf', 'wf'], ['d'], ['e'], ['wf', 'wf'], ['a', 'b'], ['wf', 'wf'], ['wf', 'wf']]], [[[True, True, True, False, True, False], [True, True, True, False, True, False], [True, True, True, False, True, False], [True, True, True, False, True, False]]], [[['x', 'ww', 'xx', 'y'], ['z', 'wf'], ['g', 'x'], ['k', 'z', 'w'], ['x', 'ww', 'xx', 'y'], ['x', 'ww', 'xx', 'y'], ['x', 'y'], ['x', 'y']]], [[['a', 'b'], ['c'], ['wf', 'wf'], ['d'], ['e'], ['wf', 'wf'], ['a', 'b'], ['wf', 'wf'], ['wf', 'wf'], ['wf', 'wf']]], [[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['g', 'f', 'e', 'd', 'c', 'b', 'a']]], [[['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana', 'apple'], ['apple', 'pear'], ['apple', 'banana', 'apple'], ['apple', 'banana', 'cherry'], ['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'pear'], ['apple', 'pear']]], [[[22.633521147116923, 41.08183937180155, -95.716703243959, -95.716703243959, -95.716703243959], [22.633521147116923, 41.08183937180155, -95.716703243959, -95.716703243959, -95.716703243959], [22.633521147116923, 41.08183937180155, -95.716703243959, -95.716703243959, -95.716703243959], [22.633521147116923, 41.08183937180155, -95.716703243959, -95.716703243959, -95.716703243959], [22.633521147116923, 41.08183937180155, -95.716703243959, -95.716703243959, -95.716703243959]]], [[['a', 'b'], ['c'], ['d'], ['e'], ['f', 'c'], ['a', 'b']]], [[[5, 1, 2], [2, 1, 3], [5, 1, 2], [2, 3], [1, 2, 3], [2, 3]]], [[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['g', 'f', 'e', 'd', 'c', 'b', 'a', 'e'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['h', 'i', 'j', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b']]], [[['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'pear'], ['apae', 'bganana', 'cherry'], ['apae', 'bganana', 'cherry'], ['apple', 'banana', 'cherry', 'apple'], ['apple', 'pear'], ['apae', 'bganana', 'cherry'], ['apple', 'banana', 'cherry', 'apple']]], [[[5, 1, 2], [2, 1, 3], [5, 1, 2], [2, 3], [1, 2, 3], [2, 1, 3]]], [[[1, 2, 1], [3], [3], [1, 2], [1, 2, 3], [2, 3], [1, 2]]], [[[5, 1], [2, 1, 3], [5, 1], [1, 2, 3]]], [[['c'], ['wf', 'wf'], ['d'], ['e'], ['wf', 'wf'], ['a', 'j', 'b'], ['wf', 'wf'], ['wf', 'wf']]], [[[1, 2], [2, 1, 3], [2], [1, 2, 3]]], [[['apple', 'banana', 'cherry'], ['apple', 'adpple', 'pear'], ['apple', 'adpple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'cherry'], ['apae', 'bganana', 'cherry'], ['apple', 'banana', 'ae', 'cherry'], ['apple', 'pear'], ['apae', 'bganana', 'cherry']]], [[['z', 'wf'], ['x'], ['z', 'w'], ['x', 'xx', 'y'], ['ww', 'x', 'y']]], [[['a', 'b'], ['c'], ['x', 'wf', 'wf'], ['d'], ['e'], ['x', 'wf', 'wf'], ['a', 'b'], ['x', 'wf', 'wf'], ['x', 'wf', 'wf'], ['x', 'wf', 'wf'], ['x', 'wf', 'wf']]], [[['x', 'y'], ['z', 'wf'], ['z', 'w']]], [[['b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b'], ['i', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['i', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a']]], [[['z', 'i', 'w'], ['x', 'xx', 'y'], ['z', 'wf'], ['x'], ['z', 'i', 'w'], ['x', 'xx', 'y'], ['x', 'y']]], [[['x', 'xx', 'y'], ['z', 'wf'], ['x'], ['w'], ['x', 'xx', 'y'], ['x', 'y'], ['x', 'y'], ['x'], ['x']]], [[['a', 'b'], ['c'], [], ['d'], [], ['c'], ['a', 'b']]], [[[3, 60], [1, 2], [3, 60], [2, 3], [1, 2], [1, 2, 3], [3, 60], [1, 2]]], [[[], ['x', 'y'], ['zz', 'z', 'w'], ['x', 'y'], ['zz', 'z', 'w']]], [[['apple', 'banana', 'cherry'], ['apple', 'banana', 'cherry'], ['bananaa', 'apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'cherry'], ['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apae', 'bganana', 'cherry'], ['apple', 'pear'], ['apae', 'bganana', 'cherry']]], [[['a', 'b'], ['c'], ['d'], ['e'], ['c'], ['a', 'b'], ['a', 'b']]], [[[1, 6, 2], [1, 6, 2], [1, 6, 2], [2, 3], [1, 2, 3], [1, 6, 2], [2, 3]]], [[['x', 'y'], ['z', 'w'], ['', 'y'], ['', 'y'], ['z', 'w'], ['y'], ['y'], ['y'], ['z', 'w'], ['z', 'w'], ['y']]], [[[1, 10, 3, 4], [5, 10, 6, 7, 5], [1, 2, 3, 4], [8, 9, 10], [1, 2, 3, 4], [5, 10, 6, 7, 5], [5, 6, 7], [5, 10, 6, 7, 5]]], [[['x', 'y', 'y'], ['z', 'wf'], ['z', 'w'], ['x', 'y']]], [[['b', 'c', 'd', 'e', 'f', 'y'], ['b', 'c', 'd', 'e', 'f', 'y'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['i', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b']]], [[['x', 'xx', 'y'], ['z', 'wf'], ['w'], ['x', 'xx', 'y'], ['x', 'y'], ['x', 'y'], [], [], []]], [[['b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['h', 'i', 'j', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a']]], [[['j', 'z', 'wf'], ['x'], ['z', 'w'], ['x', 'xx', 'y'], ['x', 'y'], ['x', 'y']]], [[['dd', 'd', 'dd'], ['a', 'b'], ['c'], ['dd', 'd', 'dd'], ['e'], ['c'], ['ak', 'b'], ['dd', 'd', 'dd']]], [[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['g', 'f', 'e', 'd', 'c', 'b', 'a', 'e'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b']]], [[['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'pear', 'cherry'], ['apae', 'bganana', 'pear', 'cherry'], ['apple', 'banana', 'cherry'], ['apae', 'bganana', 'pear', 'cherry']]], [[[6, 2], [6, 2], [6, 2], [2, 3], [1, 2, 3], [6, 2], [2, 3]]], [[['a', 'b'], ['c'], ['d'], ['e'], ['f', 'c'], ['a', 'b'], ['e']]], [[['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['a', 'b'], ['a', 'b'], ['g', 'f', 'e', 'd', 'c', 'b', 'a', 'c'], ['h', 'i', 'wf', 'j', 'k'], ['g', 'f', 'e', 'd', 'c', 'b', 'a'], ['h', 'i', 'wf', 'j', 'k']]], [[['x', 'w', 'xx', 'y'], ['z', 'wf'], ['g', 'x'], ['k', 'z', 'w'], ['x', 'w', 'xx', 'y'], ['x', 'w', 'xx', 'y'], ['x', 'y'], ['x', 'w', 'xx', 'y']]], [[['apple', 'banana', 'cherry'], ['apple', 'pear'], ['apple', 'banana'], ['apple', 'banana'], ['apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'pear', 'cherry'], ['apae', 'bganana', 'pear', 'cherry'], ['apple', 'banana', 'cherry'], ['apae', 'bganana', 'pear', 'cherry']]], [[[5, 1, 2], [2, 1, 3], [5, 1, 2], [2, 10], [1, 3], [1, 3], [2, 10], [2, 10]]], [[['x', 'y', 'y'], ['z', 'w'], ['x', 'y']]], [[['apple', 'banana', 'cherry'], ['apple', 'adpple', 'pear'], ['apple', 'adpple', 'pear'], ['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'pear'], ['apae', 'bganana', 'cherry'], ['apae', 'bganana', 'cherry'], ['apple', 'banana', 'ae', 'cherry'], ['apple', 'pear'], ['apae', 'bganana', 'cherry'], ['apple', 'pear']]], [[['x', 'y'], ['z', 'w'], ['x', 'y'], ['z', 'w'], ['a', 'y'], ['a', 'y'], ['z', 'w'], ['z', 'w'], ['x', 'y']]]]
results = [{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}, {('green', 'orange'): 2, ('black',): 1, ('white',): 1}, {(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}, {('john',): 1}, {}, {(): 1}, {(1, 2): 3, (2, 3): 2, (1, 2, 3): 1}, {('green', 'orange'): 2, (1, 2): 1, (1, 2, 3): 1}, {('cat', 'dog'): 3, ('cat',): 1, ('cat', 'dog', 'rabbit'): 1, ('rabbit',): 1}, {('a', 'b', 'c', 'd', 'e', 'f', 'g'): 1, ('a', 'b'): 3, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 3, ('h', 'i', 'j', 'k'): 1}, {('apple', 'banana', 'cherry'): 4, ('apple', 'pear'): 3, ('apple', 'banana'): 1}, {(1, 2): 2, (2, 1, 3): 1, (2, 3): 1, (1, 2, 3): 1}, {(1, 2): 2, (3, 4, 5): 1, (6, 7): 2, (8, 9, 10): 1}, {('a', 'b'): 2, ('c',): 2, ('d',): 1, ('e',): 1}, {(1, 2, 3, 4): 3, (5, 6, 7): 2, (8, 9, 10): 1}, {('x', 'y'): 3, ('z', 'w'): 2}, {(): 2}, {('apple', 'banana', 'cherry'): 3, ('apple', 'pear'): 3, ('apple', 'banana'): 1, ('apae', 'bganana', 'cherry'): 3}, {('x', 'y'): 3, ('z', 'w'): 3}, {('a', 'b', 'c', 'd', 'e', 'f', 'g'): 1, ('a', 'b'): 3, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 3, ('h', 'i', 'j', 'k'): 2}, {(1, 2, 4): 1, (5, 6, 7): 2, (1, 2, 3, 4): 2, (8, 9, 10): 1}, {(True, True, True, False): 1}, {('apple', 'banana', 'cherry'): 3, ('apple', 'banana'): 1, ('apple', 'pear'): 2, ('apae', 'bganana', 'cherry'): 2}, {('a', 'bapae', 'b'): 1, ('c',): 2, ('d',): 1, ('e',): 1, ('a', 'b'): 1}, {('a', 'b'): 2, ('c',): 3, ('d',): 1, ('e',): 1}, {('apple', 'banana', 'cherry'): 3, ('apple', 'pear'): 3, ('apple', 'banana'): 1, ('apae', 'bganana', 'cherry', 'apae'): 4}, {('apple', 'banana', 'cherry'): 3, ('apple', 'pear'): 3, ('apple', 'banana'): 1, ('apae', 'bganana', 'cherry', 'apae', 'apae'): 5}, {(1, 2): 1, ('green', 'orange'): 1, (1, 2, 3): 1}, {(3, 3): 2, (1, 2): 3, (2, 3): 1, (1, 2, 3): 1}, {(22.633521147116923, 41.08183937180155, -95.716703243959): 2}, {('b', 'c', 'd', 'e', 'f', 'g'): 1, ('a', 'b'): 3, ('h', 'i', 'k'): 2, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 3}, {('a', 'b'): 2, ('c',): 2, ('d',): 2, ('e',): 1}, {(1, 2): 1, (2, 1, 3): 1, (2, 3): 1, (1, 2, 3): 1}, {('x', 'y'): 3, ('z', 'wf'): 1, ('z', 'w'): 1}, {(): 1, ('x', 'y'): 2, ('z', 'w'): 2}, {(5, 1, 2): 2, (2, 1, 3): 1, (2, 3): 1, (1, 2, 3): 1}, {('a', 'b', 'c', 'd', 'e', 'f', 'g'): 1, ('a', 'b'): 3, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 1, ('g', 'f', 'e', 'd', 'c', 'b', 'a', 'g'): 3, ('h', 'i', 'j', 'k'): 2}, {(10, 60, 50.03460044856237): 1, (): 2}, {(5, 1): 2, (2, 1, 3): 1, (2, 3): 1, (1, 2, 3): 1}, {('apple', 'pear'): 3, ('apple', 'banana', 'cherry'): 2, ('apple', 'banana'): 1, ('apple', 'banadna', 'cherry'): 1}, {(1, 2): 3, (3,): 2, (1, 2, 3): 1, (2, 3): 1}, {('apple', 'banana', 'cherry'): 3, ('apple', 'pear'): 3, ('apple', 'banana'): 1, ('apae', 'bganana', 'cherry', 'apae'): 3}, {('a', 'b', 'c', 'd', 'e', 'f', 'g'): 1, ('a', 'b'): 3, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 2, ('g', 'f', 'e', 'd', 'c', 'b', 'a', 'g'): 3, ('h', 'i', 'j', 'k'): 2}, {('x', 'y'): 2, ('z', 'w'): 4, ('a', 'y'): 2}, {('a', 'bapae', 'b'): 1, ('c',): 3, ('d',): 1, ('e',): 1, ('a', 'b'): 1}, {('a', 'b', 'c', 'd', 'e', 'f', 'g'): 1, ('a', 'b'): 3, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 3, ('h', 'i', 'wf', 'j', 'k'): 2}, {('apple', 'banana', 'cherry'): 4, ('apple', 'pear'): 4, ('apple', 'banana', 'apple'): 2}, {(1, 2, 3, 4): 3, (5, 10, 6, 7): 2, (8, 9, 10): 1, (5, 6, 7): 1}, {(): 1, ('x', 'y'): 1, ('z', 'w'): 2}, {('apple', 'banana', 'cherry'): 3, ('apple', 'pear'): 4, ('apple', 'banana'): 1, ('apae', 'bganana', 'cherry', 'apae', 'apae'): 5}, {(5, 1, 6, 2): 3, (2, 3): 1, (1, 2, 3): 1}, {('a', 'b'): 2, ('c',): 1, ('wf',): 3, ('d',): 1, ('e',): 1}, {(True, True, True, True, False): 3}, {('x', 'xx', 'y'): 2, ('z', 'wf'): 1, ('x',): 1, ('z', 'w'): 1, ('x', 'y'): 1}, {(2, 4): 2, (5, 1): 2, (2, 1, 3): 1, (1, 2, 3): 1}, {('a', 'b'): 2, ('c',): 1, ('wf', 'wf'): 3, ('d',): 1, ('e',): 1}, {(1, 2): 3, (): 2, (1, 2, 3): 1, (2, 3): 1}, {('x', 'w', 'xx', 'y'): 3, ('z', 'wf'): 1, ('g', 'x'): 1, ('k', 'z', 'w'): 1, ('x', 'y'): 1}, {(10, 60, 50.03460044856237): 1, (): 1}, {('x', 'xx', 'y'): 2, ('z', 'wf'): 1, ('x',): 1, ('z', 'w'): 1, ('x', 'y'): 2}, {(5, 1): 2, (2, 1, 3): 1, (5, 2, 3): 1, (1, 2, 3): 1}, {('z', 'wf'): 1, ('x',): 1, ('z', 'w'): 1, ('x', 'xx', 'y'): 1, ('x', 'y'): 2}, {('apple', 'banana', 'cherry'): 3, ('bananaa', 'apple', 'banana'): 1, ('apple', 'pear'): 3, ('apae', 'bganana', 'cherry'): 2}, {('a', 'b'): 1, ('c',): 2, ('dd', 'd'): 2, ('e',): 1, ('ak', 'b'): 1}, {(): 2, ('x', 'y'): 1, ('z', 'w'): 2}, {(10, 60, 50.03460044856237): 1, (): 3, (8, 8, 3, -40, 48): 1}, {('z', 'wf', 'z'): 2, ('x', 'w', 'xx', 'y'): 3, ('g', 'x'): 1, ('k', 'z', 'w'): 1, ('x', 'y'): 1}, {('a', 'b'): 2, ('wf', 'a', 'a'): 5, ('c',): 1, ('d',): 1, ('e',): 2}, {('a', 'b'): 2, ('c',): 1, ('wf', 'wf'): 4, ('d',): 1, ('e',): 1}, {(True, True, True, False, True, False): 4}, {('x', 'ww', 'xx', 'y'): 3, ('z', 'wf'): 1, ('g', 'x'): 1, ('k', 'z', 'w'): 1, ('x', 'y'): 2}, {('a', 'b'): 2, ('c',): 1, ('wf', 'wf'): 5, ('d',): 1, ('e',): 1}, {('a', 'b', 'c', 'd', 'e', 'f', 'g'): 1, ('a', 'b'): 3, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 3}, {('apple', 'banana', 'cherry'): 4, ('apple', 'pear'): 5, ('apple', 'banana', 'apple'): 2}, {(22.633521147116923, 41.08183937180155, -95.716703243959, -95.716703243959, -95.716703243959): 5}, {('a', 'b'): 2, ('c',): 1, ('d',): 1, ('e',): 1, ('f', 'c'): 1}, {(5, 1, 2): 2, (2, 1, 3): 1, (2, 3): 2, (1, 2, 3): 1}, {('a', 'b', 'c', 'd', 'e', 'f', 'g'): 1, ('g', 'f', 'e', 'd', 'c', 'b', 'a', 'e'): 1, ('a', 'b'): 4, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 2, ('h', 'i', 'j', 'k'): 1}, {('apple', 'banana', 'cherry'): 1, ('apple', 'pear'): 3, ('apae', 'bganana', 'cherry'): 3, ('apple', 'banana', 'cherry', 'apple'): 2}, {(5, 1, 2): 2, (2, 1, 3): 2, (2, 3): 1, (1, 2, 3): 1}, {(1, 2, 1): 1, (3,): 2, (1, 2): 2, (1, 2, 3): 1, (2, 3): 1}, {(5, 1): 2, (2, 1, 3): 1, (1, 2, 3): 1}, {('c',): 1, ('wf', 'wf'): 4, ('d',): 1, ('e',): 1, ('a', 'j', 'b'): 1}, {(1, 2): 1, (2, 1, 3): 1, (2,): 1, (1, 2, 3): 1}, {('apple', 'banana', 'cherry'): 2, ('apple', 'adpple', 'pear'): 2, ('apple', 'banana'): 1, ('apple', 'pear'): 2, ('apae', 'bganana', 'cherry'): 3, ('apple', 'banana', 'ae', 'cherry'): 1}, {('z', 'wf'): 1, ('x',): 1, ('z', 'w'): 1, ('x', 'xx', 'y'): 1, ('ww', 'x', 'y'): 1}, {('a', 'b'): 2, ('c',): 1, ('x', 'wf', 'wf'): 6, ('d',): 1, ('e',): 1}, {('x', 'y'): 1, ('z', 'wf'): 1, ('z', 'w'): 1}, {('b', 'c', 'd', 'e', 'f', 'g'): 1, ('a', 'b'): 3, ('i', 'k'): 2, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 3}, {('z', 'i', 'w'): 2, ('x', 'xx', 'y'): 2, ('z', 'wf'): 1, ('x',): 1, ('x', 'y'): 1}, {('x', 'xx', 'y'): 2, ('z', 'wf'): 1, ('x',): 3, ('w',): 1, ('x', 'y'): 2}, {('a', 'b'): 2, ('c',): 2, (): 2, ('d',): 1}, {(3, 60): 3, (1, 2): 3, (2, 3): 1, (1, 2, 3): 1}, {(): 1, ('x', 'y'): 2, ('zz', 'z', 'w'): 2}, {('apple', 'banana', 'cherry'): 3, ('bananaa', 'apple', 'banana'): 1, ('apple', 'pear'): 3, ('apae', 'bganana', 'cherry'): 3}, {('a', 'b'): 3, ('c',): 2, ('d',): 1, ('e',): 1}, {(1, 6, 2): 4, (2, 3): 2, (1, 2, 3): 1}, {('x', 'y'): 1, ('z', 'w'): 4, ('', 'y'): 2, ('y',): 4}, {(1, 10, 3, 4): 1, (5, 10, 6, 7, 5): 3, (1, 2, 3, 4): 2, (8, 9, 10): 1, (5, 6, 7): 1}, {('x', 'y', 'y'): 1, ('z', 'wf'): 1, ('z', 'w'): 1, ('x', 'y'): 1}, {('b', 'c', 'd', 'e', 'f', 'y'): 2, ('a', 'b'): 4, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 3, ('i', 'k'): 1}, {('x', 'xx', 'y'): 2, ('z', 'wf'): 1, ('w',): 1, ('x', 'y'): 2, (): 3}, {('b', 'c', 'd', 'e', 'f', 'g'): 1, ('a', 'b'): 3, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 3, ('h', 'i', 'j', 'k'): 1}, {('j', 'z', 'wf'): 1, ('x',): 1, ('z', 'w'): 1, ('x', 'xx', 'y'): 1, ('x', 'y'): 2}, {('dd', 'd', 'dd'): 3, ('a', 'b'): 1, ('c',): 2, ('e',): 1, ('ak', 'b'): 1}, {('a', 'b', 'c', 'd', 'e', 'f', 'g'): 1, ('g', 'f', 'e', 'd', 'c', 'b', 'a', 'e'): 1, ('a', 'b'): 4, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 2}, {('apple', 'banana', 'cherry'): 3, ('apple', 'pear'): 2, ('apple', 'banana'): 1, ('apae', 'bganana', 'pear', 'cherry'): 3}, {(6, 2): 4, (2, 3): 2, (1, 2, 3): 1}, {('a', 'b'): 2, ('c',): 1, ('d',): 1, ('e',): 2, ('f', 'c'): 1}, {('a', 'b'): 3, ('g', 'f', 'e', 'd', 'c', 'b', 'a'): 2, ('g', 'f', 'e', 'd', 'c', 'b', 'a', 'c'): 1, ('h', 'i', 'wf', 'j', 'k'): 2}, {('x', 'w', 'xx', 'y'): 4, ('z', 'wf'): 1, ('g', 'x'): 1, ('k', 'z', 'w'): 1, ('x', 'y'): 1}, {('apple', 'banana', 'cherry'): 2, ('apple', 'pear'): 2, ('apple', 'banana'): 3, ('apae', 'bganana', 'pear', 'cherry'): 3}, {(5, 1, 2): 2, (2, 1, 3): 1, (2, 10): 3, (1, 3): 2}, {('x', 'y', 'y'): 1, ('z', 'w'): 1, ('x', 'y'): 1}, {('apple', 'banana', 'cherry'): 2, ('apple', 'adpple', 'pear'): 2, ('apple', 'banana'): 1, ('apple', 'pear'): 3, ('apae', 'bganana', 'cherry'): 3, ('apple', 'banana', 'ae', 'cherry'): 1}, {('x', 'y'): 3, ('z', 'w'): 4, ('a', 'y'): 2}]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "unique_sublists"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}', "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", 'assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}', "assert unique_sublists([['john']])=={('john',): 1}"]:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
