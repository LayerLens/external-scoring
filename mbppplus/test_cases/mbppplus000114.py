import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [['TENS FOR TENS'], ['CARDIO FOR CARDS'], ['PART OF THE JOURNEY IS PART'], ['NDZWBHEJKTPQGAOSLYCRMYEX'], ['AAAAAAA'], ['BBBBBBBBB'], ['CCCCCCCCCCCC'], ['CCCCCCCAAAAAAACCCCC'], ['CCCCCCCAAAAAABBBBBBBBBCCCCC'], ['BBBBBBBBBB'], ['CCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCC'], ['CCCCCCCAACCCCCCCCCCCCCAAAAACCCCC'], ['NDZWBCCCCCCCAACCCCCCCCCCCCCAAAAACCCCCHCRMYEX'], ['CCCCCCCCCCCCCCCCCCCAAAAAAACCCCC'], ['BNDZWBHEJKTPQGAOSLYCRMYEXBBBBBBBBB'], ['CCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC'], ['CCCCCCCCCCCCCCCCCCCCAAAAAAACCCCC'], ['CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC'], ['AAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCA'], ['CCCCCCCCCCCCC'], ['CCCCCCCCCCCCCCCCCCCCAAAAAA'], ['CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCGAOSLYCRMYEXCCCCCAAAACCCCC'], ['CCCCCCCCCAAAAACCCCC'], ['CCCCCCCCCCCCCCCCCCCCCCCCAAAAAACCCCCCCCCCCCCCCCAAAAAA'], ['BBBBBBBAAAAAAABBB'], ['AAAACCCCCCCAAAAAABBBBBBBBBCCCCCAAA'], ['CCCCCCCAACCCCCCCCCCCCCAAAACCC'], ['AAAAAACCCCCCCCCCCCCCCCCCCCAAAAAA'], ['CCCCCCCAACCCCCCCCCCCCCAAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC'], ['CCCCCCCAAAAAABBBBBBBBBCCCCCCCCCCCCCCCCCC'], ['CCCCCCCAACCCCCCCCCCCCCCAAAACYCCCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCCCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC'], ['BBBBBBBBBBB'], ['CCCCAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCACCCCCAAAAACCCCC'], ['CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCC'], ['CCCCCCCBBBBBBBBBAAAAAAACCCCC'], ['BBBBBBBBBBBB'], ['CCCCCCCCCCCCCCCAAAAAAACCCCCAAAAAA'], ['CCCCCCCCCCCCCCCAAAAAAACCCCAAAAAA'], ['BCCCCCCCBBBBBBBBBAAAAAAACCCCC'], ['CCCCCCCACACCCCCCCCCCCCCAAAAACCCCC'], ['BBBBBBBBAAAAAAABBB'], ['CCCCCCNDZWBCCCCCCCAACCCCCCCCCCCCCAAAAACCCCCHCRMYEXCCCCCC'], ['CCCCCCCACAACCCCCCCCCCCCCAAAAACCCCC'], ['CCCCCCCAAACCCCCCCCCCCCCAAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC'], ['CCCCCCCAAAAAABBCCCCCCCCCCCCCCCCCCCCAAAAAABBBBBBBCCCCCCCCCCCCCCCCCC'], ['AAAAAACCCCCCCAACCCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCA'], ['CCCCCCCCAACCCCCCCCCCCCCAAAAACCCCC'], ['CCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC'], ['CCCCCCCCCCCCCCCCCCCCCCCCAAAAAACCCCCCCCCCCCCCCCACCCCCCCBBBBBBBBBAAAAAAACCCCCAAAAA'], ['AAAACCCCCCCAAAAAABBBBBBBCCCCCAAA'], ['CCCCCCCCCCCCACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC'], ['NDZWBHEJKTPQGAOSLDYCRMYEX'], ['CCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCACCCCCAAAAACCCCCCCCC'], ['AAAACCCCCCCCAAAAAABBBBBBCCCCAAA'], ['CCCCCCCACAACCCCCCCCCCCCCAAAAACCCCCC'], ['AAAAAACCCCCCCAACCACCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCA'], ['CCCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC'], ['AAAACCCCCCCCAAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAAABBBBBBCCCCAAA'], ['CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAA'], ['CCCCCCCACACCCCCCNDZWBHEJKTPQGAOSLDYCRMYEXCCCCCCCAAAAACCCCC'], ['AAAAAACCCCCCCAACCACCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCACAAACCCCCA'], ['CCCCCCNDZWBCCCCCCCAACCCCCCCCCCCCCCCAAAAACCCCCHCRMYEXCCCCCC'], ['CCCCCCCCCCACACCCCCCNDZWBHEJKTPQGAOSLDYCRMYEXCCCCCCCAAAAACCCCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC'], ['CCCCCCCAAAAAABBCCCCCCCCCCCCCCCCCCCCAAAACCCCCCCCCAAAAACCCCCAABBBBBBBCCCCCCCCCCCCCCCCCC'], ['CCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCACCCCCAAAAACCCCCCCCC'], ['AAAACCAAA'], ['CCCCCCCAAAAAABBBB'], ['M'], ['CCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCCCCACACACCCCCCCCCCCCCAAAAACCCCCCCCCAAAACCCCC'], ['xZQOogNh'], ['CCCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCACACCCCCCCCCCCCCAAAAACCCCCMYEXCCCCCAAAACCCCC'], ['AAAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAACCCCCCCCCCCCCCCCCCCCAAAAAA'], ['ACCCCCCCCCCACACCCCCCNDZWBHEJKTPQGAOSLDYCRMYEXCCCCCCCAAAAACCCCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCCRMYEXCCCCCAAAACCCCCAAACCCCCCCAAAAAABBBBBBBCCCCCAAA'], ['NDZWBHEJKOSLDYCRMYEX'], ['ACCCCCCCCCCACACCCCCCNDZWBHEJKTPQGAOSLDYCRMYEXCCCCCCCAAAAACCCCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAACCCCCCCCCCCCCCCAAAAAAACCCCCAAAAAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCCRMYEXCCCCCAAAACCCCCAAACCCCCCCAAAAAABBBBBBBCCCCCAAA'], ['CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZAAAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAACCCCCCCCCCCCCCCCCCCCAAAAAAWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAA'], ['CCCCCCCC'], ['CCCCNDZWCBHEJKTPQGAOSLYCRMYEXCCCCCCCCACACACCCCCCCCCCCCCAAAAACCCCCCCCCAAAACCCCC'], ['BBBBNDZWBHEJKTPQGAOSLDYCRMYEXBBBBBB'], ['AAAAAAAA'], ['Q'], ['CCCCCCAAABBBBBBBBBCCCCC'], ['CCCCCCCABAAAAAABBBB'], ['LCCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCC'], ['NDZWBCCCCCCBCCCCCCCBBBBBBBBBAAAAAAACCCCCCCCHCRMYEX'], ['BNDZWACCCCCCCCCCACACCCCCCNDZWBHEJKTPQGAOSLDYCRMYEXCCCCCCCAAAAACCCCCCCCCAAACCCCCCCCCCCCCACCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAAACCCCCRMYEXCCCCCAACCCCCCCCCCCCCCCAAAAAAACCCCCAAAAAAAACCCCCAAAAAAACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCCRMYEXCCCCCAAAACCCCCAAACCCCCCCAAAAAABBBBBBBCCCCCAAABHEJKTPQGAOSLYCRMYEXBBBBBBBBB'], ['NDZWBHEEJKOSLDYCRMYEX'], ['CCCCCCBAAABBBBBBBBBCCCCC'], ['CCCCCCBAAAABBBBBBBBBCCCCC'], ['CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZAAAAAAAACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCCAAAAACCCCCCCCCCCCCCCCCCCCAAAAAAWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAAAAA'], ['CCCCCNDZWBCCCCCCCAACCCCCCCCCCCCCAAAAACCCCCHCRMYEXCCAAAAAABBBB'], ['CCCCCCCCCCCCCCCCCCAAAAAAACCCCC'], ['CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCCCCCCCCCCCCCAAACCCCCCCAAAAAABBBBBBBBBCCCCCAAAACCCCCRMYEXCCCCCAAAACCCCC'], ['CCWCCCCCNDZWBHEJKTPQGAOSLYCRMNDZWBHEJKTPQGAOSLDYCRMYEXYEXCCCCC'], ['CCCCCCCCCCCCACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQCGAOSLYCRMYEXCCCCCAAAACCCCC'], ['CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZCWBHEJKTPQGAOSLYCRMYEXCCCCCAAAACCCCC'], ['CCCCCCNDZWBCCCCCCCAACCCCCCCCCCCCCAAAAACCCCCHCRMYEXCBBBBBBBAAAAAAABBBCCCCC'], ['CCCCCCBAAABBBBBBBBBCCCCCC'], ['AAAAAACCCCCCCAACCACCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSCLYCRMYEXCCCCCACAAACCCCCA'], ['BCCCCCCCAAAAACCCCC'], ['NDZWBCCCCCCCAACCCCCCCCCCCCCAAAAACCCCCHCRMYEXNDAAAAAACCCCCCCAACCACCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCRMYEXCCCCCACAAACCCCCAZWBHEJKTPQGAOSLDYCRMYEX'], ['CCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGCCCCCCCACAACCCCCCCCCCCCCAAAAACCCCCCAOSLYCCCCCCCCCCCCCCCCCCCCAAACCCCCCCAAAAAABBBBBBBBBCCCCCAAAACCCCCRMYEXCCCCCAAAACCCCC'], ['BBBBBBCCCCCCCCCCCCCCCAAAAAAACCCCCAAAAAABBBBB'], ['CCCxZQOogNhCCCCCCCCCACCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQCGAOSLYCRMYEXCCCCCAAAACCCCC'], ['BBBBNDZWBHEBBBBBB'], ['CCCCCCCACACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCAACCCCCCCCCCCCCACCCCCCCNDZWBHEJKTPQGAOSLYCCCCCCCCACACCCCCCCCCCCCCAAAAACCCCCMYEXCCCCCAAAACCCCCCCAAAAACCCCC'], ['CCCCCCCCCCAACCCC']]
results = [5, 7, 9, 5, 7, 9, 12, 17, 19, 10, 15, 27, 29, 24, 11, 41, 25, 51, 44, 13, 20, 75, 15, 40, 13, 25, 23, 32, 48, 25, 89, 11, 63, 75, 19, 12, 20, 19, 19, 27, 13, 41, 29, 50, 46, 45, 27, 119, 54, 23, 53, 5, 179, 20, 31, 44, 51, 67, 60, 31, 44, 43, 156, 63, 299, 8, 7, 1, 47, 1, 78, 73, 205, 5, 227, 133, 8, 49, 15, 8, 1, 19, 8, 15, 27, 231, 5, 20, 20, 133, 33, 23, 89, 19, 53, 53, 43, 22, 46, 15, 74, 118, 30, 53, 11, 106, 14]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "lps"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert lps("TENS FOR TENS") == 5', 'assert lps("CARDIO FOR CARDS") == 7', 'assert lps("PART OF THE JOURNEY IS PART") == 9']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
