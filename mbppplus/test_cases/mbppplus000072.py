import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[10, 20], [5, 10], [4, 8], [10000000000000000, 9999999999999999], [999999999999999999, 999999999999999999], [0, 999999999999999999], [-999999999999999999, 999999999999999999], [9999999999999999, -999999999999999999], [9999999999999999, 9999999999999999], [0, 0], [10000000000000000, 9999999999999998], [999999999999999998, 999999999999999998], [999999999999999999, 999999999999999998], [-999999999999999999, -999999999999999999], [-999999999999999999, -1000000000000000000], [0, 9999999999999999], [-999999999999999999, -999999999999999998], [10000000000000000, 999999999999999999], [10000000000000000, 10000000000000000], [1000000000000000000, 999999999999999999], [10000000000000001, -999999999999999999], [1000000000000000000, 0], [10000000000000000, -999999999999999998], [999999999999999999, 10000000000000001], [10000000000000001, 10000000000000001], [9999999999999999, 999999999999999999], [10000000000000000, -999999999999999999], [9999999999999999, 9999999999999998], [1, 0], [9999999999999999, 10000000000000000], [999999999999999998, 0], [9999999999999999, 0], [-2, 0], [-999999999999999997, -999999999999999998], [10000000000000000, 999999999999999998], [0, 9999999999999998], [-1, -1], [9999999999999999, -999999999999999998], [-999999999999999999, -1], [-999999999999999999, 0], [-1000000000000000000, 0], [-999999999999999999, 10000000000000000], [9999999999999998, 10000000000000000], [-1000000000000000000, 1000000000000000000], [1, 10000000000000001], [-2, 999999999999999999], [9999999999999998, 9999999999999999], [10000000000000001, 10000000000000000], [-999999999999999999, 999999999999999998], [999999999999999997, 999999999999999998], [10000000000000000, 999999999999999997], [9999999999999997, 9999999999999997], [9999999999999998, 1000000000000000000], [0, -1], [10000000000000001, 0], [9999999999999999, -2], [9999999999999999, 1], [10000000000000000, 10000000000000001], [10000000000000001, -1], [10000000000000001, 9999999999999998], [9999999999999998, 9999999999999998], [-1, 0], [-999999999999999997, -999999999999999997], [1000000000000000000, -999999999999999998], [-3, -1], [999999999999999997, 10000000000000000], [1000000000000000000, 1000000000000000000], [10000000000000000, -1], [1000000000000000001, -999999999999999998], [999999999999999998, -999999999999999999], [-3, 9999999999999997], [1, 1], [1000000000000000000, 9999999999999997], [False, False], [10000000000000000, 0], [1, 999999999999999999], [-999999999999999999, 999999999999999997], [1000000000000000000, -999999999999999997], [1, 1000000000000000001], [1, -999999999999999998], [999999999999999998, 10000000000000000], [0, 10000000000000001], [1, 2], [999999999999999996, 999999999999999998], [-999999999999999998, -3], [9999999999999999, 10000000000000001], [999999999999999998, 10000000000000001], [-999999999999999998, -999999999999999999], [10000000000000000, 1000000000000000000], [-1, 1000000000000000001], [-999999999999999998, -999999999999999998], [1, -1], [10000000000000002, -2], [9999999999999999, 1000000000000000001], [-999999999999999997, 999999999999999998], [-999999999999999998, 0], [10000000000000000, -2], [-1, -999999999999999998], [9999999999999997, -1], [9999999999999997, -999999999999999998], [2, 1], [-1, 1], [999999999999999997, 1000000000000000001], [9999999999999998, 9999999999999997], [-999999999999999998, 10000000000000000], [999999999999999999, -999999999999999998], [-3, -999999999999999998]]
results = [200, 50, 32, 99999999999999990000000000000000, 999999999999999998000000000000000001, 0, -999999999999999998000000000000000001, -9999999999999998990000000000000001, 99999999999999980000000000000001, 0, 99999999999999980000000000000000, 999999999999999996000000000000000004, 999999999999999997000000000000000002, 999999999999999998000000000000000001, 999999999999999999000000000000000000, 0, 999999999999999997000000000000000002, 9999999999999999990000000000000000, 100000000000000000000000000000000, 999999999999999999000000000000000000, -10000000000000000989999999999999999, 0, -9999999999999999980000000000000000, 10000000000000000989999999999999999, 100000000000000020000000000000001, 9999999999999998990000000000000001, -9999999999999999990000000000000000, 99999999999999970000000000000002, 0, 99999999999999990000000000000000, 0, 0, 0, 999999999999999995000000000000000006, 9999999999999999980000000000000000, 0, 1, -9999999999999998980000000000000002, 999999999999999999, 0, 0, -9999999999999999990000000000000000, 99999999999999980000000000000000, -1000000000000000000000000000000000000, 10000000000000001, -1999999999999999998, 99999999999999970000000000000002, 100000000000000010000000000000000, -999999999999999997000000000000000002, 999999999999999995000000000000000006, 9999999999999999970000000000000000, 99999999999999940000000000000009, 9999999999999998000000000000000000, 0, 0, -19999999999999998, 9999999999999999, 100000000000000010000000000000000, -10000000000000001, 99999999999999989999999999999998, 99999999999999960000000000000004, 0, 999999999999999994000000000000000009, -999999999999999998000000000000000000, 3, 9999999999999999970000000000000000, 1000000000000000000000000000000000000, -10000000000000000, -999999999999999998999999999999999998, -999999999999999997000000000000000002, -29999999999999991, 1, 9999999999999997000000000000000000, 0, 0, 999999999999999999, -999999999999999996000000000000000003, -999999999999999997000000000000000000, 1000000000000000001, -999999999999999998, 9999999999999999980000000000000000, 0, 2, 999999999999999994000000000000000008, 2999999999999999994, 99999999999999999999999999999999, 10000000000000000979999999999999998, 999999999999999997000000000000000002, 10000000000000000000000000000000000, -1000000000000000001, 999999999999999996000000000000000004, -1, -20000000000000004, 9999999999999999009999999999999999, -999999999999999995000000000000000006, 0, -20000000000000000, 999999999999999998, -9999999999999997, -9999999999999996980000000000000006, 2, -1, 999999999999999997999999999999999997, 99999999999999950000000000000006, -9999999999999999980000000000000000, -999999999999999997000000000000000002, 2999999999999999994]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "multiply_int"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert multiply_int(10,20)==200', 'assert multiply_int(5,10)==50', 'assert multiply_int(4,8)==32']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
