import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]], [[10, 20], [15, 2], [5, 10]], [[11, 44], [10, 15], [20, 5]], [[], [], []], [[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], [100, 200, 300, 400, 500]], [[1, 2, 3, 4, 5, 6], [10, 20, 30, 40, 50, 60], [100, 200, 300, 400, 500, 600]], [[11, 22, 33], [10, 20, 30], [100, 200, 300]], [[1, 2, 3, 4], [10, 20, 30, 40], [100, 200, 300, 400]], [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], [[13, 14, 15], [16, 17, 18], [19, 20, 21]], [[22, 23, 24], [25, 26, 27], [28, 29, 30]], [[22, 16, 33], [10, 20, 30], [22, 16, 33]], [[5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [10, 11, 12, 13, 14]], [[1, 7, 3], [1, 7, 3], [1, 7, 3]], [[4, 1, 7, 3], [4, 1, 7, 3], [4, 1, 7, 3]], [[16, 17, 18], [19, 20, 21], [19, 20, 21]], [[5, 6, 7, 8, 9], [9, 11, 12, 13, 14], [9, 11, 12, 13, 14]], [[13, 14, 15], [16, 17, 18], [13, 14, 15]], [[1, 30, 7, 3, 1], [1, 30, 7, 3, 1], [1, 30, 7, 3, 1]], [[9, 11, 12, 13], [9, 11, 12, 13], [9, 11, 12, 13]], [[10, 11, 12, 14, 14], [10, 11, 12, 14, 14], [10, 11, 12, 14, 14]], [[10, 11, 12, 15, 14, 15], [10, 11, 12, 15, 14, 15], [10, 11, 12, 15, 14, 15]], [[9, 12, 13], [9, 12, 13], [9, 12, 13]], [[1, 2, 3, 4], [10, 20, 30, 40], [10, 20, 30, 40]], [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9]], [[9, 11, 12, 13, 13], [9, 11, 12, 13, 13], [9, 11, 12, 13, 13]], [[16, 17, 18], [19, 21, 21], [19, 21, 21]], [[1, 2, 3, 4, 5, 6, 4], [10, 20, 30, 40, 2, 50, 60], [10, 20, 30, 40, 2, 50, 60]], [[0, 1, 2, 3, 8], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14]], [[10, 12, 15, 14, 15], [10, 12, 15, 14, 15], [10, 12, 15, 14, 15]], [[9, 11, 12, 3, 13, 9], [9, 11, 12, 3, 13, 9], [9, 11, 12, 3, 13, 9]], [[17, 17, 18], [19, 20, 21], [19, 20, 21]], [[2, 1, 7, 3, 1], [2, 1, 7, 3, 1], [2, 1, 7, 3, 1]], [[11, 12, 13, 13], [11, 12, 13, 13], [11, 12, 13, 13]], [[2, 1, 7, 1], [2, 1, 7, 1], [2, 1, 7, 1]], [[4, 6, 6], [4, 6, 6], [7, 8, 9]], [[16, 17, 18], [20, 21, 21], [20, 21, 21]], [[2, 29, 7, 1, 29], [2, 29, 7, 1, 29], [2, 29, 7, 1, 29]], [[1, 30, 7, 3, 2], [1, 30, 7, 3, 2], [1, 30, 7, 3, 2]], [[9, 11, 12, 3, 13, 8], [9, 11, 12, 3, 13, 8], [9, 11, 12, 3, 13, 8]], [[2, 29, 7, 0, 29], [2, 29, 7, 0, 29], [2, 29, 7, 0, 29]], [[1, 30, 7, 500, 3, 1, 7, 1], [1, 30, 7, 500, 3, 1, 7, 1], [1, 30, 7, 500, 3, 1, 7, 1]], [[9, 12, 12, 12, 13], [9, 12, 12, 12, 13], [9, 12, 12, 12, 13]], [[1, 30, 7, 7, 500, 3, 1, 7, 1], [1, 30, 7, 7, 500, 3, 1, 7, 1], [1, 30, 7, 7, 500, 3, 1, 7, 1]], [[16, 17, 18, 18], [19, 21, 21, 19], [19, 21, 21, 19]], [[1, 29, 7, 29, 29], [1, 29, 7, 29, 29], [1, 29, 7, 29, 29]], [[4, 1, 30, 7, 3, 2, 4], [4, 1, 30, 7, 3, 2, 4], [4, 1, 30, 7, 3, 2, 4]], [[19, 20, 21, 21], [19, 20, 21, 21], [19, 20, 21, 21]], [[9, 12, 3, 9], [9, 12, 3, 9], [9, 12, 3, 9]], [[1, 30, 11, 7, 500, 3, 1, 7, 1], [1, 30, 11, 7, 500, 3, 1, 7, 1], [1, 30, 11, 7, 500, 3, 1, 7, 1]], [[19, 20, 21, 21, 21], [19, 20, 21, 21, 21], [19, 20, 21, 21, 21]], [[20, 19, 20, 21, 21], [20, 19, 20, 21, 21], [20, 19, 20, 21, 21]], [[9, 8, 13], [9, 8, 13], [9, 8, 13]], [[9, 8, 13, 13], [9, 8, 13, 13], [9, 8, 13, 13]], [[10, 12, 15, 15, 14, 15], [10, 12, 15, 15, 14, 15], [10, 12, 15, 15, 14, 15]], [[1, 30, 7, 7, 500, 3, 1, 7, 1, 1, 500], [1, 30, 7, 7, 500, 3, 1, 7, 1, 1, 500], [1, 30, 7, 7, 500, 3, 1, 7, 1, 1, 500]], [[2, 1, 7, 3, 1, 2, 7, 1], [2, 1, 7, 3, 1, 2, 7, 1], [2, 1, 7, 3, 1, 2, 7, 1]], [[0, 12, 1, 6], [0, 12, 1, 6], [0, 12, 1, 6]], [[9, 11, 12, 3, 13, 9, 9], [9, 11, 12, 3, 13, 9, 9], [9, 11, 12, 3, 13, 9, 9]], [[1, 30, 7, 3, 17, 1], [1, 30, 7, 3, 17, 1], [1, 30, 7, 3, 17, 1]], [[26, 9, 8, 13, 13], [26, 9, 8, 13, 13], [26, 9, 8, 13, 13]], [[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[1, 30, 3, 2], [1, 30, 3, 2], [1, 30, 3, 2]], [[100, 200, 299, 400], [1, 2, 3, 4], [100, 200, 299, 400]], [[12, 13], [12, 13], [12, 13]], [[11, 12, 13, 13, 12], [11, 12, 13, 13, 12], [11, 12, 13, 13, 12]], [[0, 1, 30, 7, 500, 3, 1, 7, 1, 30], [0, 1, 30, 7, 500, 3, 1, 7, 1, 30], [0, 1, 30, 7, 500, 3, 1, 7, 1, 30]], [[11, 12, 12, 13], [11, 12, 12, 13], [11, 12, 12, 13]], [[9, 12, 3, 9, 12], [9, 12, 3, 9, 12], [9, 12, 3, 9, 12]], [[9, 11, 12, 3, 13, 9, 11], [9, 11, 12, 3, 13, 9, 11], [9, 11, 12, 3, 13, 9, 11]], [[11, 12, 13], [11, 12, 13], [11, 12, 13]], [[9, 13, 12, 12, 13, 13], [9, 13, 12, 12, 13, 13], [9, 13, 12, 12, 13, 13]], [[-1, 29, 7, 29, 29], [-1, 29, 7, 29, 29], [-1, 29, 7, 29, 29]], [[12, 13, 13, 12, 13], [12, 13, 13, 12, 13], [12, 13, 13, 12, 13]], [[11, 9, 12, 6], [11, 9, 12, 6], [11, 9, 12, 6]], [[26, 10, 8, 13, 13], [26, 10, 8, 13, 13], [26, 10, 8, 13, 13]], [[19, 20, 21, 8, 21], [19, 20, 21, 8, 21], [19, 20, 21, 8, 21]], [[2, 28, 7, 0, 29, 0], [2, 28, 7, 0, 29, 0], [2, 28, 7, 0, 29, 0]], [[9, 8, 13, 13, 9], [9, 8, 13, 13, 9], [9, 8, 13, 13, 9]], [[1, 31, 30, 7, 3, 1], [1, 31, 30, 7, 3, 1], [1, 31, 30, 7, 3, 1]], [[26, 10, 13, 13], [26, 10, 13, 13], [26, 10, 13, 13]], [[4, 6, 6], [12, 8, 9], [12, 8, 9]], [[11, 12, 12, 13, 11], [11, 12, 12, 13, 11], [11, 12, 12, 13, 11]], [[11, 12, 13, 12], [11, 12, 13, 12], [11, 12, 13, 12]], [[2, 29, 0, 29, 2], [2, 29, 0, 29, 2], [2, 29, 0, 29, 2]], [[10, 12, 15, 33, 15, 33], [10, 12, 15, 33, 15, 33], [10, 12, 15, 33, 15, 33]], [[19, 20, 2, 21], [19, 20, 2, 21], [19, 20, 2, 21]], [[9, 13, 12, 12, 12, 13, 13], [9, 13, 12, 12, 12, 13, 13], [9, 13, 12, 12, 12, 13, 13]], [[-1, 29, 7, 29, 29, 29], [-1, 29, 7, 29, 29, 29], [-1, 29, 7, 29, 29, 29]], [[26, 8, 13, 13], [26, 8, 13, 13], [26, 8, 13, 13]], [[11, 12, 13, 13, 13], [11, 12, 13, 13, 13], [11, 12, 13, 13, 13]], [[10, 11, 12, 14, 14, 11], [10, 11, 12, 14, 14, 11], [10, 11, 12, 14, 14, 11]], [[9, 12, 3, 8, 12, 9], [9, 12, 3, 8, 12, 9], [9, 12, 3, 8, 12, 9]], [[2, 0, 29, 7, 1, 29], [2, 0, 29, 7, 1, 29], [2, 0, 29, 7, 1, 29]], [[11, 12, 13, 13, 12, 12], [11, 12, 13, 13, 12, 12], [11, 12, 13, 13, 12, 12]], [[10, 12, 15, 14, 14, 15], [10, 12, 15, 14, 14, 15], [10, 12, 15, 14, 14, 15]], [[9, 11, 12, 15, 13], [9, 11, 12, 15, 13], [9, 11, 12, 15, 13]], [[9, 11, 12, 13, 13, 13], [9, 11, 12, 13, 13, 13], [9, 11, 12, 13, 13, 13]], [[29, 30, 3, 2], [29, 30, 3, 2], [29, 30, 3, 2]], [[26, 13, 13], [26, 13, 13], [26, 13, 13]], [[9, 10, 11, 12], [9, 10, 11, 12], [9, 10, 11, 12]], [[19, 20, 21, 8, 21, 21, 21], [19, 20, 21, 8, 21, 21, 21], [19, 20, 21, 8, 21, 21, 21]], [[9, 11, 12, 15], [9, 11, 12, 15], [9, 11, 12, 15]], [[19, 20, 21, 8, 500, 21, 21], [19, 20, 21, 8, 500, 21, 21], [19, 20, 21, 8, 500, 21, 21]], [[4, 19, 20, 21], [4, 19, 20, 21], [4, 19, 20, 21]], [[26, 13, 8, 13, 13], [26, 13, 8, 13, 13], [26, 13, 8, 13, 13]], [[10, 11, 12, 14, 11], [10, 11, 12, 14, 11], [10, 11, 12, 14, 11]], [[11, 13, 12, 12, 13, 12], [11, 13, 12, 12, 13, 12], [11, 13, 12, 12, 13, 12]], [[2, 1, 0, 7, 3, 1], [2, 1, 0, 7, 3, 1], [2, 1, 0, 7, 3, 1]], [[10, 11, 9, 9, 14, 14, 10], [10, 11, 9, 9, 14, 14, 10], [10, 11, 9, 9, 14, 14, 10]], [[19, 20, 0, 8, 500, 21, 21], [19, 20, 0, 8, 500, 21, 21], [19, 20, 0, 8, 500, 21, 21]]]
results = [[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700], [10, 15, 5, 20, 2, 10], [11, 10, 20, 44, 15, 5], [], [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500], [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600], [11, 10, 100, 22, 20, 200, 33, 30, 300], [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400], [0, 5, 10, 1, 6, 11, 2, 7, 12, 3, 8, 13, 4, 9, 14], [1, 4, 7, 2, 5, 8, 3, 6, 9], [1, 5, 9, 2, 6, 10, 3, 7, 11, 4, 8, 12], [13, 16, 19, 14, 17, 20, 15, 18, 21], [22, 25, 28, 23, 26, 29, 24, 27, 30], [22, 10, 22, 16, 20, 16, 33, 30, 33], [5, 10, 10, 6, 11, 11, 7, 12, 12, 8, 13, 13, 9, 14, 14], [1, 1, 1, 7, 7, 7, 3, 3, 3], [4, 4, 4, 1, 1, 1, 7, 7, 7, 3, 3, 3], [16, 19, 19, 17, 20, 20, 18, 21, 21], [5, 9, 9, 6, 11, 11, 7, 12, 12, 8, 13, 13, 9, 14, 14], [13, 16, 13, 14, 17, 14, 15, 18, 15], [1, 1, 1, 30, 30, 30, 7, 7, 7, 3, 3, 3, 1, 1, 1], [9, 9, 9, 11, 11, 11, 12, 12, 12, 13, 13, 13], [10, 10, 10, 11, 11, 11, 12, 12, 12, 14, 14, 14, 14, 14, 14], [10, 10, 10, 11, 11, 11, 12, 12, 12, 15, 15, 15, 14, 14, 14, 15, 15, 15], [9, 9, 9, 12, 12, 12, 13, 13, 13], [1, 10, 10, 2, 20, 20, 3, 30, 30, 4, 40, 40], [0, 5, 5, 1, 6, 6, 2, 7, 7, 3, 8, 8, 4, 9, 9], [9, 9, 9, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13], [16, 19, 19, 17, 21, 21, 18, 21, 21], [1, 10, 10, 2, 20, 20, 3, 30, 30, 4, 40, 40, 5, 2, 2, 6, 50, 50, 4, 60, 60], [0, 5, 10, 1, 6, 11, 2, 7, 12, 3, 8, 13, 8, 9, 14], [10, 10, 10, 12, 12, 12, 15, 15, 15, 14, 14, 14, 15, 15, 15], [9, 9, 9, 11, 11, 11, 12, 12, 12, 3, 3, 3, 13, 13, 13, 9, 9, 9], [17, 19, 19, 17, 20, 20, 18, 21, 21], [2, 2, 2, 1, 1, 1, 7, 7, 7, 3, 3, 3, 1, 1, 1], [11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13], [2, 2, 2, 1, 1, 1, 7, 7, 7, 1, 1, 1], [4, 4, 7, 6, 6, 8, 6, 6, 9], [16, 20, 20, 17, 21, 21, 18, 21, 21], [2, 2, 2, 29, 29, 29, 7, 7, 7, 1, 1, 1, 29, 29, 29], [1, 1, 1, 30, 30, 30, 7, 7, 7, 3, 3, 3, 2, 2, 2], [9, 9, 9, 11, 11, 11, 12, 12, 12, 3, 3, 3, 13, 13, 13, 8, 8, 8], [2, 2, 2, 29, 29, 29, 7, 7, 7, 0, 0, 0, 29, 29, 29], [1, 1, 1, 30, 30, 30, 7, 7, 7, 500, 500, 500, 3, 3, 3, 1, 1, 1, 7, 7, 7, 1, 1, 1], [9, 9, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13], [1, 1, 1, 30, 30, 30, 7, 7, 7, 7, 7, 7, 500, 500, 500, 3, 3, 3, 1, 1, 1, 7, 7, 7, 1, 1, 1], [16, 19, 19, 17, 21, 21, 18, 21, 21, 18, 19, 19], [1, 1, 1, 29, 29, 29, 7, 7, 7, 29, 29, 29, 29, 29, 29], [4, 4, 4, 1, 1, 1, 30, 30, 30, 7, 7, 7, 3, 3, 3, 2, 2, 2, 4, 4, 4], [19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 21], [9, 9, 9, 12, 12, 12, 3, 3, 3, 9, 9, 9], [1, 1, 1, 30, 30, 30, 11, 11, 11, 7, 7, 7, 500, 500, 500, 3, 3, 3, 1, 1, 1, 7, 7, 7, 1, 1, 1], [19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21], [20, 20, 20, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 21], [9, 9, 9, 8, 8, 8, 13, 13, 13], [9, 9, 9, 8, 8, 8, 13, 13, 13, 13, 13, 13], [10, 10, 10, 12, 12, 12, 15, 15, 15, 15, 15, 15, 14, 14, 14, 15, 15, 15], [1, 1, 1, 30, 30, 30, 7, 7, 7, 7, 7, 7, 500, 500, 500, 3, 3, 3, 1, 1, 1, 7, 7, 7, 1, 1, 1, 1, 1, 1, 500, 500, 500], [2, 2, 2, 1, 1, 1, 7, 7, 7, 3, 3, 3, 1, 1, 1, 2, 2, 2, 7, 7, 7, 1, 1, 1], [0, 0, 0, 12, 12, 12, 1, 1, 1, 6, 6, 6], [9, 9, 9, 11, 11, 11, 12, 12, 12, 3, 3, 3, 13, 13, 13, 9, 9, 9, 9, 9, 9], [1, 1, 1, 30, 30, 30, 7, 7, 7, 3, 3, 3, 17, 17, 17, 1, 1, 1], [26, 26, 26, 9, 9, 9, 8, 8, 8, 13, 13, 13, 13, 13, 13], [1, 4, 1, 2, 5, 2, 3, 6, 3], [1, 1, 1, 30, 30, 30, 3, 3, 3, 2, 2, 2], [100, 1, 100, 200, 2, 200, 299, 3, 299, 400, 4, 400], [12, 12, 12, 13, 13, 13], [11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 12, 12, 12], [0, 0, 0, 1, 1, 1, 30, 30, 30, 7, 7, 7, 500, 500, 500, 3, 3, 3, 1, 1, 1, 7, 7, 7, 1, 1, 1, 30, 30, 30], [11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13], [9, 9, 9, 12, 12, 12, 3, 3, 3, 9, 9, 9, 12, 12, 12], [9, 9, 9, 11, 11, 11, 12, 12, 12, 3, 3, 3, 13, 13, 13, 9, 9, 9, 11, 11, 11], [11, 11, 11, 12, 12, 12, 13, 13, 13], [9, 9, 9, 13, 13, 13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13], [-1, -1, -1, 29, 29, 29, 7, 7, 7, 29, 29, 29, 29, 29, 29], [12, 12, 12, 13, 13, 13, 13, 13, 13, 12, 12, 12, 13, 13, 13], [11, 11, 11, 9, 9, 9, 12, 12, 12, 6, 6, 6], [26, 26, 26, 10, 10, 10, 8, 8, 8, 13, 13, 13, 13, 13, 13], [19, 19, 19, 20, 20, 20, 21, 21, 21, 8, 8, 8, 21, 21, 21], [2, 2, 2, 28, 28, 28, 7, 7, 7, 0, 0, 0, 29, 29, 29, 0, 0, 0], [9, 9, 9, 8, 8, 8, 13, 13, 13, 13, 13, 13, 9, 9, 9], [1, 1, 1, 31, 31, 31, 30, 30, 30, 7, 7, 7, 3, 3, 3, 1, 1, 1], [26, 26, 26, 10, 10, 10, 13, 13, 13, 13, 13, 13], [4, 12, 12, 6, 8, 8, 6, 9, 9], [11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 11, 11, 11], [11, 11, 11, 12, 12, 12, 13, 13, 13, 12, 12, 12], [2, 2, 2, 29, 29, 29, 0, 0, 0, 29, 29, 29, 2, 2, 2], [10, 10, 10, 12, 12, 12, 15, 15, 15, 33, 33, 33, 15, 15, 15, 33, 33, 33], [19, 19, 19, 20, 20, 20, 2, 2, 2, 21, 21, 21], [9, 9, 9, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13], [-1, -1, -1, 29, 29, 29, 7, 7, 7, 29, 29, 29, 29, 29, 29, 29, 29, 29], [26, 26, 26, 8, 8, 8, 13, 13, 13, 13, 13, 13], [11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13], [10, 10, 10, 11, 11, 11, 12, 12, 12, 14, 14, 14, 14, 14, 14, 11, 11, 11], [9, 9, 9, 12, 12, 12, 3, 3, 3, 8, 8, 8, 12, 12, 12, 9, 9, 9], [2, 2, 2, 0, 0, 0, 29, 29, 29, 7, 7, 7, 1, 1, 1, 29, 29, 29], [11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12], [10, 10, 10, 12, 12, 12, 15, 15, 15, 14, 14, 14, 14, 14, 14, 15, 15, 15], [9, 9, 9, 11, 11, 11, 12, 12, 12, 15, 15, 15, 13, 13, 13], [9, 9, 9, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13], [29, 29, 29, 30, 30, 30, 3, 3, 3, 2, 2, 2], [26, 26, 26, 13, 13, 13, 13, 13, 13], [9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12], [19, 19, 19, 20, 20, 20, 21, 21, 21, 8, 8, 8, 21, 21, 21, 21, 21, 21, 21, 21, 21], [9, 9, 9, 11, 11, 11, 12, 12, 12, 15, 15, 15], [19, 19, 19, 20, 20, 20, 21, 21, 21, 8, 8, 8, 500, 500, 500, 21, 21, 21, 21, 21, 21], [4, 4, 4, 19, 19, 19, 20, 20, 20, 21, 21, 21], [26, 26, 26, 13, 13, 13, 8, 8, 8, 13, 13, 13, 13, 13, 13], [10, 10, 10, 11, 11, 11, 12, 12, 12, 14, 14, 14, 11, 11, 11], [11, 11, 11, 13, 13, 13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 12, 12, 12], [2, 2, 2, 1, 1, 1, 0, 0, 0, 7, 7, 7, 3, 3, 3, 1, 1, 1], [10, 10, 10, 11, 11, 11, 9, 9, 9, 9, 9, 9, 14, 14, 14, 14, 14, 14, 10, 10, 10], [19, 19, 19, 20, 20, 20, 0, 0, 0, 8, 8, 8, 500, 500, 500, 21, 21, 21, 21, 21, 21]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "interleave_lists"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]', 'assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]', 'assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
