import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[3, 2, 1], [6, 5, 4], [12, 11, 10]]], [[[2, 3, 1]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 1], [2, 2, 2], [3, 3, 3, 3]]], [[[10, 20, 30], [40, 50], [10, 10, 10, 10, 10, 10]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]], [[[4, 3, 2, 1], [10, 20, 30], [1, 2, 3, 4, 5], [100, 200, 300, 400]]], [[[1], [2], [3], [4], [5], [6], [7]]], [[[1, 2, 3], [4, 5, 9], [7, 6]]], [[[]]], [[[1000], [5000], [2000], [3000], [4000], [6000], [7000]]], [[[1, 10000, 100000], [1000, 20000, 300000], [100, 1000000, 10000000], [10000, 200000, 3000000]]], [[[300, 200, 100], [600, 500, 400], [1200, 1100, 1000]]], [[[4000, 3000, 2000, 1000], [10000, 20000, 30000], [1, 2, 3, 4, 5, 55555555], [100000, 200000, 3000000, 4000000]]], [[[1, 20, 300], [400, 5000, 60000], [700, 8000, 90000]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120], [130, 140, 150], [160, 170, 180], [190, 200, 210]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 900], [1000, 1100, 1200], [1300, 1400, 1500], [1600, 1700, 1800]]], [[[1, 100, 10000], [2, 200, 20000], [3, 300, 30000], [4, 400, 40000], [5, 500, 50000], [6, 600, 60000]]], [[[10, 20, 30], [40, 50, 60, 70], [80, 90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230]]], [[[], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[-10, -20, -30], [-40, -50, -60], [-70, -80, -90], [-100, -110, -120]]], [[[-1, -2, -3], [0, 0, 0, 0], [4, 5, 6, 7, 8]]], [[[9, 8, 7], [], [-6, -5, -4, -3, -2, -1]]], [[[0, 0, 0], [2, 4, 6], [-1, -2, -3, -4]]], [[[-10, -20, -30], [40, 50, 60], [-70, -80, -90]]], [[[100, 200, 300, 400], [0, 0, 0], [1, -1, 1, -1, 1, -1]]], [[[0, 0, 0], [2, 4, 6], [-1, -2, -3, -4], [-1, -2, -3, -4]]], [[[1, 2, 3], [60, 4, 5, 70, 6], [60, 4, 5, 70, 6], [7, 8, 9]]], [[[1000], [5000], [2000], [3000, 3000], [4000], [6000], [7000]]], [[[-10, -20, -30], [40, 50, 60], [-70, -80, -90], [-70, -80, -90]]], [[[-1, -2, -3, -2], [-1, -2, -3, -2], [0, 0, 0, 0], [4, 5, 6, 7, 8]]], [[[1, 20, 300], [5000, 60000, 60000], [5000, 60000, 60000], [5000, 60000, 60000], [700, 8000, 90000]]], [[[1, 2, 3], [4, 5, 6], [10, 11, 12]]], [[[1, 2, 3], [4, 6], [10, 11, 12], [10, 11, 12]]], [[[-1, -2, -3, -2], [-1, -2, -3, -2]]], [[[-10, -20, -30], [-70, -80, -90, -80], [40, 50, 60], [-70, -80, -90, -80], [-10, -20, -30]]], [[[300, 200, 100], [600, 500, 400, 400], [1200, 1100, 1000]]], [[[10, 20, -120], [10, 20, -120], [40, 50], [10, 10, 10, 10, 10, 10], [10, 20, -120]]], [[[100, 200, 300, 400], [0, 0, 0], [1, -1, 1, -1, 1, -1], [0, 0, 0]]], [[[1, 2, 3], [4, 5, 9]]], [[[40, 50, 60, 70], [80, 90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230]]], [[[10, 20, 30], [1, 2, 3, 4, 5], [100, 200, 300, 400]]], [[[100, 100, 400], [1, -1, 1, -1, 1, -1, 1], [100, 100, 400], [100, 100, 400], [1, -1, 1, -1, 1, -1, 1]]], [[[10, 20, 30], [40, 50, 60, 70], [80, 90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [10, 20, 30]]], [[[-1, -2, -3, -2, -3], [-1, -2, -3, -2, -3], [-1, -2, -3, -2, -3]]], [[[300, 200, 100], [600, 500, 400, 400], [300, 200, 100], [1200, 1100, 1000]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120], [130, 140, 150], [190, 200, 210]]], [[[10, 20, 30], [40, 50, 60, 70], [80, 90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [150, 160, 170]]], [[[-1, -2, -3, -2], [-1, -2, -3, -2], [-1, -2, -3, -2]]], [[[-20, -30], [-20, -30], [-70, -80, -90, 20000], [40, 50, 60], [-70, -80, -90, 20000], [-20, -30]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [17, 18], [10, 11, 12]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1300, 1400, 1500], [1600, 1700, 1800]]], [[[-10, -20, -30], [-100, -110, -120]]], [[[2, 3], [4, 5, 6], [10, 11, 12]]], [[[-1, -2, -3, -2], [-1, -2, -3, -2], [0, 0, 0, 0], [4, 5, 6, 7, 8], [-1, -2, -3, -2]]], [[[1, 2, 300000], [], [1, 2, 300000], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[-1, -2, 150, -3, -2]]], [[[80, 90, 90], [40, 50, 60, 70], [80, 90, 90], [150, 160, 170], [180, 190, 200, 210, 220, 230]]], [[[10, 1100, 20, 30], [10, 1100, 20, 30], [40, 50, 60, 70], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [150, 160, 170]]], [[[100, 200, 300], [700, 800, 900], [1000, 1100, 20], [1300, 1400, 1500], [1000, 1100, 20], [1600, 1700, 1800]]], [[[400, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1300, 1400, 1500], [1600, 1700, 1800]]], [[[-100, -110, -1], [-100, -110, -1]]], [[[1, 2, 3], [60, 4, 5, 70, 6], [7, 8, 9]]], [[[1, 2, 3], [60, 4, 5, 70, 6], [60, 4, 5, 70, 6], [7, 8, 9], [60, 4, 5, 70, 6]]], [[[10, 20, 30], [40, 50, 60, 70], [80, 90, 80], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230]]], [[[1, 10000, 100000], [1000, 20000, 300000], [10000, 200000, 3000000], [1000, 20000, 300000]]], [[[16, 1000], [5000], [16, 1000], [3000], [4000], [1], [6000], [1]]], [[[2000, 200, 300, 400], [0, 0, 0], [2000, 200, 300, 400], [1, -1, 1, -1, 1, -1]]], [[[170, 20, 30], [40, 50, 60, 70], [80, 90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [170, 20, 30]]], [[[4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 900], [1600, 1700, 1800], [400, 500, 600]]], [[[1, 2], [60, 4, 5, 70, 6], [1, 2], [7, 8, 9]]], [[[1, 2, 3], [4, 5, 6, 6], [10, 11, 12]]], [[[0, 0, 0], [2, 4, 6], [-1, -2, -3, -4], [-1, -2, -3, -4], [2, 4, 6]]], [[[1, 2, 3], [10, 11, 12], [10, 11, 12]]], [[[1, 20, 301, 300], [400, 5000, 60000], [1, 20, 301, 300]]], [[[], [], [], []]], [[[4, 600, 6], [1, 2, 3], [4, 600, 6], [7, 8, 9]]], [[[10, 20, 30], [-90, 1, 2, 3, 4, 5], [-90, 1, 2, 3, 4, 5], [100, 200, 300, 400]]], [[[170, 21, 30], [40, 50, 60, 70], [90], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [170, 21, 30], [180, 190, 200, 210, 220, 230]]], [[[-1, -2, -3, -2, -3], [-1, -2, -3, -2, -3], [-1, -2, -3, -2, -3], [-1, -2, -3, -2, -3]]], [[[4, 5, 6, 6], [10, 11, 12]]], [[[4000, 3000, 2000, 1000], [10000, 20000, 30000], [1, 2, 3, 4, 5, 55555555], [10000, 20000, 30000], [100000, 200000, 3000000, 4000000]]], [[[1, 20, 300], [5000, 60000, 60000], [5000, 60000, 60000], [5000, 60000, 60000], [700, 8000, 90000], [5000, 60000, 60000]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [7, 8, 9], [13, 14, 15]]], [[[40, 50, 60], [-19, -10, -20, -30], [-70, -80, -90], [-70, -80, -90]]], [[[1, 2, 3], [4, 6], [10, 11, 12], [10, 11, 12], [1, 2, 3]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1600, 1700, 1800]]], [[[-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3]]], [[[-20, -10, -30], [-20, -10, -30], [-20, -10, -30], [-70, -80, -90, 20000, -70], [40, 50, 60], [-70, -80, -90, 20000, -70], [-20, -10, -30], [-20, -10, -30]]], [[[10, 20, 30], [40, 50, 60], [100, 110, 120], [190, 200, 210]]], [[[41, 40, 50], [10, 20, 30], [41, 40, 50], [10, 10, 10, 10, 10, 10]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [17, 18], [10, 11, 12], [10, 11, 12]]], [[[1000], [5000], [2000], [3000], [4000], [6000, 6000], [7000]]], [[[10, 20, 30], [40, 50, 60], [109, 100, 110, 120], [70, 80, 90], [109, 100, 110, 120], [130, 140, 150], [160, 170, 180], [190, 200, 210]]], [[[9, 8, 7], []]], [[[1, 2, 3], [60, 4, 5, 5000, 6], [60, 4, 5, 5000, 6], [7, 8, 9], [60, 4, 5, 5000, 6], [60, 4, 5, 5000, 6]]], [[[1, 2, 3], [10, 11, 12], [10, 11, 12], [10, 11, 12]]], [[[1, 1], [2, 2, 2], [3, 3, 3, 3], [2, 2, 2]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 120], [200000, 140, 150], [190, 200, 210]]], [[[1, 2, 3], [10, 11, -50, 12], [10, 11, -50, 12]]], [[[1001, 1000], [5000], [2000], [1001, 1000], [3000], [4000], [6000], [7000]]], [[[400, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1300, 1400, 1500], [1600, 1700, 1800], [1300, 1400, 1500]]], [[[-1, 500, -2, -3, -2, -3], [-1, 500, -2, -3, -2, -3], [-1, 500, -2, -3, -2, -3], [-1, 500, -2, -3, -2, -3], [-1, 500, -2, -3, -2, -3]]], [[[5000, 60000, 60000], [5000, 60000, 60000], [5000, 60000, 60000], [5000, 60000, 60000], [700, 8000, 90000]]], [[[10, 20, 30], [-90, 1, 2, 3, 4, 5], [100, 200, 300, 400]]], [[[10, 12, 30], [1, 2, 3, 4, 5], [10, 12, 30], [100, 200, 300, 400]]], [[[20000, -1, -2, -3, -3, -2, -3, -3], [20000, -1, -2, -3, -3, -2, -3, -3], [20000, -1, -2, -3, -3, -2, -3, -3], [20000, -1, -2, -3, -3, -2, -3, -3], [20000, -1, -2, -3, -3, -2, -3, -3]]], [[[40, 50, 60], [70, 80, 90], [100, 110, 120], [130, 140, 150], [190, 200, 210]]], [[[-1, -2, -3, -2, -1], [-1, -2, -3, -2, -1], [0, 0, 0, 0], [-1, -2, -3, -2, -1], [4, 5, 6, 7, 8], [-1, -2, -3, -2, -1], [-1, -2, -3, -2, -1]]], [[[1001, 1000], [5000], [2000], [1001, 1000], [100], [4000], [6000], [7000]]], [[[1, 10000, 100000], [1000, 20000, 300000], [1000, 20000, 300000]]], [[[-1, -3, -2], [-1, -3, -2], [-1, -3, -2], [-1, -3, -2]]], [[[1, 20, 300], [400, 5000, 60000], [700, 8000, 90000], [700, 8000, 90000]]], [[[10, 20, 30], [100, 110, 120, 109, 130, 140], [40, 50, 60, 70], [80, 90], [100, 110, 120, 109, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [150, 160, 170]]], [[[700, 800, 899, 900], [400, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1300, 1400, 1500], [1600, 1700, 1800], [1300, 1400, 1500]]], [[[1000], [5000], [2000], [3000], [70], [6000], [70], [7000]]], [[[-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3], [-1, -2, -3, -3, -2, -3]]], [[[0, 0], [2, 4, 6], [-1, -2, -3, -4], [-1, -2, -3, -4]]], [[[1, 8, 2, 3], [10, 11, 12], [10, 11, 12], [1, 8, 2, 3]]], [[[100, 200, 300], [400, 500, 600], [700, 900], [700, 900], [1600, 1700, 1800], [400, 500, 600]]], [[[-1, -2, -3, -2], [-1, -2, -3, -2], [5, 4, 5, 6, 7, 8], [0, 0, 0, 0], [5, 4, 5, 6, 7, 8]]], [[[1001, 1000], [5000], [2000], [100], [4000], [6000], [7000]]], [[[10, 1100, 20, 30], [10, 1100, 20, 30], [40, 50, 60, 70], [100, 110, 120, 130, 140], [150, 160, 170], [180, 190, 200, 210, 220, 230], [150, 160, 170], [100, 110, 120, 130, 140]]], [[[100, 200, 300], [401, 500, 600], [700, 800, 899, 900], [1000, 1100, 1200], [1600, 1700, 1800]]], [[[4, 3, 2, 1], [10, 20, 30], [1, 2, 3, 4, 5], [100, 200, 300, 400], [1, 2, 3, 4, 5]]]]
results = [[10, 11, 12], [12, 11, 10], [2, 3, 1], [7, 8, 9], [3, 3, 3, 3], [40, 50], [13, 14, 15], [100, 200, 300, 400], [7], [4, 5, 9], [], [7000], [100, 1000000, 10000000], [1200, 1100, 1000], [1, 2, 3, 4, 5, 55555555], [700, 8000, 90000], [16, 17, 18], [190, 200, 210], [1600, 1700, 1800], [6, 600, 60000], [180, 190, 200, 210, 220, 230], [10, 11, 12], [-10, -20, -30], [4, 5, 6, 7, 8], [9, 8, 7], [2, 4, 6], [40, 50, 60], [100, 200, 300, 400], [2, 4, 6], [60, 4, 5, 70, 6], [7000], [40, 50, 60], [4, 5, 6, 7, 8], [5000, 60000, 60000], [10, 11, 12], [10, 11, 12], [-1, -2, -3, -2], [40, 50, 60], [1200, 1100, 1000], [40, 50], [100, 200, 300, 400], [4, 5, 9], [180, 190, 200, 210, 220, 230], [100, 200, 300, 400], [100, 100, 400], [180, 190, 200, 210, 220, 230], [-1, -2, -3, -2, -3], [1200, 1100, 1000], [190, 200, 210], [180, 190, 200, 210, 220, 230], [-1, -2, -3, -2], [-70, -80, -90, 20000], [13, 14, 15], [1600, 1700, 1800], [-10, -20, -30], [10, 11, 12], [4, 5, 6, 7, 8], [1, 2, 300000], [-1, -2, 150, -3, -2], [180, 190, 200, 210, 220, 230], [180, 190, 200, 210, 220, 230], [1600, 1700, 1800], [1600, 1700, 1800], [-100, -110, -1], [60, 4, 5, 70, 6], [60, 4, 5, 70, 6], [180, 190, 200, 210, 220, 230], [10000, 200000, 3000000], [6000], [2000, 200, 300, 400], [180, 190, 200, 210, 220, 230], [16, 17, 18], [1600, 1700, 1800], [60, 4, 5, 70, 6], [10, 11, 12], [2, 4, 6], [10, 11, 12], [400, 5000, 60000], [], [4, 600, 6], [100, 200, 300, 400], [180, 190, 200, 210, 220, 230], [-1, -2, -3, -2, -3], [10, 11, 12], [1, 2, 3, 4, 5, 55555555], [5000, 60000, 60000], [16, 17, 18], [40, 50, 60], [10, 11, 12], [1600, 1700, 1800], [-1, -2, -3, -3, -2, -3], [-70, -80, -90, 20000, -70], [190, 200, 210], [41, 40, 50], [13, 14, 15], [6000, 6000], [190, 200, 210], [9, 8, 7], [60, 4, 5, 5000, 6], [10, 11, 12], [3, 3, 3, 3], [200000, 140, 150], [1, 2, 3], [7000], [1600, 1700, 1800], [-1, 500, -2, -3, -2, -3], [5000, 60000, 60000], [100, 200, 300, 400], [100, 200, 300, 400], [20000, -1, -2, -3, -3, -2, -3, -3], [190, 200, 210], [4, 5, 6, 7, 8], [7000], [1000, 20000, 300000], [-1, -3, -2], [700, 8000, 90000], [180, 190, 200, 210, 220, 230], [1600, 1700, 1800], [7000], [-1, -2, -3, -3, -2, -3], [2, 4, 6], [10, 11, 12], [1600, 1700, 1800], [5, 4, 5, 6, 7, 8], [7000], [180, 190, 200, 210, 220, 230], [1600, 1700, 1800], [100, 200, 300, 400]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "max_sum_list"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]', 'assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]', 'assert max_sum_list([[2,3,1]])==[2,3,1]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
