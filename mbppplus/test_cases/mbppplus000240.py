import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 2, 1], 3], [[1, 1, 1, 1], 4], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 12], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], 10], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 10], [[1, 2, 1, 2, 1, 2], 6], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], 11], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 100], 11], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 14], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 20], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 7, 6], 2], [[1, 2, 3, 4, 5, 6, 7, 70, 9, 10, 10, 10, 10, 10, 7, 6], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10, 10, 10, 10, 7, 6], 2], [[1, 2, 3, 4, 5, 6, 7, 7, 9, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 20], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9], [[1, 1, 2, 2, 3, 3, 5, 4, 4, 5], 10], [[1, 2, 4, 5, 6, 7, 8, 9, 10, 10, 2], 11], [[1, 2, 3, 4, 5, 6, 70, 8, 9, 10], 10], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 100], 7], [[1, 2, 4, 5, 6, 7, 8, 9, 10, 10, 2], 10], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 80], 10], [[1, 2, 1, 2, 1, 2, 2], 6], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 13], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 3], [[1, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 13], [[1, 2, 4, 5, 6, 7, 8, 9, 10, 10, 2, 10], 10], [[1, 2, 3, 4, 5, 6, 70, 8, 9, 10], 9], [[1, 2, 3, 4, 5, 6, 70, 8, 9, 10, 9], 9], [[1, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 8], [[20, 2, 3, 4, 5, 6, 70, 8, 9, 10], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2], 10], [[1, 2, 3, 4, 5, 6, 7, 70, 9, 10, 10, 6, 10, 10, 10, 7, 6], 2], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2], 12], [[1, 2, 3, 4, 5, 6, 8, 8, 9, 10], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4], 13], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0, 3], 3], [[1, 2, 4, 5, 6, 70, 8, 9, 10, 1], 10], [[1, 2, 1, 2, 1, 2, 2], 7], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0, 5], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12], 12], [[1, 1, 2, 2, 3, 3, 5, 4, 4, 5], 3], [[10, 20, 29, 40, 50, 60, 70, 80, 90, 100, 80], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 7, 6, 3], 2], [[8, 1, 1, 2, 2, 3, 3, 4, 5, 5, 0], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 6], 8], [[1, 2, 4, 5, 6, 7, 8, 9, 10, 10, 2, 10, 6], 10], [[1, 1, 2, 2, 3, 3, 5, 4, 4, 5], 9], [[1, 2, 3, 4, 5, 6, 7, 70, 9, 10, 10, 10, 10, 10, 7, 6], 1], [[1, 2, 1, 2, 1, 2, 2, 2], 6], [[1, 2, 3, 4, 5, 0, 6, 70, 8, 9, 10], 9], [[1, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 10], 11], [[1, 2, 3, 4, 5, 6, 70, 8, 60, 9, 10], 5], [[1, 2, 3, 4, 5, 6, 70, 8, 9, 10, 10], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 6], 9], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0, 5, 3], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 12], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 2], 12], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 20], [[1, 2, 3, 4, 5, 29, 6, 7, 8, 9, 10, 2], 10], [[1, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 12], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4, 10, 10], 12], [[1, 1, 2, 1, 2, 2, 2], 7], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4, 10], 9], [[10, 20, 30, 50, 60, 70, 80, 90, 100, 100], 5], [[8, 1, 1, 2, 2, 3, 3, 5, 5, 0], 10], [[1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 10], 10], [[1, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4, 10, 6], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 6], 10], [[1, 2, 3, 4, 5, 4, 6, 7, 7, 9, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 20], [[1, 1, 2, 3, 3, 4, 5, 70, 0, 3], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4, 10, 1], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10, 10, 10, 10, 7, 6, 7], 2], [[1, 2, 3, 4, 5, 6, 7, 70, 9, 10, 10, 6, 10, 10, 10, 7, 6], 12], [[1, 2, 3, 4, 7, 80, 5, 6, 7, 8, 9, 10], 9], [[1, 2, 4, 3, 4, 6, 7, 8, 9, 10, 10], 11], [[1, 1, 2, 2, 3, 3, 4, 20, 5, 0, 5, 2], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 9, 6], 9], [[1, 2, 3, 4, 5, 50, 8, 8, 9, 10], 9], [[1, 2, 3, 4, 5, 6, 8, 8, 9, 10], 8], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 1, 0, 3], 3], [[1, 2, 4, 5, 6, 70, 8, 9, 10, 1], 7], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 4, 10], 10], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0, 5, 3], 9], [[10, 20, 30, 40, 50, 60, 70, 79, 90, 100, 100], 11], [[1, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10], 6], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 0, 5, 5], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 30, 10, 10, 10, 10, 10, 10], 21], [[1, 2, 3, 4, 5, 6, 7, 7, 9, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7], 20], [[1, 2, 1, 2, 11, 1, 2, 2], 7], [[1, 3, 2, 1, 2, 1, 2, 2], 6], [[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 3], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 30, 10, 10, 10, 10, 10, 10, 10, 10], 21], [[1, 2, 3, 5, 6, 8, 8, 9, 10], 8], [[1, 1, 2, 1, 2, 2, 2], 6], [[1, 1, 2, 2, 3, 3, 4, 20, 5, 5, 0, 5, 3], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 10, 10, 10, 10, 7, 6, 7], 1], [[1, 2, 1, 2, 6, 2, 2], 6], [[1, 1, 2, 2, 3, 3, 5, 4, 1, 5, 4], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 7, 5, 3], 2], [[1, 2, 3, 4, 5, 6, 7, 70, 9, 10, 10, 10, 10, 10, 7, 6, 10], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 10, 10, 10, 10, 7, 9, 6, 7], 1], [[1, 2, 4, 5, 6, 7, 8, 60, 9, 10, 2], 11], [[1, 2, 3, 4, 5, 6, 50, 7, 70, 9, 10, 10, 10, 10, 10, 7, 6, 10], 1], [[1, 2, 2, 6, 2, 2, 2], 6], [[1, 2, 3, 4, 7, 80, 5, 6, 7, 8, 9, 10], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 6, 12], 10]]
results = [2, 0, 10, 45, 66, 40, 45, 9, 54, 54, 81, 135, 1, 1, 1, 144, 41, 36, 40, 53, 45, 21, 44, 45, 9, 72, 3, 74, 44, 36, 36, 27, 36, 45, 1, 4, 66, 35, 72, 2, 44, 12, 4, 65, 2, 45, 1, 41, 28, 44, 32, 0, 9, 36, 54, 10, 45, 36, 4, 63, 65, 144, 45, 64, 63, 12, 36, 10, 41, 45, 35, 36, 45, 152, 2, 36, 1, 64, 35, 53, 4, 36, 35, 27, 2, 21, 45, 32, 54, 15, 0, 155, 144, 15, 11, 35, 155, 27, 9, 4, 0, 11, 31, 1, 0, 1, 0, 54, 0, 9, 44, 45]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "count_Pairs"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert count_Pairs([1,2,1],3) == 2', 'assert count_Pairs([1,1,1,1],4) == 0', 'assert count_Pairs([1,2,3,4,5],5) == 10']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
