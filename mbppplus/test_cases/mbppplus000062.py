import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]], [[[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]], [[[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]]], [[[], [], []]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [5, 6, 7, 8, 9]]], [[[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[], [], [], []]], [[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6, 3], [3, 4, 5, 6, 3]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [6, 7, 8, 9]]], [[[], []]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4], [2, 15, 4, 5], [2, 15, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5]]], [[[1, 2, 3, 2], [4, 5, 6], [7, 8, 9], [1, 2, 3, 2], [10, 11, 12], [13, 14, 15]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3], [1, 2, 3, 4]]], [[[1, 2, 3, 4, 5], [2, 6, 8, 10], [1, 3, 5, 7, 9]]], [[[], ['pesDUr', 'hHJC', 'tENrXrt', 'dFybnG', 'z', 'UymdT', 'G', 'UbwECYme'], [], []]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 6], [3, 4, 5, 6, 7, 6], [4, 5, 6, 7, 8]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6, 3], [3, 4, 5, 6, 3], [3, 4, 5, 6, 3]]], [[[1, 2, 3, 2], [4, 5, 6], [7, 8, 9], [1, 2, 3, 2], [10, 11, 12], [13, 14, 15], [13, 14, 15]]], [[[1, 2, 2], [4, 5, 6], [6, 7, 8, 9], [1, 2, 2], [10, 11, 12], [13, 14, 15]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10]]], [[[9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [13, 6, 7, 8, 9]]], [[[9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 5, 13, 6, 7, 8, 9], [5, 5, 13, 6, 7, 8, 9], [9, 8, 7, 6, 5], [13, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 4], [2, 15, 4, 5, 4], [2, 15, 4, 5, 4], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5, 4], [2, 15, 4, 5, 4]]], [[[2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4], [2, 15, 4, 5, 4, 4], [2, 15, 4, 5, 4, 4], [2, 15, 4, 5, 4, 4], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5, 4, 4], [2, 15, 4, 5, 4, 4], [4, 5, 6, 7]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 8, 9, 9], [10, 11, 12], [7, 8, 9, 9], [13, 14, 15]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 9], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4], [2, 15, 4, 5], [2, 15, 4, 5], [3, 4, 5, 6], [5, 5, 6, 7], [2, 15, 4, 5]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9, 9], [5, 6, 7, 8, 9, 9], [9, 8, 7, 6, 5], [9, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1]]], [[[9, 2, 3], [4, 5, 6], [8, 9, 9], [10, 11, 12], [8, 9, 9], [8, 9, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5]]], [[[9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 14, 8, 10], [2, 4, 14, 8, 10], [2, 4, 6, 8, 10], [2, 4, 14, 8, 10]]], [[[4, 5, 6, 7, 8, 8], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8, 8]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5]]], [[[1, 2, 3, 4, 5], [4, 5, 6, 7], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 6], [4, 5, 6, 7]]], [[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6]]], [[[13, 15, 14, 15], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 15, 14, 15]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 8, 7, 6], [3, 4, 5, 6, 8, 7, 6], [3, 4, 5, 6, 8, 7, 6], [4, 5, 6, 7, 8]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [4, 3, 4, 5, 6], [4, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10]]], [[[4, 4, 6], [1, 2, 3], [4, 4, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 2, 3, 4, 5], [2, 4, 6, 8, 10]]], [[[1, 2, 3], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1]]], [[[5, 6, 7, 8, 9], [9, 8, 7, 6, 5]]], [[[7, 7, 9, 9], [1, 2, 3, 3], [4, 5, 6], [7, 7, 9, 9], [10, 11, 12], [7, 7, 9, 9], [13, 14, 15]]], [[[1, 2, 3, 2], [4, 5, 6], [7, 8, 9], [1, 2, 3, 2], [10, 1, 11, 12], [13, 14, 15], [1, 2, 3, 2]]], [[[12, 1, 2, 3, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 8, 9, 9], [11, 10, 11, 12], [11, 10, 11, 12], [7, 8, 9, 9], [13, 14, 15]]], [[[2, 15, 4, 5], [2, 15, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5]]], [[[1, 2, 3, 4, 5], [3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [3, 4, 5, 6], [1, 2, 3, 4, 5]]], [[[12, 1, 2, 3, 3], [4, 5, 6], [10, 11, 11, 12], [7, 2, 8, 9]]], [[[1, 2, 3, 4, 5, 1], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[10, 8, 11, 12], [12, 1, 2, 3, 3, 3], [4, 5, 6], [10, 8, 11, 12], [7, 8, 9], [10, 8, 11, 12]]], [[[2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [7, 8, 9]]], [[[10, 8, 7, 6, 5], [9, 8, 7, 6, 4], [5, 6, 7, 8, 9], [10, 8, 7, 6, 5]]], [[[87.07763738802882], [], [], []]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8]]], [[[3, 4, 5, 6, 3], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [2, 4, 8, 10]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9]]], [[[5, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [9, 8, 7, 6, 5]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[7, 8, 13], [1, 2, 3], [4, 5, 6], [7, 8, 13]]], [[[1, 2, 3], [7, 8, 9], [10, 11, 12], [10, 11, 12]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5]]], [[[1, 2, 3, 4, 5], [2, 2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [2, 2, 4, 8, 10]]], [[[9, 8, 4, 7, 6, 5], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [2, 4, 8, 10], [2, 4, 8, 10]]], [[[9, 8, 7, 6, 5, 8], [9, 8, 7, 6, 5, 8], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [9, 8, 7, 6, 5, 8]]], [[[5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [5, 6, 7, 8, 9]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9, 8], [9, 8, 7, 6, 5], [6, 7, 8, 9]]], [[[4, 5, 6], [6, 7, 8, 9], [1, 2, 2], [10, 11, 12], [13, 14, 15], [1, 2, 2]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 4, 5, 7, 9], [1, 4, 5, 7, 9], [2, 4, 8, 10]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 7, 9, 9], [7, 7, 9, 9], [13, 14, 15]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 8, 9]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9, 6], [5, 6, 7, 8, 9, 6]]], [[[4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[13, 15, 14, 15], [1, 2, 3], [4, 5, 6], [7, 13, 8, 9], [7, 13, 8, 9], [10, 11, 12], [13, 15, 14, 15]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [2, 4, 6, 8]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[5, 6, 7, 8, 9, 6], [9, 8, 7, 6, 5]]], [[[10, 8, 11, 2, 12], [12, 1, 4, 3, 3, 3], [4, 5], [12, 1, 4, 3, 3, 3], [10, 8, 11, 2, 12], [7, 8, 9], [10, 8, 11, 2, 12]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 4, 9, 1], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [1, 3, 5, 4, 9, 1]]], [[[1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 6, 7], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 6, 7], [3, 4, 5, 6, 7, 6, 7], [4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 6, 7]]], [[[5, 2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 2, 3, 4, 5], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7], [3, 4, 5, 6], [5, 2, 3, 4, 5], [3, 4, 5, 6]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]]
results = [[18, 12], [5, 23], [4], [], [4, 5], [5, 6, 7, 8, 9], [], [], [4], [], [], [], [], [3, 4], [2, 3, 4], [8, 9, 6, 7], [], [], [], [4], [], [5, 6, 7, 8, 9], [2, 3, 4], [], [], [4, 5], [3, 4], [], [], [], [8, 9, 6, 7], [8, 9, 6, 7], [], [], [4], [2, 4, 6, 8, 10], [], [4], [], [5, 6, 7, 8, 9], [], [4, 5], [8, 9, 6, 7], [4, 5], [2, 4], [], [], [4, 5], [8, 9, 6, 7], [3, 4, 5], [2, 4], [4, 5], [5, 6, 7, 8, 9], [4, 5], [], [4, 5], [], [4, 5], [2, 4], [4, 5], [], [], [4, 5], [], [], [], [], [5, 6, 7, 8, 9], [], [], [], [], [4, 5], [4, 5], [], [], [], [], [], [8, 6, 7], [], [4, 5], [4, 5], [], [5, 6, 7, 8, 9], [], [], [5, 6, 7, 8, 9], [2, 4], [], [], [5, 6, 7, 8, 9], [], [5, 6, 7, 8, 9], [], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9], [8, 9, 6, 7], [], [4], [], [], [5, 6, 7, 8, 9], [], [], [2, 4], [], [5, 6, 7, 8, 9], [], [4], [4, 5], [4, 5], []]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "common_in_nested_lists"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])', 'assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])', 'assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
