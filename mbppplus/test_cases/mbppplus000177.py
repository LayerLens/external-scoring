import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[(10, 20), (15, 2), (5, 10)]], [[(11, 44), (10, 15), (20, 5), (12, 9)]], [[(1000000, 2000000), (5000000, 3000000), (4000000, 6000000)]], [[(0, 0), (0, 0), (0, 0)]], [[(1, 1), (1, 1), (1, 1)]], [[(-1, -1), (-2, -2), (-3, -3)]], [[(1, 2), (3, 4), (5, 6), (7, 8)]], [[(7, 2), (12, 9), (-5, 6), (8, -3), (0, 0)]], [[(10, 20), (30, 40), (50, 60), (70, 80), (90, 100), (110, 120), (130, 140), (150, 160), (170, 180), (190, 200)]], [[(100, 200), (300, 400), (500, 600), (700, 800), (900, 1000), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1900, 2000)]], [[(1000, 2000), (3000, 4000), (5000, 6000), (7000, 8000), (9000, 10000), (11000, 12000), (13000, 14000), (15000, 16000), (17000, 18000), (19000, 20000)]], [[(1000000000, 2000000000), (5000000000, 3000000000), (4000000000, 6000000000)]], [[(100000, 200000), (300000, 400000), (500000, 600000), (700000, 800000), (900000, 1000000)]], [[(100000, 200000), (300000, 400000), (900000, 1000000)]], [[(7, 2), (12, 9), (-5, 6), (8, -3), (0, 0), (-5, 6)]], [[(5000000000, 3000000000), (4000000000, 6000000000), (1000000000, 2000000000)]], [[(7, 2), (12, 9), (-5, 6), (0, 0), (8, -3)]], [[(100000, 200000), (300000, 400000), (500000, 600000), (700000, 800000), (900000, 1000000), (100000, 200000)]], [[(5000000000, 3000000000), (1000000000, 2000000000), (5000000000, 3000000000)]], [[(100000, 200000), (300000, 400000), (500000, 600000), (700000, 800000), (900000, 1000000), (700000, 800000)]], [[(-1, -1), (50, -3), (-2, -2), (-3, -3)]], [[(1, 1), (1, 1), (1, 1), (1, 1)]], [[(100, 200), (300, 400), (500, 600), (700, 800), (900, 1000), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1900, 2000), (1100, 1200)]], [[(5000000000, 3000000000), (5000000001, 3000000000), (1000000000, 2000000000), (5000000000, 3000000000)]], [[(100000, 200000), (300000, 400000), (500000, 600000), (700000, 800000), (900000, 1000000), (700000, 800000), (900000, 1000000)]], [[(10, 20), (50, 60), (70, 80), (90, 100), (110, 120), (150, 160), (170, 180), (190, 200)]], [[(101, 200), (300, 400), (500, 600), (700, 800), (900, 1000), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1100, 1200)]], [[(10, 20), (50, 60), (90, 100), (110, 120), (150, 160), (170, 180), (190, 200), (150, 160)]], [[(101, 200), (300, 400), (500, 600), (700, 800), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1100, 1200)]], [[(5000000000, 3000000000), (1000000000, 2000000000), (5000000000, 3000000000), (5000000000, 3000000000)]], [[(100000, 200000), (500000, 600000), (700000, 800000), (900000, 1000000), (100000, 200000)]], [[(1000000, 2000000), (5000000, 3000000), (4000000, 6000000), (1000000, 2000000)]], [[(100000, 200000), (300000, 400000), (900000, 1000000), (900001, 1000000)]], [[(4000000000, 6000000000), (1000000000, 2000000000), (1000000000, 2000000000)]], [[(100000, 200000), (300000, 400000), (900000, 1000000), (300000, 400000)]], [[(-1, -1), (50, 3000), (50, -3), (-2, -2), (-3, -3)]], [[(3000000000, 3000000), (1000000, 2000000), (5000000, 3000000), (1000000, 2000000)]], [[(10, 20), (50, 60), (70, 80), (90, 100), (110, 120), (150, 160), (171, 180), (190, 200)]], [[(5000000, 100000), (300000, 400000), (900000, 1000000)]], [[(-1, -1), (-2, -2), (-3, -3), (-1, -1)]], [[(300, 400), (500, 600), (700, 800), (900, 1000), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1100, 1200)]], [[(10, 20), (50, 60), (70, 80), (90, 100), (110, 120), (150, 160), (171, 180), (190, 200), (50, 60), (110, 120)]], [[(101, 200), (300, 400), (500, 600), (700, 800), (900, 1000), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1100, 1200), (300, 400)]], [[(10, 20), (50, 60), (70, 80), (90, 100), (10, 60), (110, 120), (150, 160), (171, 180), (190, 200), (50, 60), (110, 120)]], [[(5000000, 100000), (300000, 400000)]], [[(100000, 200000), (300000, 400000), (500000, 600000), (700000, 800000), (900000, 1000000), (700000, 800000), (300000, 400000)]], [[(-1, -1), (50, -3), (-2, -2), (-3, -3), (-2, -2)]], [[(3000000000, 3000000), (5000000, 3000000), (2000, 2000000)]], [[(3000000000, 3000000), (1000000, 2000000), (5000000, 3000000), (1000000, 2000000), (1000000, 2000000)]], [[(10, 20), (50, 60), (70, 80), (90, 100), (110, 120), (150, 160), (171, 180), (190, 200), (70, 80)]], [[(1000, 2000), (3000, 4000), (5000, 6000), (7000, 8000), (9000, 10000), (11000, 12000), (13000, 14000), (15000, 16000), (17000, 18000), (19000, 20000), (7000, 8000)]], [[(101, 200), (300, 400), (500, 600), (700, 800), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1100, 1200), (1500, 1600)]], [[(1, 1), (1, 1)]], [[(100000, 4000000000), (100000, 200000), (300000, 400000), (900000, 1000000), (900001, 1000000)]], [[(10, 20), (50, 60), (70, 80), (90, 100), (110, 120), (150, 160), (170, 180), (190, 200), (110, 120)]], [[(100000, 200000), (300000, 400000), (500000, 600000), (700000, 800000), (900000, 1000000), (100000, 200000), (500000, 600000), (100000, 200000)]], [[(1000000, 2000000), (5000000, 3000000), (4000000, 6000000), (1000000, 2000000), (4000000, 6000000)]], [[(1000000, 2000000), (5000000, 3000000), (4000000, 6000000), (1000000, 2000000), (4000000, 6000000), (4000000, 6000000)]], [[(1, 2), (3, 4), (5, 6)]], [[(1800, 3000000000), (5000000000, 3000000000), (5000000001, 3000000000), (1000000000, 2000000000), (5000000000, 3000000000)]], [[(1, 1)]], [[(3000000000, 3000000), (1000000, 2000000), (5000000, 3000000)]], [[(10, 20), (49, 60), (90, 100), (110, 120), (150, 160), (170, 180), (190, 200), (150, 160), (170, 180)]], [[(5000000000, 3000000000), (5000000001, 3000000000), (1000000000, 2000000000), (5000000000, 3000000000), (5000000000, 3000000000)]], [[(100, 200), (500, 600), (900, 1000), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1900, 2000), (1100, 1200)]], [[(1000000, 2000000), (5000000, 3000000), (1000000, 2000000)]], [[(100000, 200000), (300000, 400000), (500000, 600000), (700000, 800000), (900000, 1000000), (300000, 400000), (900000, 1000000), (900000, 1000000)]], [[(100000, 200000), (300000, 400000), (900000, 1000000), (18000, 200000)]], [[(1, 1), (1, 1), (1, 1), (1, 2), (1, 1)]], [[(101, 200), (300, 400), (500, 600), (700, 800), (900, 1000), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800)]], [[(101, 200), (300, 400), (500, 600), (700, 800), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1100, 1200), (1500, 1600), (1100, 1200)]], [[(10, 20), (50, 60), (70, 80), (90, 100), (110, 120), (150, 160), (171, 180), (50, 60), (110, 120)]], [[(-2, -2), (-3, -3), (-1, -1)]], [[(10, 20), (50, 60), (90, 100), (110, 120), (150, 160), (170, 180), (190, 5), (150, 160)]], [[(-1, -1), (50, -3), (-2, -2), (-3, -3), (-2, -2), (-2, -2)]], [[(100000, 200000), (300000, 8), (900000, 1000000), (18000, 200000)]], [[(7, 2), (-5, 6), (8, -3), (0, 0)]], [[(7, 2), (12, 9), (-5, 6), (8, -3), (0, 0), (8, -3)]], [[(100000, 200000), (500000, 600000), (700000, 800000), (900000, 1000000), (100000, 200000), (100000, 200000)]], [[(101, 200), (300, 400), (500, 600), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1100, 1200)]], [[(5000000, 100000), (300000, 400000), (5000000, 100000)]], [[(100, 200), (300, 400), (700, 800), (900, 1000), (1100, 1200), (1500, 1600), (1700, 1800), (1900, 2000)]], [[(100000, 200000), (300000, 8), (900000, 1000000), (18000, 200000), (300000, 8)]], [[(1000000, 2000000), (5000000, 3000000), (4000000, 6000000), (4000000, 6000000), (1000000, 2000000)]], [[(180, 20), (50, 60), (70, 80), (90, 100), (110, 120), (150, 160), (171, 180), (190, 200), (50, 60), (110, 120)]], [[(100000, 200000), (700000, 800000), (900000, 1000000), (100000, 200000), (100000, 200000)]], [[(1000000, 2000000), (5000000, 3000000)]], [[(101, 200), (300, 400), (500, 600), (1500, 1599), (700, 800), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1100, 1200)]], [[(49, 60), (90, 100), (110, 120), (150, 160), (170, 180), (190, 200), (150, 160), (170, 180)]], [[(100, 200), (300, 400), (500, 600), (700, 800), (900, 1000), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1900, 2000), (1700, 1800), (1500, 1600)]], [[(1000, 2000), (3000, 4000), (5000, 6000), (7000, 8000), (9000, 10000), (11000, 12000), (13000, 14000), (15000, 16000), (19000, 20000)]], [[(5000000001, 3000000000), (1000000000, 2000000000), (5000000000, 3000000000), (5000000001, 3000000000)]], [[(-1, -1), (50, -3), (-2, -2), (-3, -3), (-2, -2), (-2, -2), (-3, -3)]], [[(300000, 400000), (900000, 1000000), (300000, 399999), (300000, 400000)]], [[(5000000, 100000), (300000, 400000), (5000000, 100000), (5000000, 100000)]], [[(100000, 4000000000), (300000, 400000), (900000, 1000000), (900001, 1000000)]], [[(101, 200), (300, 400), (500, 600), (700, 800), (1100, 1200), (1300, 1400), (1500, 1600), (1699, 1800), (1100, 1200), (700, 800)]], [[(1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]], [[(50, 60), (70, 80), (90, 100), (110, 120), (150, 160), (171, 180), (50, 60), (110, 120), (171, 180)]], [[(100000, 200000), (300000, 400000), (500000, 600000), (700000, 800000), (900000, 1000000), (300000, 400000), (900000, 1000000), (900000, 1000000), (900000, 1000000)]], [[(101, 200), (500, 600), (700, 800), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1100, 1200), (1500, 1600)]], [[(101, 200), (500, 600), (1300, 1400), (1500, 1600), (1700, 1800), (1100, 1200)]], [[(101, 200), (300, 401), (700, 800), (1100, 1200), (1300, 1400), (1500, 1600), (1699, 1800), (1100, 1200), (700, 800)]], [[(100000, 200000), (300000, 400000), (500000, 600000), (700000, 800000), (900000, 1000000), (300000, 400000), (900000, 1000000), (900000, 1000000), (900000, 1000000), (900000, 1000000)]], [[(100000, 200000), (300000, 400000), (900000, 1000000), (18000, 200000), (100000, 200000)]], [[(100000, 200000), (300000, 400000), (500000, 600000), (700000, 800000), (900000, 1000000), (700000, 800000), (900000, 1000000), (100000, 200000), (900000, 1000000), (100000, 200000)]], [[(100000, 200000), (300000, 400000), (500000, 600000), (700000, 800000), (900000, 1000000), (700000, 800000), (300000, 400000), (700000, 800000)]], [[(-2, -2), (-3, -3)]], [[(500, 600), (700, 800), (900, 1000), (1100, 1200), (1300, 1400), (1500, 1600), (1700, 1800), (1100, 1200), (1500, 1600), (1700, 1800)]], [[(101, 200), (300, 400), (500, 600), (700, 800), (900, 1000), (1100, 1200), (1300, 1400), (1700, 1800), (1100, 1200)]], [[(7, 2), (8, -3), (-5, 6), (8, -3), (0, 0)]], [[(10, 20), (50, 60), (70, 80), (90, 100), (110, 120), (150, 160), (170, 180), (190, 200), (10, 20)]], [[(10, 20), (50, 60), (70, 80), (90, 100), (110, 120), (150, 160), (170, 180), (110, 120), (110, 120)]]]
results = [8, 30, 100, 2000000000000, 0, 1, 1, 2, -30, 200, 20000, 2000000, 2000000000000000000, 20000000000, 20000000000, -30, 2000000000000000000, -30, 20000000000, 2000000000000000000, 20000000000, -150, 1, 20000, 2000000000000000000, 20000000000, 200, 20200, 200, 20200, 2000000000000000000, 20000000000, 2000000000000, 20000000000, 2000000000000000000, 20000000000, -150, 2000000000000, 200, 120000000000, 1, 120000, 200, 20200, 200, 120000000000, 20000000000, -150, 4000000000, 2000000000000, 200, 2000000, 20200, 1, 20000000000, 200, 20000000000, 2000000000000, 2000000000000, 2, 5400000000000, 1, 2000000000000, 200, 2000000000000000000, 20000, 2000000000000, 20000000000, 3600000000, 1, 20200, 20200, 200, 1, 200, -150, 2400000, -30, -30, 20000000000, 20200, 120000000000, 20000, 2400000, 2000000000000, 3000, 20000000000, 2000000000000, 20200, 2940, 20000, 2000000, 2000000000000000000, -150, 119999700000, 120000000000, 120000000000, 20200, 1, 3000, 20000000000, 20200, 20200, 20200, 20000000000, 3600000000, 20000000000, 20000000000, 4, 300000, 20200, -30, 200, 200]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "min_product_tuple"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8', 'assert min_product_tuple([(10,20), (15,2), (5,10)] )==30', 'assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
