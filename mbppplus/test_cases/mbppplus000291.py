import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 2, 3, 4, 5]], [[4, 5, 6, 7, 8, 0, 1]], [[8, 12, 15, 19]], [[-3, -1, 0, 2, 4, -6, -8]], [[]], [[-10, -8, -6, -4, -2]], [[-3, -1, 0, 2, 4, -6, -8, -10, 2]], [[-3, 0, 2, 4, -6, -8, 0, 0]], [[-3, -1, 2, 4, -6, -8, 0, 0, 2]], [[6]], [[-10, -8, -2, -6, -4, -2]], [[-3, -1, 3, 2, 4, -6, -8, 0, 0, 2]], [[-3, -1, 3, 2, 4, -6, -8, 0, 0, 2, -8]], [[-10, -8, -6, -4, -2, -10]], [[-3, 0, 2, 4, -6, -8, 0, 0, 4]], [[-10, -7, -6, -4, -2, -10]], [[-10, -8, -4, -2, -10]], [[-10, -6, -4, -2, -9]], [[-3, -1, 3, -6, 4, -6, -8, 0, 0, 2, -8]], [[-3, -1, 3, -6, 4, -6, -8, 0, 0, -7, 2, -8]], [[-3, -1, 0, -7, 2, 4, -6, -8]], [[-3, 0, 2, -4, -6, -5, -8, 0, 0, 2, -4]], [[-10, -4, -2, -9]], [[-10, -7, -6, -4, -2, -10, -4]], [[-10, -7, -6, -4, -2, -10, -4, -6]], [[-2, -3, -1, 0, -3, -7, 2, -6, -8]], [[-10, -6, -4, -3, -9]], [[-3, -1, 3, 2, 4, -6, -8, 0, 0, 2, -8, -3]], [[-3, -1, 3, -6, 4, -6, -8, 0, 0, 2, -8, 0, 0]], [[-10, -6, -4, -2, -10]], [[-3, 0, 1, 2, -4, -6, -5, -8, 0, 0, -4]], [[-3, -1, 0, 1, 2, 4, -6, -8, -10, 2, -1]], [[-3, 2, -6, 4, -6, -8, 0, 0, 2, -8, 0, 0]], [[-3, -1, 2, 4, -6, -8, -10, 2]], [[-10, -8, -8, -4, -2]], [[-10, -7, -6, -6, -4, -2, -10, -4]], [[-3, -1, 3, -6, 4, -6, -8, 0, -7, 2, -8]], [[-3, 0, 2, 2, 4, -6, -8, 0, 0, 4]], [[-3, 0, -4, -6, -5, -8, 0, 0, 2, -4]], [[-9, -7, -6, -4, -2, -10, -4]], [[-3, 0, 2, 2, 4, -6, -8, 0, 0, 4, 0]], [[-10, -8, -8, -4, -2, -8]], [[-1, 2, 4, -6, -8, 0, 0, -1, -1]], [[-3, -2, 3, 2, 4, -6, -8, 0, 0, 2, -8, -3, 4]], [[-2, -3, -1, 0, -3, -7, 2, -6, -8, 0]], [[-3, 0, 2, 2, -6, -8, 0, 0, 0]], [[-10, -10, -8, -6, -2, -10, -2]], [[-3, 0, 2, 2, 4, -6, -8, 0, 4]], [[-10, -8, -4, -6, -4, -2]], [[-4, -3, -9]], [[-3, -1, 3, -6, 4, -6, -8, 0, 0, -7, 3, -8]], [[-3, 0, 2, -4, -6, -6, -8, 0, 0, 2, -4]], [[-3, 0, 2, 2, 4, -6, -8, 0]], [[-3, 2, -6, 4, -1, -8, 0, 0, 2, -8, 0, 0]], [[-5, -8, -6, -4, -10]], [[-3, 0, 2, 4, -6, -8, 0, 0, 4, -3]], [[-3, 0, 2, -4, -6, -5, -8, 0, 0, 0, 2, -4]], [[-3, -1, 3, -6, 4, -6, -8, 0, -1, 0, -8]], [[-3, -1, 3, -6, 4, -6, -9, 0, -7, 2, -8]], [[-3, -1, 3, -6, 2, 4, -6, -9, 0, -7, 2, -8]], [[-3, -1, 3, 2, 4, -4, -6, -8, 0, 0, 2, -8]], [[-10, -8, -9, -4, -2, -10]], [[-10, -8, -4, 2, -1, -4, -2]], [[-3, 0, 2, 2, 4, -7, -6, -8, 0, 0, 0]], [[-3, 3, 2, 4, -6, -8, 0, 0, 2, -3]], [[-3, -1, 3, 2, 4, -4, -2, -6, -8, 0, 0, 2, -8]], [[-3, 0, 2, 2, -6, -8, 0, 0, 0, 0, 0, 2]], [[-10, -8, -9, -2, -10]], [[-2, -3, -2, -1, 0, -3, -7, 2, -6, -8, 0]], [[-10, -8, -4, -10, 2, -1, -4, -2]], [[-10, -7, -6, -4, -2, -10, -4, -6, -10]], [[-3, 0, 2, -4, -6, -6, -8, 0, 0, 2, -4, -3]], [[-10, -8, -8, -4, -6, -8]], [[-3, 2, -6, 4, -8, 0, 0, 2, -8, 0, 0]], [[-3, 3, 2, 4, -7, -8, 0, 0, 2, -3]], [[-10, -6, -4, -2]], [[-3, 0, 2, 4, -6, -8, 0]], [[-10, -7, -6, -4, -4, -2, -10, -4]], [[-3, -1, 3, 0, -7, -9, 2, -9, -6, -8]], [[-3, -1, 0, -7, 2, 3, -6, -8]], [[-10, -8, -6, -10, -4, -2, -8]], [[-3, 0, 2, -4, -6, -5, -8, 0, 0, -4, 2, -4]], [[-3, -1, 0, 2, 4, -7, -8]], [[-3, -1, 2, 4, -6, -8, -10, -3, 2]], [[-3, 0, 2, 2, 4, -7, -6, -8, 0, 0, 0, 0]], [[-10, -6, -3, -4, -2, -10]], [[-3, -1, 3, 2, 4, -4, -2, -6, -8, 0, 0, 2, -8, 2]], [[-3, 0, 2, 2, 1, 4, -6, -8, 0, 0, 4, 0, 4, 4, 4]], [[4, -1, 3, 2, 4, -6, -4, -8, 0, 0, 2, -8, -3]], [[-3, -1, 0, 2, -1, 4, -7, -8, -1]], [[-10, -8, -8, -4, -2, -8, -4]], [[-10, -10, -8, -8, -4, -6, -8]], [[-10, -6, -4, -2, -10, -4, -6, -10]], [[-3, -1, 0, 1, 2, 4, -8, -10, 2, -1]], [[-2, -3, -1, 0, -3, 0, -3, -7, 2, -6, -8, 0]], [[-10, -8, -4, 2, -1, -4, -2, -1]], [[-3, -1, 3, -6, 4, -6, -8, 0, 0, -7, 3, -8, 3]], [[-3, -1, -6, 4, -6, -9, 0, -7, 2, -8]], [[-3, -1, 3, 2, 4, -4, -5, -6, -3, -8, 0, 0, 2, -8]], [[-3, 0, 2, -4, -6, -6, -8, 0, 2, -4, -3]], [[-3, 0, 2, 5, -6, -8, 0, 0, 4]], [[-3, 2, -1, 4, -1, -8, 0, 0, 2, -8, 0, 0, -1]], [[-10, -6, -3, -4, -5, -2, -10]], [[-10, -8, -6, -4, -2, 6, -10]], [[-3, 0, 2, 4, -6, -8, 0, 4]], [[-10, -8, -6, -4, 2, -2, 2]]]
results = [[2, 4], [4, 6, 8, 0], [8, 12], [0, 2, 4, -6, -8], [], [-10, -8, -6, -4, -2], [0, 2, 4, -6, -8, -10, 2], [0, 2, 4, -6, -8, 0, 0], [2, 4, -6, -8, 0, 0, 2], [6], [-10, -8, -2, -6, -4, -2], [2, 4, -6, -8, 0, 0, 2], [2, 4, -6, -8, 0, 0, 2, -8], [-10, -8, -6, -4, -2, -10], [0, 2, 4, -6, -8, 0, 0, 4], [-10, -6, -4, -2, -10], [-10, -8, -4, -2, -10], [-10, -6, -4, -2], [-6, 4, -6, -8, 0, 0, 2, -8], [-6, 4, -6, -8, 0, 0, 2, -8], [0, 2, 4, -6, -8], [0, 2, -4, -6, -8, 0, 0, 2, -4], [-10, -4, -2], [-10, -6, -4, -2, -10, -4], [-10, -6, -4, -2, -10, -4, -6], [-2, 0, 2, -6, -8], [-10, -6, -4], [2, 4, -6, -8, 0, 0, 2, -8], [-6, 4, -6, -8, 0, 0, 2, -8, 0, 0], [-10, -6, -4, -2, -10], [0, 2, -4, -6, -8, 0, 0, -4], [0, 2, 4, -6, -8, -10, 2], [2, -6, 4, -6, -8, 0, 0, 2, -8, 0, 0], [2, 4, -6, -8, -10, 2], [-10, -8, -8, -4, -2], [-10, -6, -6, -4, -2, -10, -4], [-6, 4, -6, -8, 0, 2, -8], [0, 2, 2, 4, -6, -8, 0, 0, 4], [0, -4, -6, -8, 0, 0, 2, -4], [-6, -4, -2, -10, -4], [0, 2, 2, 4, -6, -8, 0, 0, 4, 0], [-10, -8, -8, -4, -2, -8], [2, 4, -6, -8, 0, 0], [-2, 2, 4, -6, -8, 0, 0, 2, -8, 4], [-2, 0, 2, -6, -8, 0], [0, 2, 2, -6, -8, 0, 0, 0], [-10, -10, -8, -6, -2, -10, -2], [0, 2, 2, 4, -6, -8, 0, 4], [-10, -8, -4, -6, -4, -2], [-4], [-6, 4, -6, -8, 0, 0, -8], [0, 2, -4, -6, -6, -8, 0, 0, 2, -4], [0, 2, 2, 4, -6, -8, 0], [2, -6, 4, -8, 0, 0, 2, -8, 0, 0], [-8, -6, -4, -10], [0, 2, 4, -6, -8, 0, 0, 4], [0, 2, -4, -6, -8, 0, 0, 0, 2, -4], [-6, 4, -6, -8, 0, 0, -8], [-6, 4, -6, 0, 2, -8], [-6, 2, 4, -6, 0, 2, -8], [2, 4, -4, -6, -8, 0, 0, 2, -8], [-10, -8, -4, -2, -10], [-10, -8, -4, 2, -4, -2], [0, 2, 2, 4, -6, -8, 0, 0, 0], [2, 4, -6, -8, 0, 0, 2], [2, 4, -4, -2, -6, -8, 0, 0, 2, -8], [0, 2, 2, -6, -8, 0, 0, 0, 0, 0, 2], [-10, -8, -2, -10], [-2, -2, 0, 2, -6, -8, 0], [-10, -8, -4, -10, 2, -4, -2], [-10, -6, -4, -2, -10, -4, -6, -10], [0, 2, -4, -6, -6, -8, 0, 0, 2, -4], [-10, -8, -8, -4, -6, -8], [2, -6, 4, -8, 0, 0, 2, -8, 0, 0], [2, 4, -8, 0, 0, 2], [-10, -6, -4, -2], [0, 2, 4, -6, -8, 0], [-10, -6, -4, -4, -2, -10, -4], [0, 2, -6, -8], [0, 2, -6, -8], [-10, -8, -6, -10, -4, -2, -8], [0, 2, -4, -6, -8, 0, 0, -4, 2, -4], [0, 2, 4, -8], [2, 4, -6, -8, -10, 2], [0, 2, 2, 4, -6, -8, 0, 0, 0, 0], [-10, -6, -4, -2, -10], [2, 4, -4, -2, -6, -8, 0, 0, 2, -8, 2], [0, 2, 2, 4, -6, -8, 0, 0, 4, 0, 4, 4, 4], [4, 2, 4, -6, -4, -8, 0, 0, 2, -8], [0, 2, 4, -8], [-10, -8, -8, -4, -2, -8, -4], [-10, -10, -8, -8, -4, -6, -8], [-10, -6, -4, -2, -10, -4, -6, -10], [0, 2, 4, -8, -10, 2], [-2, 0, 0, 2, -6, -8, 0], [-10, -8, -4, 2, -4, -2], [-6, 4, -6, -8, 0, 0, -8], [-6, 4, -6, 0, 2, -8], [2, 4, -4, -6, -8, 0, 0, 2, -8], [0, 2, -4, -6, -6, -8, 0, 2, -4], [0, 2, -6, -8, 0, 0, 4], [2, 4, -8, 0, 0, 2, -8, 0, 0], [-10, -6, -4, -2, -10], [-10, -8, -6, -4, -2, 6, -10], [0, 2, 4, -6, -8, 0, 4], [-10, -8, -6, -4, 2, -2, 2]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "Split"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert Split([1,2,3,4,5]) == [2,4]', 'assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]', 'assert Split ([8,12,15,19]) == [8,12]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
