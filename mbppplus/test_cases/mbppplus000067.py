import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[(10, 20), (15, 2), (5, 10)]], [[(11, 44), (10, 15), (20, 5), (12, 9)]], [[(-10, 20), (15, -2), (-5, 10)]], [[(1000000, 500000), (2000000, 1000000), (3000000, 1500000)]], [[(1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1)]], [[(-10, 0), (0, 5)]], [[(-100, 100), (0, 10)]], [[(0, -100), (0, 100)]], [[(-1000000, 1000000), (0, 100000)]], [[(1, 0), (-0.5, 0.5), (2, -2)]], [[(0.1, 0.1), (0.5, -0.5), (0.2, 0.2)]], [[(-9999999, 9999999), (1e-06, 1000000)]], [[(1000000, -1000000000), (-1000000000, 1000000)]], [[(-1000000, -1000000), (-999, 0)]], [[(0, 0)]], [[(-1000000, 1000000), (0, 99999)]], [[(-10, 20), (15, -2)]], [[(0.5, -0.5), (0.2, 0.2)]], [[(1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1)]], [[(1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000000, 1000000), (-1000000000, 1000000)]], [[(-1000001, -1000000), (0, 100000)]], [[(-999, 0)]], [[(1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1)]], [[(-10, 20), (15, -2), (-5, 9), (-5, 10)]], [[(0.5, -0.5), (0.2, 0.2), (0.5, -0.5)]], [[(10, -1000000)]], [[(1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1)]], [[(-10, 20)]], [[(0.1, 0.1), (0.5, 0.1), (0.2, 0.2)]], [[(-10, 0), (0, 100000)]], [[(-10, 20), (100000, -2)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000000, 1000000)]], [[(3000000, 1500000)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000000, 1000000), (-1000000000, 1000000), (1000000, -1000000000)]], [[(-10, 20), (-10, 20)]], [[(-10, 20), (15, -2), (15, -2)]], [[(-9, 20)]], [[(-100, 100), (0, 10), (0, 10)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000001, 1000000), (-1000000000, 1000000), (1000000, -1000000000)]], [[(0.5, -0.5), (0.2, 0.2), (0.5, -0.5), (0.2, 0.2)]], [[(-100, 100)]], [[(0.1, 0.1), (0.5, 0.1), (0.2, 0.2), (0.1, 0.1)]], [[(-999, 0), (-999, 0)]], [[(10, -1000001)]], [[(-1000000000, 1000000)]], [[(-10, 20), (15, -2), (-5, 9), (-5, 10), (-5, 9)]], [[(-2, 0), (0, 5)]], [[(-1000000000, 1000000), (-1000000000, 1000000)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000000, 1000000), (1000000, -1000000000), (1000000, -1000000000)]], [[(-10, 20), (100000, -2), (-10, 20)]], [[(0.1, 0.1), (0.5, -0.5), (0.1, 0.1), (0.1, 0.1)]], [[(0, -101), (0, -100), (0, 100), (0, -100), (0, 100)]], [[(1000000, -1000000000), (9999999, -1000000000), (-1000000000, 1000000), (-1000000000, 1000000), (-1000000000, 1000000), (1000000, -1000000000)]], [[(-10, 20), (15, -2), (-5, 9), (-5, 10), (-5, 9), (-5, 9)]], [[(0, 100000), (0, 100000)]], [[(1000000, 9999999), (1000000, 500000), (2000000, 1000000), (3000000, 1500000), (3000000, 1500000)]], [[(-10, 20), (15, -2), (-5, 9)]], [[(15, -2), (-5, 9), (-5, 10), (-5, 9), (-5, 9)]], [[(-10, 20), (-10, 20), (-10, 20)]], [[(1000000, -1000000000)]], [[(1000000, -1000000000), (-1000000000, 1000000), (3000000, 1000000), (-1000000000, 1000000), (-1000000000, 1000000), (1000000, -1000000000)]], [[(-1000000000, 1000000), (-1000000000, 1000000), (-1000000000, 1000000)]], [[(1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, 0), (1, -1), (1, -1)]], [[(15, -2), (-5, 9)]], [[(0.1, 0.1), (0.5, 0.1), (0.2, 0.2), (0.1, 0.1), (0.5, 0.1)]], [[(0.2, 0.2), (0.2, 0.2)]], [[(0.1, 0.1), (0.5, 0.1), (0.1, 0.14655870166177412), (0.2, 0.2)]], [[(0, 100000)]], [[(0.1, 0.1), (0.2, 0.2), (0.1, 0.1), (0.2, 0.2)]], [[(0.1, 0.1), (0.2, 0.2), (0.1, 0.1), (0.2, 0.2), (0.1, 0.1)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000001, 1000000), (-1000000000, 1000000), (1000000, -1000000000), (-1000000001, 1000000)]], [[(0.5, -0.5)]], [[(1, 0), (-0.5, 0.5), (2, -2), (2, -2)]], [[(1000000, 500000), (2000000, 1000000), (3000000, 1500000), (2000000, 1000000)]], [[(0.2, 0.2)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000001, 1000000), (-1000000000, 1000000), (1000000, -1000000000), (-1000000001, 1000000), (-1000000001, 1000000)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000000, 1000000), (-1000000000, 1000000), (1000000, -999), (1000000, -1000000000)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000001, 1000000), (-1000000000, 1000000), (1000000, -1000000000), (1000000, -1000000000)]], [[(0.1, 0.1), (0.5, -0.5), (0.1, 0.1), (0.1, 0.1), (0.5, -0.5)]], [[(0.1, 0.1), (0.5, 1e-06), (0.5, -0.5), (0.1, 0.1), (0.1, 0.1), (0.5, -0.5)]], [[(-2, 0), (0, 5), (0, 5)]], [[(1000000, -1000000000), (9999999, -1000000000), (-1000000000, 1000000), (-1000000000, 1000000), (9999999, 10), (-1000000000, 1000000), (1000000, -1000000000)]], [[(-10, 0), (-10, 0)]], [[(1000000, -1000000000), (-1000000000, 1000000), (3000000, 1000000), (-1000000000, 1000000), (-1000000000, 1000000), (1000000, -1000000000), (1000000, -1000000000)]], [[(0.14228615811571196, 0.1), (0.5, 0.1), (0.2, 0.2)]], [[(10, -1000000), (10, -1000000)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000000, 999999), (-1000000001, 1000000), (-1000000000, 1000000), (1000000, -1000000000)]], [[(-1000000, 1000000), (0, 99999), (-1000000, 1000000)]], [[(-1000000000, 1000000), (-1000000000, 1000000), (-1000000000, 1000000), (-1000000000, 1000000)]], [[(0.2, 0.2), (0.2, 0.2), (0.2, 0.2), (0.2, 0.2)]], [[(-10, 20), (15, -2), (14, -2)]], [[(0, 10), (-100, 100), (0, 10), (0, 10)]], [[(0.1, 0.1), (0.5, -0.5), (0.1, 0.1), (0.1, 0.1), (0.5, -0.5), (0.1, 0.1)]], [[(1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1)]], [[(-10, 20), (15, -2), (-5, 9), (-5, 9)]], [[(100000, -2), (-10, 20)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000000, 0)]], [[(0, 99999), (-1000000, 1000000)]], [[(1000000, -1000000000), (-1000000000, 1000000), (1000000, -999999999), (-1000000000, 0)]], [[(0.14228615811571196, 0.1), (0.5, 0.1), (0.2, 0.2), (0.14228615811571196, 0.1)]], [[(0.2, 0.2), (0.1, 0.1), (0.2, 0.2)]], [[(1000000, -1000000000), (-1000000000, 1000000), (-1000000000, 1000000), (1000000, -999), (1000000, -1000000000)]], [[(100000, -2), (-10, 3000000), (100000, -2)]], [[(0.2, 0.2), (0.2, 0.2), (0.2, 0.2)]], [[(15, -2), (-5, 9), (-5, 10), (-5, 9), (-5, 9), (15, -2)]], [[(15, -2), (-5, 9), (-5, 10), (-5, 9), (-5, 9), (15, -2), (-5, 9)]], [[(1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1)]], [[(100000, -2), (-10, 3000000), (100000, -2), (100000, -2)]], [[(0.1, 0.1), (0.1, 0.1), (0.2, 0.2)]], [[(-999, 0), (-999, 0), (-999, 0)]], [[(0.1, 0.1), (0.5, -0.5), (0.1, 0.1)]], [[(-1000000000, 1000000), (3000000, 1000000), (-1000000000, 1000000), (-1000000000, 1000000), (1000000, -1000000000), (1000000, -1000000000), (-1000000000, 1000000)]], [[(0.1, 0.1), (0.2, 0.2), (0.1, 0.1), (0.2, 0.2), (0.1, 0.1), (0.2, 0.2)]], [[(-10, 20), (15, -2), (-10, 21), (15, -2)]]]
results = [36, 200, 484, 200, 4500000000000, 1, 0, 10000, 0, 1000000000000, 4, 0.25, 99999980000001, 1000000000000000, 1000000000000, 0, 1000000000000, 200, 0.25, 1, 1, 1000000000000000, 1000001000000, 0, 1, 200, 0.25, 10000000, 1, 200, 0.05, 0, 200000, 1000000000000000, 4500000000000, 1000000000000000, 200, 200, 180, 10000, 1000000001000000, 0.25, 10000, 0.05, 0, 10000010, 1000000000000000, 200, 0, 1000000000000000, 1000000000000000, 200000, 0.25, 0, 9999999000000000, 200, 0, 9999999000000, 200, 50, 200, 1000000000000000, 1000000000000000, 1000000000000000, 1, 45, 0.05, 0.04000000000000001, 0.05, 0, 0.04000000000000001, 0.04000000000000001, 1000000001000000, 0.25, 4, 4500000000000, 0.04000000000000001, 1000000001000000, 1000000000000000, 1000000001000000, 0.25, 0.25, 0, 9999999000000000, 0, 1000000000000000, 0.05, 10000000, 1000000001000000, 1000000000000, 1000000000000000, 0.04000000000000001, 200, 10000, 0.25, 1, 200, 200000, 1000000000000000, 1000000000000, 1000000000000000, 0.05, 0.04000000000000001, 1000000000000000, 30000000, 0.04000000000000001, 50, 50, 1, 30000000, 0.04000000000000001, 0, 0.25, 1000000000000000, 0.04000000000000001, 210]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "max_product_tuple"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36', 'assert max_product_tuple([(10,20), (15,2), (5,10)] )==200', 'assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
