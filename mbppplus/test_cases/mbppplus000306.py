import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]], [[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]], [[2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2]], [[0, 1, 1, 2], [0, 1, 2, 2]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1]], [[3, 7, 8, 2, 5, 1, 9, 4, 6], [6, 4, 9, 1, 5, 2, 8, 7, 3]], [[10, 20, 30, 40, 50, 60, 70], [70, 60, 50, 40, 30, 20, 10]], [[100, 200, 300, 400, 500], [500, 400, 300, 200, 100]], [[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]], [[], []], [[-1, 0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9], [-1, 0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [10, 20, 30, 40, 50, 70, 80, 90, 100, 110]], [[1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]], [[1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25], [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25]], [[1, 3, 2, 7, 9], [1, 3, 2, 7, 9]], [[2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25], [2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25]], [[1, 3, 2, 8, 7, 9], [1, 3, 2, 8, 7, 9]], [[70, 60, 50, 40, 1, 30, 20, 10, 1], [70, 60, 50, 40, 1, 30, 20, 10, 1]], [[1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25], [1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15]], [[1, 3, 2, 8, 7, 9, 8, 7], [1, 3, 2, 8, 7, 9, 8, 7]], [[1, 3, 2, 16, 2, 7, 9], [1, 3, 2, 16, 2, 7, 9]], [[1, 3, 2, 16, 2, 7, 9, 2], [1, 3, 2, 16, 2, 7, 9, 2]], [[-1, 0, 1, 2, 2, 3, 4, 5, 6, 80, 8, 9], [-1, 0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9]], [[6, 4, 9, 1, 5, 2, 7, 2], [6, 4, 9, 1, 5, 2, 7, 2]], [[1, 3, 2, 8, 7, 9, 9], [1, 3, 2, 8, 7, 9, 9]], [[1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 18, 20, 22, 23, 24, 22, 25], [1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 18, 20, 22, 23, 24, 22, 25]], [[10, 23, 30, 40, 50, 60, 70, 80, 90, 25], [10, 20, 30, 40, 50, 70, 80, 90, 100, 110]], [[2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 23], [2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 23]], [[1, 3, 2, 16, 2, 7, 9, 9], [1, 3, 2, 16, 2, 7, 9, 9]], [[1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 23, 23, 24, 25, 25], [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 23, 23, 24, 25, 25]], [[1, 3, 2, 8, 7, 9, 9, 3], [1, 3, 2, 8, 7, 9, 9, 3]], [[1, 3, 2, 16, 7, 9], [1, 3, 2, 16, 7, 9]], [[1, 2, 8, 7, 9, 8, 7], [1, 2, 8, 7, 9, 8, 7]], [[2, 23, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24], [2, 23, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24]], [[1, 2, 3, 4, 5, 16, 17, 17, 19, 20, 21, 22, 23, 24, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[3, 7, 8, 2, 5, 1, 9, 4, 6], [3, 7, 8, 2, 5, 1, 9, 4, 6]], [[1, 25, 2, 10, 3, 4, 5, 16, 23, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25], [1, 25, 2, 10, 3, 4, 5, 16, 23, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25]], [[1, 2, 3, 5, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 400, 11, 12, 13, 14, 15]], [[3, 7, 2, 5, 1, 9, 4, 6], [3, 7, 2, 5, 1, 9, 4, 6]], [[10, 20, 40, 50, 70, 80, 90, 7, 110], [10, 20, 40, 50, 70, 80, 90, 7, 110]], [[1, 8, 7, 9, 8, 7, 7], [1, 8, 7, 9, 8, 7, 7]], [[1, 1, 2, 8, 7, 9, 9, 3], [1, 1, 2, 8, 7, 9, 9, 3]], [[1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25], [1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25]], [[10, 20, 50, 70, 79, 90, 7, 110], [10, 20, 50, 70, 79, 90, 7, 110]], [[14, 3, 8, 7, 9, 9, 3, 9], [14, 3, 8, 7, 9, 9, 3, 9]], [[1, 3, 8, 7, 9, 9], [1, 3, 8, 7, 9, 9]], [[1, 25, 2, 10, 1, 3, 4, 4, 16, 17, 18, 18, 20, 22, 23, 24, 22], [1, 25, 2, 10, 1, 3, 4, 4, 16, 17, 18, 18, 20, 22, 23, 24, 22]], [[1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 21], [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 21]], [[1, 3, 5, 7, 9, 7], [1, 3, 5, 7, 9, 7]], [[10, 89, 20, 50, 70, 79, 90, 7, 110, 10], [10, 89, 20, 50, 70, 79, 90, 7, 110, 10]], [[24, 3, 7, 8, 2, 5, 1, 9, 4, 6, 5], [24, 3, 7, 8, 2, 5, 1, 9, 4, 6, 5]], [[1, 3, 20, 8, 7, 9, 9], [1, 3, 20, 8, 7, 9, 9]], [[1, 3, 9, -1, 7, 9, 9], [1, 3, 9, -1, 7, 9, 9]], [[1, 2, 2, 8, 7, 9, 9, 3], [1, 2, 2, 8, 7, 9, 9, 3]], [[80, 1, 3, 2, 16, 2, 7, 9], [80, 1, 3, 2, 16, 2, 7, 9]], [[6, 4, 9, 2, 8, 7, 3], [6, 4, 9, 2, 8, 7, 3]], [[3, 8, 7, 9, 9], [3, 8, 7, 9, 9]], [[1, 3, 500, 8, 7, 499, 9, 9], [1, 3, 500, 8, 7, 499, 9, 9]], [[1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 16], [1, 25, 2, 10, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 16]], [[1, 2, 3, 4, 5, 16, 18, 19, 20, 21, 22, 23, 24, 25, 25], [1, 2, 3, 4, 5, 16, 18, 19, 20, 21, 22, 23, 24, 25, 25]], [[1, 3, 2, 7, 4, 9], [1, 3, 2, 7, 4, 9]], [[1, 3, 9, -1, 7, 9, 9, 3], [1, 3, 9, -1, 7, 9, 9, 3]], [[1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 22], [1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 22]], [[2, 23, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24, 23], [2, 23, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24, 23]], [[10, 89, 20, 50, 70, 79, 90, 7, 110, 10, 50], [10, 89, 20, 50, 70, 79, 90, 7, 110, 10, 50]], [[1, 7, 3, 20, 8, 7, 9, 9], [1, 7, 3, 20, 8, 7, 9, 9]], [[2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [2, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]], [[1, 3, 20, 90, 8, 7, 9, 9, 7], [1, 3, 20, 90, 8, 7, 9, 9, 7]], [[24, 3, 7, 8, 2, 5, 1, 9, 4, 6, 3], [24, 3, 7, 8, 2, 5, 1, 9, 4, 6, 3]], [[1, 10, 7, 9, 8, 7, 7, 1], [1, 10, 7, 9, 8, 7, 7, 1]], [[1, 2, 3, 4, 5, 17, 18, 19, 20, 21, 22, 24, 25, 25, 21], [1, 2, 3, 4, 5, 17, 18, 19, 20, 21, 22, 24, 25, 25, 21]], [[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 10], [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 10]], [[200, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 22], [200, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 22]], [[70, 60, 50, 40, 1, 30, 20, 10, 1, 50], [70, 60, 50, 40, 1, 30, 20, 10, 1, 50]], [[1, 3, 2, 14, 16, 2, 79, 9], [1, 3, 2, 14, 16, 2, 79, 9]], [[10, 89, 20, 17, 70, 79, 90, 7, 110, 10, 50], [10, 89, 20, 17, 70, 79, 90, 7, 110, 10, 50]], [[1, 2, 3, 4, 5, 16, 18, 19, 20, 21, 22, 23, 24, 25, 25, 5], [1, 2, 3, 4, 5, 16, 18, 19, 20, 21, 22, 23, 24, 25, 25, 5]], [[70, 100, 50, 40, 1, 30, 20, 10, 1, 10], [70, 100, 50, 40, 1, 30, 20, 10, 1, 10]], [[6, 4, 9, 1, 5, 2, 13, 7, 2], [6, 4, 9, 1, 5, 2, 13, 7, 2]], [[80, 1, 3, 2, 16, 2, 9], [80, 1, 3, 2, 16, 2, 9]], [[1, 8, 7, 9, 8, 7, 8], [1, 8, 7, 9, 8, 7, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15]], [[1, 3, 20, 90, 8, 7, 9, 9, 7, 90], [1, 3, 20, 90, 8, 7, 9, 9, 7, 90]], [[1, 2, 2, 4, 5, 16, 17, 17, 19, 20, 21, 22, 23, 24, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[24, 3, 7, 8, 2, 6, 1, 9, 4, 6, 3], [24, 3, 7, 8, 2, 6, 1, 9, 4, 6, 3]], [[1, 25, 2, 10, 1, -1, 4, 4, 16, 18, 18, 20, 22, 23, 23, 22], [1, 25, 2, 10, 1, -1, 4, 4, 16, 18, 18, 20, 22, 23, 23, 22]], [[1, 3, 2, 16, 2, 17, 7, 9], [1, 3, 2, 16, 2, 17, 7, 9]], [[1, 3, 9, -1, 7, 9, 3], [1, 3, 9, -1, 7, 9, 3]], [[9, 23, 30, 40, 499, 50, 60, 70, 80, 90], [9, 23, 30, 40, 499, 50, 60, 70, 80, 90]], [[14, 3, 7, 9, 9, 3, 9], [14, 3, 7, 9, 9, 3, 9]], [[1, 2, 3, 4, 5, 16, 17, 18, 19, 21, 22, 23, 24, 25, 25, 4], [1, 2, 3, 4, 5, 16, 17, 18, 19, 21, 22, 23, 24, 25, 25, 4]], [[3, 2, 7, 50, 9], [3, 2, 7, 50, 9]], [[3, 5, 7, 9, 7], [3, 5, 7, 9, 7]], [[2, 23, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24, 23], [2, 23, 4, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 24, 23]], [[10, 89, 20, 50, 70, 79, 90, 69, 7, 110, 10], [10, 89, 20, 50, 70, 79, 90, 69, 7, 110, 10]], [[100, 200, 300, 400, 500], [100, 200, 300, 400, 500]], [[1, 3, 2, 16, 2, 17, 7, 9, 2], [1, 3, 2, 16, 2, 17, 7, 9, 2]], [[3, 9, 7, 9, 9], [3, 9, 7, 9, 9]], [[14, 3, 9, 7, 9, 3, 9], [14, 3, 9, 7, 9, 3, 9]], [[80, 2, 3, 2, 16, 2, 7, 9], [80, 2, 3, 2, 16, 2, 7, 9]], [[6, 4, 9, 2, 8, 7, 3, 3], [6, 4, 9, 2, 8, 7, 3, 3]], [[1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 24, 22, 23, 23, 11, 24, 25, 22], [1, 25, 2, 10, 4, 5, 16, 17, 18, 19, 20, 21, 24, 22, 23, 23, 11, 24, 25, 22]], [[1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 23, 23, 24, 25, 25, 25], [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 23, 23, 24, 25, 25, 25]], [[24, 3, 7, 8, 2, 3, 5, 1, 9, 4, 6, 5, 6], [24, 3, 7, 8, 2, 3, 5, 1, 9, 4, 6, 5, 6]], [[1, 3, 500, 8, 7, 499, 9, 9, 500], [1, 3, 500, 8, 7, 499, 9, 9, 500]], [[1, 8, 7, 9, 8, 7, 8, 7], [1, 8, 7, 9, 8, 7, 8, 7]], [[19, 1, 3, 20, 90, 8, 89, 7, 9, 9, 7, 90], [19, 1, 3, 20, 90, 8, 89, 7, 9, 9, 7, 90]], [[80, 1, 3, 2, 16, 2, 9, 9], [80, 1, 3, 2, 16, 2, 9, 9]], [[6, 4, 9, 1, 5, 12, 0, 7, 2], [6, 4, 9, 1, 5, 12, 0, 7, 2]], [[80, 1, 3, 1, 16, 2, 9, 9, 9], [80, 1, 3, 1, 16, 2, 9, 9, 9]], [[3, 7, 25, 8, 2, 5, 1, 9, 4], [3, 7, 25, 8, 2, 5, 1, 9, 4]]]
results = [4, 11, 1, 3, 1, 1, 1, 1, 0, 0, 12, 5, 5, 17, 16, 5, 16, 6, 9, 18, 14, 8, 7, 8, 11, 8, 7, 17, 4, 17, 8, 16, 8, 6, 7, 17, 5, 9, 19, 4, 8, 9, 7, 8, 17, 8, 8, 6, 17, 17, 6, 10, 11, 7, 7, 8, 8, 7, 5, 8, 18, 15, 6, 8, 18, 18, 11, 8, 15, 9, 11, 8, 15, 13, 18, 10, 8, 11, 16, 10, 9, 7, 7, 13, 10, 4, 11, 16, 8, 7, 10, 7, 16, 5, 5, 17, 11, 5, 9, 5, 7, 8, 8, 20, 17, 13, 9, 8, 12, 8, 9, 9, 9]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "count_same_pair"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4', 'assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11', 'assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1', 'assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
