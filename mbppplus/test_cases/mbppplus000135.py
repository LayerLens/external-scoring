import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[(10, 4, 5), (2, 5, 18)], [(11, 2, 3), (24, 45, 16)], [(7, 18, 9), (10, 11, 12)], [(1000000000000, 2000000000000), (900000000000, 3000000000000)], [(999999999999, 555555555555), (123456789012, 987654321098)], [(999999999999999999, 1000000000000000000), (1000000000000000000, 999999999999999999)], [(1000000000000000000, 999999999999999999), (1000000000000000000, 999999999999999999)], [(1000000000000000000, 999999999999999999), (999999999999999999, 999999999999999999)], [(987654321098, 2000000000000), (900000000000, 3000000000000)], [(123456789012, 987654321098, 123456789012), (123456789012, 987654321098, 123456789012)], [(999999999999, 555555555555), (999999999999, 555555555555)], [(1000000000000, 2000000000000), (1000000000000, 2000000000000)], [(987654321098, 999999999999), (900000000000, 3000000000000)], [(999999999999999999, 999999999999999999), (999999999999999999, 999999999999999999)], [(999999999999999999, 1000000000000000000), (999999999999999999, 999999999999999999)], [(900000000000, 3000000000000, 3000000000000), (900000000000, 3000000000000, 3000000000000)], [(999999999999999999, 999999999999999999), (1000000000000000000, 999999999999999999)], [(999999999999, 555555555555), (1000000000000, 555555555555)], [(900000000000, 3000000000000), (900000000000, 3000000000000)], [(555555555555, 999999999999999999), (999999999999999999, 999999999999999999)], [(987654321098, 999999999999), (987654321098, 999999999999)], [(123456789012, 555555555555, 123456789012), (123456789012, 987654321098, 123456789012)], [(555555555555, 123456789012, 987654321098), (123456789012, 987654321098, 987654321098)], [(555555555555, 123456789012, 987654321098), (3000000000000, 987654321098, 987654321098)], [(999999999999999999, 1000000000000, 999999999999999999), (999999999999999998, 999999999999999999, 999999999999999999)], [(999999999999999999, 1000000000000000000), (999999999999999999, 999999999999)], [(123456789012, 987654321098, 123456789011), (123456789012, 987654321098, 123456789012)], [(123456789012, 987654321098, 123456789012, 123456789012), (123456789012, 987654321098, 123456789012, 123456789012)], [(999999999999999999, 999999999999999999), (1000000000000, 999999999999999999)], [(1000000000000, 900000000001, 3000000000000, 3000000000000), (900000000000, 900000000001, 3000000000000, 3000000000000)], [(555555555555, 999999999999, 987654321098), (3000000000000, 987654321098, 987654321098)], [(1000000000000000000, 999999999999999999), (1000000000000000000, 1000000000000000000)], [(555555555555, 999999999999999999), (555555555555, 999999999999999999)], [(987654321098,), (987654321098,)], [(1000000000000, 2000000000000, 2000000000000), (1000000000000, 2000000000000, 2000000000000)], [(999999999999, 555555555554), (999999999999, 555555555555)], [(555555555554, 3000000000000, 987654321098, 987654321098, 987654321098), (555555555554, 3000000000000, 987654321098, 987654321098, 987654321098)], [(555555555554, 3000000000000, 987654321098, 987654321098, 987654321097), (555555555554, 3000000000000, 987654321098, 987654321098, 987654321098)], [(999999999999,), (555555555555,)], [(555555555555, 123456789012, 987654321098), (555555555555, 123456789012, 987654321098)], [(555555555554, 3000000000000, 1000000000000, 987654321098, 987654321098), (555555555554, 3000000000000, 987654321098, 987654321098, 987654321098)], [(987654321098,), (900000000000,)], [(987654321098, 987654321098), (987654321098, 987654321098)], [(900000000000, 3000000000000), (987654321098, 999999999999)], [(999999999999, 123456789011), (1000000000000, 555555555555)], [(123456789012, 999999999999999999, 999999999999), (123456789012, 999999999999999999, 999999999999)], [(3000000000000, 987654321098, 987654321098), (3000000000000, 987654321098, 987654321098)], [(123456789012, 987654321098, 123456789012, 987654321098), (123456789012, 987654321098, 123456789012, 987654321098)], [(900000000000, 2999999999999), (900000000000, 2999999999999)], [(1000000000000, 555555555555), (1000000000000, 999999999999999999)], [(999999999999, 123456789011), (999999999999, 123456789011)], [(999999999999999999, 1000000000000000000), (999999999999999999, 1000000000000000000)], [(1000000000000000000, 999999999999999999, 1000000000000000000), (999999999999999999, 999999999999999999, 999999999999999999)], [(987654321098, 2000000000000), (899999999999, 3000000000000)], [(555555555555,), (555555555555,)], [(987654321098, 987654321097, 2000000000000), (987654321098, 987654321097, 2000000000000)], [(999999999999,), (999999999999,)], [(1000000000000, 555555555555), (1000000000000, 555555555555)], [(999999999999, 555555555555), (999999999999, 123456789011)], [(1000000000000000000, 900000000001, 1000000000000000000), (1000000000000000000, 900000000001, 1000000000000000000)], [(1000000000000, 900000000001, 3000000000000, 3000000000000), (900000000000, 900000000001, 899999999999, 3000000000000)], [(1000000000000, 999999999999999999, 1000000000000), (1000000000000000000, 999999999999999999, 999999999999999999)], [(999999999998, 555555555555), (987654321099, 987654321098)], [(123456789012, 999999999999999999, 123456789011, 999999999999), (123456789012, 999999999999999999, 123456789011, 999999999999)], [(999999999999999998, 999999999999), (987654321098, 999999999999)], [(999999999999999999, 1000000000000, 999999999999999999), (999999999999999999, 1000000000000, 999999999999999999)], [(555555555554, 3000000000000, 1000000000000, 123456789012, 987654321098), (555555555554, 3000000000000, 987654321098, 987654321098, 987654321098)], [(1000000000000000001, 999999999999999999, 1000000000000000000), (1000000000000000001, 999999999999999999, 1000000000000000000)], [(555555555555, 999999999998, 987654321098), (3000000000000, 987654321098, 900000000001)], [(555555555555, 1000000000000), (555555555555, 1000000000000)], [(1000000000000, 999999999999, 123456789011, 123456789011), (999999999999, 123456789011, 123456789011, 999999999999)], [(3000000000000, 987654321098, 900000000001), (3000000000000, 987654321098, 900000000001)], [(555555555554, 3000000000000, 987654321098, 987654321098, 987654321097, 3000000000000), (555555555554, 3000000000000, 987654321098, 987654321098, 987654321097, 555555555554)], [(1000000000000, 555555555555), (987654321099, 555555555555)], [(987654321098, 987654321097, 999999999998), (987654321098, 987654321097, 999999999998)], [(1000000000000000000, 999999999999999999, 999999999999999999), (1000000000000, 999999999999999999, 1000000000000)], [(999999999999, 555555555555), (1000000000001, 555555555555)], [(987654321099, 999999999998, 555555555555), (987654321099, 999999999998, 555555555555)], [(1000000000000000000, 999999999999999999, 1000000000000000000), (987654321098, 999999999999999999, 999999999999999999)], [(999999999999999999, 555555555554, 1000000000000000000, 1000000000000000000), (999999999999999999, 555555555554, 1000000000000000000, 1000000000000000000)], [(3000000000000, 987654321098, 900000000001), (3000000000000, 987654321098, 900000000000)], [(1000000000000,), (1000000000000,)], [(1000000000000000000, 999999999999999999, 999999999999999999), (1000000000000000000, 999999999999999999, 999999999999999999)], [(1000000000000,), (999999999999,)], [(987654321099, 999999999998, 999999999999, 555555555555), (987654321099, 999999999998, 999999999999, 555555555555)], [(999999999999, 999999999999), (999999999999, 999999999999)], [(999999999999999999, 123456789011), (999999999999999999, 1000000000000000000)], [(123456789012, 987654321098, 1000000000000, 987654321098), (123456789012, 987654321098, 123456789012, 987654321098)], [(555555555555, 123456789012, 987654321098), (3000000000000, 987654321099, 987654321098)], [(987654321099, 987654321098), (999999999998, 555555555555)], [(2999999999999, 987654321098, 987654321098, 987654321099, 987654321098), (3000000000000, 987654321098, 987654321098, 987654321099, 987654321098)], [(1000000000001, 999999999999), (987654321098, 999999999999)], [(123456789012, 1000000000000, 555555555555), (123456789012, 1000000000000, 555555555555)], [(123456789012, 987654321097, 123456789012), (123456789012, 987654321098, 123456789012)], [(987654321098, 2000000000000), (987654321099, 3000000000000)], [(), ()], [(999999999999, 987654321098, 123456789011), (999999999999, 987654321098, 123456789011)], [(987654321099, 2000000000000), (899999999999, 900000000000)], [(3000000000000, 987654321098, 900000000001, 900000000001), (3000000000000, 987654321098, 900000000001, 3000000000000)], [(987654321098, 2000000000001), (987654321099, 3000000000000)], [(999999999999, 123456789011, 123456789011, 999999999999, 123456789011), (999999999998, 123456789011, 123456789011, 999999999999, 899999999999)], [(123456789012, 987654321098, 987654321097, 987654321098), (123456789012, 987654321098, 123456789012, 987654321098)], [(2999999999999, 987654321098, 123456789012, 987654321098), (2999999999999, 987654321098, 123456789012, 987654321098)], [(999999999999999999, 123456789012, 1000000000000), (123456789012, 1000000000000, 555555555555)], [(987654321098, 2000000000000), (987654321098, 2000000000000)], [(1000000000000000000, 999999999999999999, 1000000000000000000, 1000000000000000000), (1000000000000000000, 999999999999999999, 1000000000000000000, 1000000000000000000)]]
results = [(8, -1, -13), (-13, -43, -13), (-3, 7, -3), (100000000000, -1000000000000), (876543210987, -432098765543), (-1, 1), (0, 0), (1, 0), (87654321098, -1000000000000), (0, 0, 0), (0, 0), (0, 0), (87654321098, -2000000000001), (0, 0), (0, 1), (0, 0, 0), (-1, 0), (-1, 0), (0, 0), (-999999444444444444, 0), (0, 0), (0, -432098765543, 0), (432098766543, -864197532086, 0), (-2444444444445, -864197532086, 0), (1, -999998999999999999, 0), (0, 999999000000000001), (0, 0, -1), (0, 0, 0, 0), (999998999999999999, 0), (100000000000, 0, 0, 0), (-2444444444445, 12345678901, 0), (0, -1), (0, 0), (0,), (0, 0, 0), (0, -1), (0, 0, 0, 0, 0), (0, 0, 0, 0, -1), (444444444444,), (0, 0, 0), (0, 0, 12345678902, 0, 0), (87654321098,), (0, 0), (-87654321098, 2000000000001), (-1, -432098766544), (0, 0, 0), (0, 0, 0), (0, 0, 0, 0), (0, 0), (0, -999999444444444444), (0, 0), (0, 0), (1, 0, 1), (87654321099, -1000000000000), (0,), (0, 0, 0), (0,), (0, 0), (0, 432098766544), (0, 0, 0), (100000000000, 0, 2100000000001, 0), (-999999000000000000, 0, -999998999999999999), (12345678899, -432098765543), (0, 0, 0, 0), (999999012345678900, 0), (0, 0, 0), (0, 0, 12345678902, -864197532086, 0), (0, 0, 0), (-2444444444445, 12345678900, 87654321097), (0, 0), (1, 876543210988, 0, -876543210988), (0, 0, 0), (0, 0, 0, 0, 0, 2444444444446), (12345678901, 0), (0, 0, 0), (999999000000000000, 0, 999998999999999999), (-2, 0), (0, 0, 0), (999999012345678902, 0, 1), (0, 0, 0, 0), (0, 0, 1), (0,), (0, 0, 0), (1,), (0, 0, 0, 0), (0, 0), (0, -999999876543210989), (0, 0, 876543210988, 0), (-2444444444445, -864197532087, 0), (-12345678899, 432098765543), (-1, 0, 0, 0, 0), (12345678903, 0), (0, 0, 0), (0, -1, 0), (-1, -1000000000000), (), (0, 0, 0), (87654321100, 1100000000000), (0, 0, 0, -2099999999999), (-1, -999999999999), (1, 0, 0, 0, -776543210988), (0, 0, 864197532085, 0), (0, 0, 0, 0), (999999876543210987, -876543210988, 444444444445), (0, 0), (0, 0, 0, 0)]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "substract_elements"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)', 'assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)', 'assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
