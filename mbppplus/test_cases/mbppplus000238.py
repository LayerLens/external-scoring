import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[[1], [1, 4], [5, 6, 7, 8]]], [[[0, 1], [2, 2], [3, 2, 1]]], [[[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]], [[[], [], []]], [[[[[[1]]]]]], [[[[[[1]], [[2]], [[3]]]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [[25, 26]], [[27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [41, 42, 43]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[True, True, False, False], [], [], []]], [[[[6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]]]], [[[[1, 2, 3, 4, 5], [6, 7]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[17], [18, 19, 20], [21, 22], [24, 25, 26, 27], [17]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22], [24, 25, 26, 27], [17]]]], [[[[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[17, 17], [18, 19, 20], [21, 22], [17, 17], [24, 25, 26, 27], [17, 17]], [[17, 17], [18, 19, 20], [21, 22], [17, 17], [24, 25, 26, 27], [17, 17]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[17, 17], [18, 19, 20], [21, 22], [17, 17], [24, 25, 26, 27], [17, 17]]]], [[[[[[1]]]], [[[[1]]]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[32]]]], [[[[32]]]], [[[[32]]]]]], [[[[[[]]]], [[[[]]]], [[[[]]]], [[[[]]]]]], [[[[11, 12], [13, 14, 15, 16], [11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]]]], [[[[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[12, 11, 12], [12, 11, 12], [13, 14, 15, 16]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [[25, 26]], [[32, 27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [32, 27, 28, 29], [41, 42, 43]]]], [[[True, True, False, False], [], [True, 'oUycV', 'zar', None, 'v', False, True, False, False, 89.01601789196613], []]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[11, 12]], [[17], [18, 20], [21, 22, 23], [18, 20], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[11, 12]], [[17], [18, 20], [21, 22, 23], [18, 20], [24, 25, 26, 27]]]], [[[[11, 12], [13, 14, 15, 16], [11, 12]]]], [[[], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[18], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [], [[18], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[True, True, False, False], [False, True, True, True, False, False, False, False, True], [], [], [True, True, False, False]]], [[[], [], [18]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]]]], [[[[11, 12], [13, 14, 15, 16]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[11, 12], [13, 14, 15, 16]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[11, 12]]]], [[[], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], []]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]]]], [[[[6, 7, 6], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[[], []]], [[[], []]], [[[], []]]]], [[[[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [24, 25, 26, 27]], [[11, 12], [13, 14, 15, 16], [11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [24, 25, 26, 27]]]], [[[[[[], []]]], [[[[], []]]], [[[[], []]]], [[[[], []]]], [[[[], []]]]]], [[[[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [24, 25, 26, 27]], [[11, 12], [13, 14, 15, 16], [11, 12], [13, 14, 15, 16]]]], [[[[6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[6, 7], [8, 9, 10]]]], [[[[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[36, 13, 14, 15, 16]], [[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[36, 13, 14, 15, 16]], [[36, 13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[]], [[]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]]]], [[[[[], []], [[], []]]]], [[[True, True, False, False], [False, True, True, True, False, False, False, False, True], [], [], [True, True, False, False], [True, True, False, False]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]]]], [[[], [], [], []]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[12, 11, 12], [12, 11, 12], [13, 14, 15, 16]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]]]], [[[], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[18], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[18], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [[25, 26]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 23, 9, 10]], [[1, 2, 3, 4, 5], [6, 7], [8, 23, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[-29.953961965754488, 89.01601789196613, 89.01601789196613, 89.01601789196613, -13.248116391508603], [18]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8], [1, 2, 3, 4, 5]], [[11, 12], [13, 14, 15, 16]], [[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8], [1, 2, 3, 4, 5]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[25, 26], [25, 26]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [[25, 26], [25, 26]]]], [[[[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]]]]], [[[[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [24, 25, 26, 27]], [[11, 12], [13, 14, 15, 16, 15], [11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]], [[11, 12]], [[17], [18, 19, 20], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10]]]], [[[[[[True], None, -34.7782057789035], []], [[[True], None, -34.7782057789035], []]], [[[[True], None, -34.7782057789035], []], [[[True], None, -34.7782057789035], []]], [[[[True], None, -34.7782057789035], []], [[[True], None, -34.7782057789035], []]], [[[[True], None, -34.7782057789035], []], [[[True], None, -34.7782057789035], []]], [[[[True], None, -34.7782057789035], []], [[[True], None, -34.7782057789035], []]], [[[[True], None, -34.7782057789035], []], [[[True], None, -34.7782057789035], []]]]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]]]], [[[[[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]]], [[[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]], [[[1, 2], [3, 4, 4], [3, 4, 4], [5, 6]], [[7, 8], [9, 10]]]]]], [[[[], []], [[], []], [[], []]]], [[[[11, 12], [13, 14, 15], [13, 14, 15]], [[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[11, 12], [13, 14, 15], [13, 14, 15]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]], [[[7, 8], [9, 10]]]]]], [[[[[[True], None, -34.7782057789035], []], [[[True], None, -34.7782057789035], []]], [[[[True], None, -34.7782057789035], []], [[[True], None, -34.7782057789035], []]], [[[[True], None, -34.7782057789035], []], [[[True], None, -34.7782057789035], []]], [[[[True], None, -34.7782057789035], []], [[[True], None, -34.7782057789035], []]], [[[[True], None, -34.7782057789035], []], [[[True], None, -34.7782057789035], []]]]], [[[[1, 2, 3, 4, 5, 2], [6, 7], [1, 2, 3, 4, 5, 2], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]]]], [[[[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23]], [[25, 26]], [[27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [41, 42, 43]]]], [[[[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [[25, 26]], [[32, 27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [32, 27, 28, 29], [41, 42, 43]], [[25, 26]]]], [[[[1, 2, 3, 4, 5], [6, 7]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]], [[[[7, 8], [9, 10]], [[7, 8], [9, 10]]], [[[7, 8], [9, 10]], [[7, 8], [9, 10]]]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[11, 12], [13, 14, 15, 16]]]], [[[[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]], [[[[]]], [[[]]]]]], [[[[1, 2, 3, 4, 5, 2], [6, 7], [1, 2, 3, 4, 5, 2], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23], [21, 22, 23]]]], [[[[1, 2, 3, 4, 5, 2], [6, 7, 6], [1, 2, 3, 4, 5, 2], [6, 7, 6], [22, 8, 9, 10], [22, 8, 9, 10]], [[1, 2, 3, 4, 5, 2], [6, 7, 6], [1, 2, 3, 4, 5, 2], [6, 7, 6], [22, 8, 9, 10], [22, 8, 9, 10]], [[1, 2, 3, 4, 5, 2], [6, 7, 6], [1, 2, 3, 4, 5, 2], [6, 7, 6], [22, 8, 9, 10], [22, 8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23], [21, 22, 23]]]], [[[], [[1, 2, 3], [4, 5], [6, 7, 8], [9]], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [], [[32, 27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [32, 27, 28, 29], [41, 42, 43]], []]], [[[True, True, False, False], ['fGZxz'], [True, 'oUycV', 'zar', None, 'v', False, True, False, False, 89.01601789196613], []]], [[[[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]], [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]], [[1, 2], [3, 4], [5, 6]]]]]], [[[True, False, False, False], [False, True, True, True, False, False, False, False, True], [True, False, False, False], [], ['oUycV', 'fGZxz'], [], [True, False, False, False]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[], [[10, 11, 12, 13, 14], [15], [16, 17], [18, 19, 20], [21, 22, 23, 24]], [], [[32, 27, 28, 29], [30, 31, 32], [33, 34], [35, 36, 37, 38, 39, 40], [32, 27, 28, 29], [41, 42, 43]], [], [[1, 2, 3], [4, 5], [6, 7, 8], [9]]]], [[[-34.7782057789035, 58.961234853425736, -13.248116391508603, -29.953961965754488, 89.01601789196613, 20.346774353093892, -13.248116391508603, -34.7782057789035], [], [], [False, False, True, False, True], [], [False, False, True, False, True]]], [[[[1, 2, 3, 4, 5, 2], [6, 7], [1, 2, 3, 4, 5, 2], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]]]], [[[[1, 2, 3, 4, 8, 5, 2], [1, 2, 3, 4, 8, 5, 2], [6, 7], [1, 2, 3, 4, 8, 5, 2], [8, 9, 10]], [[1, 2, 3, 4, 8, 5, 2], [1, 2, 3, 4, 8, 5, 2], [6, 7], [1, 2, 3, 4, 8, 5, 2], [8, 9, 10]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23], [21, 22, 23]], [[1, 2, 3, 4, 8, 5, 2], [1, 2, 3, 4, 8, 5, 2], [6, 7], [1, 2, 3, 4, 8, 5, 2], [8, 9, 10]]]], [[[[-68.16625979003155, -62.96554521379542, -86.85137099894868, 7.690185997395233, -34.7782057789035], []], [[-68.16625979003155, -62.96554521379542, -86.85137099894868, 7.690185997395233, -34.7782057789035], []], [[-68.16625979003155, -62.96554521379542, -86.85137099894868, 7.690185997395233, -34.7782057789035], []], [[-68.16625979003155, -62.96554521379542, -86.85137099894868, 7.690185997395233, -34.7782057789035], []]]], [[[[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[11, 12]], [[17], [18, 20], [21, 22, 23, 22], [18, 20], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10], [8, 9, 10]], [[11, 12]], [[17], [18, 20], [21, 22, 23, 22], [18, 20], [24, 25, 26, 27]]]], [[[], [True, True, True, False, True, True, True, True, True, True], [], [], [], []]], [[[[1, 2, 3, 4, 5, 2], [6, 7], [1, 2, 3, 4, 5, 2], [8, 9, 10]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]], [[18, 19, 20], [21, 22, 23], [24, 25, 26, 27], [21, 22, 23]]]], [[[[18, 19, 20], [26, 22, 23], [26, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [26, 22, 23], [26, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [26, 22, 23], [26, 22, 23], [24, 25, 26, 27]], [[18, 19, 20], [26, 22, 23], [26, 22, 23], [24, 25, 26, 27]]]], [[[[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5], [8, 9, 10, 8], [6, 7], [8, 9, 10, 8], [1, 2, 3, 4, 5]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]]]], [[[[], [False]], [[], [False]], [[], [False]], [[], [False]]]], [[[[1, 2, 3, 4, 5], [6, 7]], [[11, 12], [13, 14, 15, 16]], [[17], [18, 19, 20], [21, 22, 23], [24, 25, 26, 27]], [[1, 2, 3, 4, 5], [6, 7]]]]]
results = [4, 3, 5, 0, 1, 1, 1, 4, 5, 1, 4, 4, 4, 4, 2, 4, 4, 4, 5, 4, 6, 1, 4, 1, 1, 4, 1, 1, 4, 2, 3, 4, 6, 10, 5, 3, 4, 9, 1, 4, 2, 4, 4, 4, 4, 4, 1, 4, 1, 1, 5, 1, 5, 4, 4, 4, 1, 3, 2, 9, 3, 0, 4, 2, 4, 5, 1, 4, 4, 5, 5, 5, 1, 5, 4, 3, 2, 2, 2, 2, 4, 3, 2, 5, 5, 6, 4, 2, 4, 2, 6, 6, 6, 10, 3, 9, 4, 6, 8, 5, 6, 2, 5, 10, 4, 4, 5, 2, 4]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "Find_Max_Length"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4', 'assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3', 'assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
