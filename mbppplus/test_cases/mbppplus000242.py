import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[345], [12], [97], [9876543210], [1234567890987654321], [1111111111111], [2147483647], [999999999999999999999999999999999], [987654321987654321987654321987654321], [10000000000000000000000000000000000000000000000000], [987654321012345678998765432101234567899876543210], [1234567890123456789012345678901234567890123456789], [987654321987654321], [0], [5], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000], [1234567890123456789012345678901234567890123456788], [1111111111110], [987654321987654322], [1000000000000000000000000000000000], [9876543211], [1234567890123456789012345678901234567890123456790], [1111111111112], [10000000000000000000000000000000000000000000000001], [987654321987654321987654321987654320], [9999999999999999999999999999999999999999999999999], [1234567890987654322], [1234567890123456789012345678901234567890123456791], [9999999999999999999999999999999999999999999999998], [987654321987654323], [1234567890987654323], [4], [1234567890987654320], [987654321987654324], [2147483648], [1234567890987654324], [987654321987654325], [1234567890123456789012345678901234567890123456787], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002], [1], [1000000000000000000000000000000001], [1234567890987654319], [2], [987654321012345678998765432101234567899876543211], [1234567890987654318], [987654321987654320], [987654321987654326], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003], [9999999999999999999999999999999999999999999999997], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999], [64], [9876543212], [999999999999999999999999999999998], [987654321987654321987654321987654322], [1111111111113], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998], [1234567890987654317], [10000000000000000000000000000000000000000000000002], [1234567890987654316], [65], [9999999999999999999999999999999999999999999999995], [987654321987654321987654321987654323], [9876543214], [999999999999999999999999999999997], [1234567890123456789012345678901234567890123456786], [1000000000000000000000000000000002], [1111111111109], [1234567890987654315], [9876543213], [36], [1111111111114], [9999999999999999999999999999999999999999999999996], [62], [1234567890123456789012345678901234567890123456792], [1111111111115], [9999999999999999999999999999999999999999999999994], [2147483649], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004], [2147483650], [987654321987654319], [9876543215], [63], [987654321987654318], [9876543216], [3], [66], [37], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999996], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006], [999999999999999999999999999999996], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999995], [987654321987654327], [1234567890123456789012345678901234567890123456785], [987654321012345678998765432101234567899876543209], [10000000000000000000000000000000000000000000000003], [1000000000000000000000000000000003], [987654321987654328], [10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007], [45], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999994], [9876543217], [46], [9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999997], [6], [1111111111116], [61], [1234567890987654314], [1234567890987654313], [987654321987654321987654321987654324], [1234567890123456789012345678901234567890123456793], [1000000000000000000000000000000004], [60], [7], [35]]
results = [12, 3, 16, 45, 90, 13, 46, 297, 180, 1, 225, 225, 90, 0, 5, 1, 224, 12, 91, 1, 46, 217, 14, 2, 179, 441, 91, 218, 440, 92, 92, 4, 89, 93, 47, 93, 94, 223, 2, 3, 1, 2, 97, 2, 226, 96, 89, 95, 4, 439, 900, 10, 47, 296, 181, 15, 899, 95, 3, 94, 11, 437, 182, 49, 295, 222, 3, 20, 93, 48, 9, 16, 438, 8, 219, 17, 436, 48, 6, 5, 40, 97, 50, 9, 96, 51, 3, 12, 10, 897, 7, 294, 896, 96, 221, 233, 4, 4, 97, 8, 9, 895, 52, 10, 898, 6, 18, 7, 92, 91, 183, 220, 5, 6, 7, 8]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "sum_digits"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert sum_digits(345)==12', 'assert sum_digits(12)==3', 'assert sum_digits(97)==16']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
