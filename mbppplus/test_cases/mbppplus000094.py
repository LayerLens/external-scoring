import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10], [[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8], 3, 7], [[-10, -5, 0, 5, 10, 15, 20, 25, 30], 0, 8], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 11], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 2, 6], [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 1, 9], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 3, 9], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 5, 8], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 2, 7], [[2, 1, 12, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 11], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 2, 5], [[-10, -5, 0, 5, 10, -6, 15, 20, 25, 30], 0, 8], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 5, 5], [[-3, -8, -1, 4, 6, 9, 12, 15, 11, 18], 2, 5], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 7, 5], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11], 1, 11], [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 3, 1], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 2, 2], [[0, 1, 2, 3, 5, 8, 13, 21, 34], 3, 1], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11], 1, 1], [[2, 1, 5, 6, 8, 3, 70, 9, 10, 11, 8, 12], 11, 11], [[2, 1, 5, 6, 8, 3, 70, 9, 10, 11, 8, 12], 2, 2], [[-3, 20, -1, 4, 6, 9, 12, 15, 18], 2, 5], [[-3, -8, 16, -1, 4, 6, 9, 12, 15, 18], 2, 2], [[-8, -1, 4, 6, 9, 12, 15, 18], 2, 2], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11], 1, 0], [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 21], 3, 1], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 9, 3], [[-10, -5, 0, 5, 10, -6, 15, 20, 25, 30], 0, 9], [[-3, -8, -1, 4, 6, 30, 12, 15, 18, 9], 2, 6], [[-3, -8, -1, 4, 6, 9, 12, 15, 11, 18, -1], 2, 5], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 11, 0], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 8, 9], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 9, 9], [[-3, -8, -1, 4, 6, 9, 12, 15, 11, 18, 12], 1, 4], [[-10, -5, 0, 5, 10, -6, 15, 0, 20, 25, 30, 15], 0, 8], [[2, 1, 12, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 9, 11], [[-3, -8, 5, 6, 12, 15, 18, 9], 2, 7], [[-8, -1, 4, 6, 12, 15, 19, 12], 2, 6], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11], 1, 12], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 2, 3], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12], 8, 11], [[-3, 40, -8, -1, 4, 6, 9, 12, 15, 18], 2, 2], [[2, 1, 5, 6, 8, 3, 70, 9, 10, 11, 8, 12], 11, 10], [[-2, -1, 0, 1, 2, 3, 5, 6, 7, 8], 3, 7], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12], 0, 11], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11, 6], 1, 11], [[-8, -1, 4, 6, 12, 15, 19, 12, 15], 2, 6], [[-8, -1, 4, 6, 9, -2, 12, 15, 18], 2, 2], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 7, 7], [[-8, -1, 4, 6, 30, 9, 12, 15, 18], 2, 2], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12, 7], 8, 4], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12, 7], 9, 4], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 4, 3], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 2, 9], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 6, 2], [[1, 3, 5, 7, 11, 13, 15, 17, -5, 19], 4, 3], [[10, 21, 30, 40, 50, 60, 70, 80, 90, 100], 7, 5], [[2, 1, 12, 5, 6, 8, 4, 7, 10, 11, 8, 12], 0, 11], [[10, 21, 30, 40, 50, 60, 70, 80, 90, 100], 8, 5], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 8], 11, 11], [[2, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11, 6], 1, 11], [[2, 1, 12, 5, -5, 6, 8, 3, 4, 7, 10, 11, 8, 12], 8, 11], [[0, -6, 2, 3, 5, 8, 13, 21, 34], 3, 1], [[2, 1, 12, 5, -5, 6, 8, 3, 4, 7, 10, 11, 8, 12], 9, 8], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 5, 7], [[-3, -8, 5, 6, 6, 12, 15, 18, 9], 2, 7], [[10, 21, 30, 40, 50, 60, 70, 80, 90, 100, 100], 7, 5], [[-10, -5, 0, 5, 10, -6, 15, 20, 25, 30], 0, 0], [[-8, -1, 4, 6, 12, 15, 19, 12, 15], 5, 5], [[-8, -1, 4, 6, 12, 15, 19, 12, 15], 5, 6], [[-3, -8, -1, 6, 9, 12, 15, 18], 7, 7], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12, 7], 9, 5], [[-3, -1, 4, 6, 9, 12, 15, 18], 2, 5], [[-3, -8, -2, 4, 6, 9, 12, 15, 18], 2, 2], [[-3, -8, -1, 4, 6, 9, 12, -10, 15, 18], 2, 2], [[2, 1, 12, 5, 6, 8, 3, 16, 9, 10, 11, 8, 12], 9, 11], [[2, 1, 12, 5, 6, 8, 3, 4, 7, 10, 11, 8, 12, 7], 2, 5], [[-10, -5, 0, 5, 10, -6, 15, 0, 20, 25, 30, 15, 30], 0, 3], [[9, 2, 1, 5, 6, 8, 3, 4, 16, 10, 11, 8, 12, 11], 11, 11], [[0, 1, 1, 2, 3, 5, 8, 13, 34, 21, 34], 3, 1], [[-3, -8, -1, 4, 6, 9, 12, 15, 11, 18, 12], 1, 5], [[-3, 20, -1, 4, 6, 9, 12, 15, 18, 20], 2, 5], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 8, 6], 11, 11], [[-10, -5, 0, 5, 26, 10, -6, 15, 0, 20, 25, 30, 15], 0, 8], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 1, 7], [[0, 1, 2, 3, 5, 8, 13, 21, 34], 3, 0], [[-3, 50, -1, 4, 6, 9, 12, 15, 11, 3, 12], 1, 5], [[-3, -8, -1, 4, 6, 100, 9, 12, 15, 18], 2, 5], [[70, -8, -1, 4, 6, 9, 12, 15, 18, 4], 2, 2], [[-10, -5, 0, 5, 10, -6, 15, 0, 20, 25, 30, 15, 30, 15], 0, 3], [[-3, -8, -1, 4, 6, 9, 12, 15, 18], 1, 2], [[1, 3, 5, 7, 13, 15, 17, -5, 19], 4, 3], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 8, 11], 11, 11], [[-3, -8, 16, -1, 4, 6, 9, 12, 15, 18], 1, 1], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 5, 9], [[-3, 40, -8, -1, 4, 6, 9, 12, 15, 18], 2, 4], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 8, 11], 10, 11], [[-8, -1, 4, 6, 12, 15, 19, 12, 15], 2, 2], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12, 11, 6, 9], 1, 11], [[-3, 20, -1, 4, 6, 9, 12, 15, 18], 6, 2], [[-3, -8, -1, 4, 6, 9, 12, 15, 11, 18, 12], 2, 1], [[1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 19], 3, 9], [[-2, -1, 0, 1, 2, 3, 5, 6, 7, 8], 2, 7], [[1, -8, -1, 4, 6, 9, 12, 15, 11, 18, 12], 6, 1], [[2, 1, 5, 6, 8, 3, 70, 9, 10, 11, 8, 12, 1], 11, 11], [[-3, 20, -1, 4, 6, 9, 12, 15, 18, 20], 1, 2], [[10, 21, 30, 40, 50, 60, 70, 80, 90, 100], 7, 4]]
results = [29, 16, 38, 15, 90, 79, 30, 88, 91, 300, 45, 38, 18, 54, 60, 18, 0, 77, 0, -1, 0, 1, 12, 5, 18, 16, 4, 0, 0, 0, 84, 51, 18, 0, 36, 19, 1, 29, 29, 65, 56, 88, 3, 36, -8, 0, 17, 77, 77, 56, 4, 15, 4, 0, 0, 0, 96, 0, 0, 0, 86, 0, 12, 87, 32, 0, 0, 210, 62, 0, -10, 15, 34, 18, 0, 31, -2, -1, 29, 31, -10, 8, 0, 10, 18, 12, 35, 37, 0, 68, 109, -1, -10, -9, 0, 12, -8, 400, -5, 20, 4, 77, 0, 0, 77, 17, 0, 12, 19, 0]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "sum_range_list"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29', 'assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16', 'assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
