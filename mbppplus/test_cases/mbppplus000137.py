import numpy as np
['import math']

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[10, 5], [4, 5], [4, 10], [20000000000.0, 3000000000000.0], [1.5, 2.7], [0.5, 10], [2.5, 0.5], [10000000000.0, 10000000000.0], [10000000000.0, 1.5], [14344998825.535194, 3000000000000.0], [0.5, 11], [0.5, 10000000000.0], [2.4743942770744276, 2.5], [2.951124891044273, 9], [0.7038501915882589, 10000000000.0], [0.9535585442662897, 11], [2.5, 2.5], [7542657684.960076, 14344998825.535194], [10000000000.386435, 1.5], [20000000000.0, 14344998825.535194], [3.1091490314061776, 2.5], [2.6427048640031465, 2.5], [0.9535585442662897, 3000000000000.0], [3000000000000.0, 3000000000000.0], [13417080781.919376, 20000000000.0], [0.691722647407507, 10000000000.0], [7542657684.960076, 7542657684.960076], [3000000000000.0, 7542657684.960076], [2.7, 2.6427048640031465], [19738657082.252766, 19738657082.252766], [13417080781.919376, 2.5], [1.5, 3.652964263337969], [20000000000.0, 18703171896.314854], [10000000000.386435, 2.6427048640031465], [10000000000.386435, 2.739615213922965], [2.951124891044273, 2.6427048640031465], [2.5, 0.9535585442662897], [2.6427048640031465, 2.613041636837666], [2944603288658.516, 7542657684.960076], [2.739615213922965, 1.5723401496183493], [20612740066.61665, 14344998825.535194], [20000000000.0, 20612740066.61665], [2.5, 1.5], [0.7038501915882589, 1.5], [7542657684.867313, 14344998825.535194], [1.9485740766634871, 2.5], [19118435482.814182, 3000000000000.0], [2.489694572891035, 2.5], [0.691722647407507, 13128233796.528885], [22629745317.76949, 20612740066.61665], [18703171896.314854, 20612740066.61665], [3010419136198.206, 3010419136198.206], [0.7038501915882589, 27168943845.409115], [2.2886628071096675, 2.5], [2.7157286645427967, 2.7], [0.9535585442662897, 2469047370429.149], [10000000000.386435, 0.8251120526170418], [13417080781.919376, 3.348201509354621], [10000000000.386435, 2944603288658.516], [1.5689287033306316, 0.9535585442662897], [2419698042708.4434, 3000000000000.0], [2.489694572891035, 2419698042708.4434], [2.7, 2.2052029157901467], [2419698042708.4434, 0.9535585442662897], [2.5758215253518504, 9], [1.9485740766634871, 1.9485740766634871], [14344998825.535194, 1.5], [2.739615213922965, 1.9485740766634871], [0.7038501915882589, 1.84469436595183], [2.489694572891035, 2.613041636837666], [2.951124891044273, 3000000000000.0], [7542657684.867313, 1.84469436595183], [0.9535585442662897, 2.4743942770744276], [3000000000000.0, 1.9485740766634871], [1.244756247304522, 13128233796.528885], [13689072131.010698, 3.348201509354621], [0.7038501915882589, 1.7307900121725113], [1.244756247304522, 3000000000000.0], [2.5824340399075245, 1.491306814979678], [1.5689287033306316, 14344998825.535194], [2.739615213922965, 2.739615213922965], [9972462676.389458, 7542657684.867313], [2419698042708.9595, 2419698042708.9595], [18703171896.314854, 0.5], [2.951124891044273, 1577068954281.4302], [7542657684.867313, 2.4743942770744276], [2.8588618513071227, 0.5], [2.613041636837666, 2.613041636837666], [2.489694572891035, 3.1346090181102264], [2999999999999.98, 2999999999999.98], [2.6427048640031465, 0.8333954194136204], [7542657683.877375, 0.8533387999456739], [2.7157286645427967, 2.7157286645427967], [13689072131.010698, 1.491306814979678], [20000000000.0, 20000000000.0], [2.035858005142287, 2.035858005142287], [18703171896.314854, 0.8251120526170418], [20612740066.61665, 3.1226607822987056], [1862053351689.5183, 3010419136198.206], [0.691722647407507, 18703171896.314854], [33156202533.735584, 20612740066.61665], [1.9157519089663244, 3000000000000.0], [19999999999.45963, 20000000000.0], [10000000000.823483, 0.5], [16354297614.100697, 3.348201509354621], [33156202533.735584, 33156202533.735584], [2.5758215253518504, 7542657683.877375], [2.5824340399075245, 6218023557.093668]]
results = [1570.7963267948967, 251.32741228718345, 502.6548245743669, 3.769911184307752e+33, 19.085175370557995, 7.853981633974483, 9.817477042468104, 3.141592653589793e+30, 4.7123889803846903e+20, 1.9394213020370054e+33, 8.63937979737193, 7853981633.974483, 48.08700031141589, 246.24507910386453, 15563609982.028143, 31.4222501559395, 49.08738521234052, 2.563888805372918e+30, 4.7123889807488955e+20, 1.8026457170422233e+31, 75.92293013098879, 54.851335925782585, 8569704587983.5, 8.482300164692441e+37, 1.1310868089381845e+31, 15031899469.819735, 1.3481029755683966e+30, 2.1326362174451855e+35, 60.523782938551996, 2.416031983294876e+31, 1.4138585111727306e+21, 25.82128281043938, 2.3503098971315933e+31, 8.302302186999957e+20, 8.606755030388404e+20, 72.30589647606915, 18.723078233967207, 57.33152984409585, 2.054602709344498e+35, 37.07451817335409, 1.9147930528071915e+31, 2.590273310545554e+31, 29.45243112740431, 2.3345414973042216, 2.5638888053098544e+30, 29.821104347137876, 3.444893713726647e+33, 48.68352614332596, 19734229064.571205, 3.3162322006248276e+31, 2.265249953390484e+31, 8.570985702365424e+37, 42284684563.35714, 41.138978649430946, 62.558509015125956, 7053002192771.758, 2.5921659630904338e+20, 1.893553280448966e+21, 9.2507440601009e+32, 7.374008799503556, 5.51814964475196e+37, 47119773168460.46, 50.50402125062494, 1.7539595807644076e+25, 187.59614880360635, 23.243452347323878, 9.697106510185027e+20, 45.94581206548874, 2.871010364771898, 50.88483233623431, 82081693034621.52, 3.297031454379085e+20, 7.068275996241613, 5.509463403799373e+25, 63903523414.99563, 1.9711037507051662e+21, 2.693734071024271, 14602921704188.062, 31.244627439466004, 110931990704.10158, 64.59792689338764, 2.356563300618067e+30, 4.450751964929052e+37, 5.494781251957783e+20, 43149496599919.96, 4.422497250833484e+20, 12.83826145465693, 56.051709498009785, 61.04152803290981, 8.482300164692271e+37, 18.285140843705985, 1.525176699107424e+20, 62.92293931238389, 8.779401264367815e+20, 2.5132741228718346e+31, 26.50893771527643, 9.06762047496905e+20, 4.168176829387752e+21, 3.2791484589172244e+37, 28114419971.21626, 7.118937286594799e+31, 34589928268099.855, 2.5132741227360245e+31, 1.5707963270536013e+20, 2.813359647579883e+21, 1.14510213458507e+32, 157219281471.03607, 130274888775.22649]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "volume_cylinder"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
