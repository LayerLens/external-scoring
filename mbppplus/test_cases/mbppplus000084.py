import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[15, 79, 25, 38, 69]], [[98, 12, 54, 36, 85]], [[41, 42, 32, 12, 23]], [[54, 28, 91, 12, 78, 37, 66, 42, 84, 59]], [[7, 21, 76, 39, 52, 45, 83, 16, 35, 93]], [[65, 89, 48, 56, 13, 27, 77, 61, 32, 95]], [[23, 56, 34, 67, 89, 12, 45, 78, 90, 32, 54, 76, 98, 21, 43, 65, 87, 9]], [[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]], [[100, 50, 75, 25, 10, 90, 80, 30, 60, 20, 40, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[99, 88, 77, 66, 55, 44, 33, 22, 11, 0]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 67, 89]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89]], [[7, 21, 8, 76, 39, 52, 83, 99, 35, 93]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89, 12, 21]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 35, 89]], [[1, 3, 5, 7, 9, 2, 4, 6, 8, 0, 0]], [[99, 88, 77, 66, 55, 44, 11, 33, 22, 11, 0, 88, 33]], [[100, 50, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95, 55, 100]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95, 55, 70]], [[67, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89, 12, 11]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 65]], [[70, 1, 3, 5, 7, 9, 2, 4, 6, 8, -1, 0]], [[7, 21, 76, 44, 52, 45, 83, 16, 35, 93]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 99, 95, 55, 100, 65]], [[70, 1, 3, 5, 7, 71, 9, 2, 4, 6, 8, -1, 0, 70]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89, 12]], [[67, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89]], [[99, 88, 77, 66, 55, 44, 33, 22, 11, -1, 99]], [[7, 20, 76, 44, 52, 45, 83, 16, 35, 93]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 67, 89, 12]], [[99, 88, 77, 33, 66, 55, 44, 33, 11, 0]], [[67, 89, 12, 45, 78, 23, 56, 91, 32, 76, 21, 54, 76, 32, 89]], [[70, 1, 3, 5, 7, 71, 9, 2, 4, 6, 8, 42, -1, 0, 70]], [[100, 75, 75, 25, 10, 90, 80, 30, 54, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95, 55, 70, 45]], [[7, 21, 8, 76, 39, 52, 83, 99, 35, 93, 83, 52]], [[7, 21, 76, 39, 52, 45, 83, 16, 35, 15, 93]], [[100, 88, 77, 60, 33, 66, 55, 44, 33, 61, 0]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 99, 70, 55, 65, 45, 85, 35, 48, 15, 5, 99, 95, 55, 100, 65, 100]], [[7, 21, 83, 76, 44, 52, 45, 83, 35, 93]], [[100, 75, 25, 10, 90, 80, 30, 16, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 65]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 67, 12, 89, 12]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 67, 76, 21, 54, 76, 32, 89, 12, 21]], [[67, 89, 12, 45, 78, 23, 56, 91, 32, 76, 21, 54, 75, 32, 89]], [[99, 88, 77, 66, 55, 11, 33, 22, 11, 0, 88, 33]], [[7, 88, 21, 76, 39, 52, 45, 83, 16, 35, 93]], [[100, 75, 75, 25, 10, 90, 79, 85, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95, 55, 70]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 67, 12, 78]], [[100, 75, 75, 25, 10, 90, 79, 85, 30, 60, 20, 40, 95, 70, 55, 65, 45, 35, 15, 5, 95, 55, 70, 60]], [[99, 88, 66, 66, 55, 44, 44, 33, 66, 22, 11, 0, 88, 32]], [[65, 89, 48, 56, 14, 27, 77, 32, 95, 14, 14]], [[67, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 33, 89, 12, 11]], [[100, 50, 75, 25, 10, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[99, 88, 77, 66, 55, 33, 22, 11, 15]], [[100, 88, 77, 60, 33, 45, 55, 44, 33, 61, 0]], [[70, 1, 3, 5, 7, 9, 2, 4, 6, 8, -1]], [[100, 75, 25, 10, 90, 80, 30, 16, 60, 20, 40, 95, 70, 55, 20, 65, 45, 85, 35, 48, 15, 5, 95, 55, 65]], [[67, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 33, 76, 32, 89]], [[100, 50, 75, 25, 10, 90, 80, 30, 60, 27, 20, 40, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[70, 30, 3, 5, 7, 9, 2, 4, 6, 8, -1]], [[14, 99, 88, 77, 66, 55, 44, 33, 22, 11, 0]], [[70, 1, 3, 5, 7, 87, 71, 9, 2, 4, 6, 8, -1, 0, 70, 8]], [[99, 88, 33, 66, 55, 44, 33, 11, 0]], [[7, 21, 76, 44, 52, 45, 83, 16, 35, 93, 93]], [[100, 50, 75, 25, 10, 90, 20, 80, 30, 60, 20, 40, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[99, 88, 77, 66, 55, 33, 22, 11, 56, 99]], [[99, 88, 67, 77, 66, 55, 33, 22, 11, 56, 99]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 95, 40, 95, 99, 70, 55, 65, 45, 85, 35, 48, 15, 6, 99, 95, 55, 100, 65, 100]], [[100, 88, 77, 60, 33, 45, 55, 44, 95, 33, 61, 0]], [[7, 21, 76, 44, 52, 45, 83, 16, 93, 93]], [[7, 21, 76, 44, 52, 45, 83, 16, 93, 93, 93]], [[71, 99, 88, 67, 77, 66, 55, 33, 22, 11, 56, 99]], [[70, 1, 3, 5, 8, 71, 9, 2, 4, 6, 8, 42, -1, 0, 70]], [[100, 88, 77, 60, 33, 45, 56, 44, 95, 33, 61, 0]], [[99, 88, 77, 66, 98, 55, 33, 22, 11, 57, 84, 99]], [[67, 89, 12, 45, 78, 23, 89, 56, 90, 32, 76, 21, 54, 76, 32, 89]], [[67, 54, 89, 12, 45, 78, 84, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89, 12]], [[100, 50, 75, 25, 10, 10, 90, 80, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95, 25]], [[100, 75, 75, 25, 10, 90, 79, 85, 30, 60, 20, 40, 95, 70, 55, 65, 45, 35, 5, 95, 55, 70, 60]], [[100, 75, 75, 25, 10, 90, 79, 85, 30, 60, 20, 40, 95, 70, 90, 55, 65, 45, 35, 15, 5, 95, 55, 70, 60]], [[70, 1, 3, 5, 7, 87, 71, 9, 2, 4, 6, 8, -1, 0, 70, 8, 4]], [[100, 75, 75, 25, 10, 90, 79, 85, 30, 60, 20, 40, 95, 70, 55, 65, 45, 15, 5, 95, 55, 70, 60]], [[99, 88, 77, 66, 55, 44, 33, 16, 11, 45, -1, 99]], [[70, 1, 3, 5, 7, 9, 2, 4, 6, 8, -1, 0, 70]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 95, 40, 95, 99, 70, 55, 65, 45, 85, 35, 30, 48, 15, 6, 99, 95, 55, 100, 65, 100, 95]], [[7, 11, 76, 44, 52, 45, 83, 16, 93, 93]], [[99, 88, 77, 66, 55, 44, 33, 22, 11, -1, 99, 33]], [[100, 75, 25, 10, 90, 80, 30, 16, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 65, 100]], [[67, 89, 12, 45, 78, 34, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89]], [[100, 88, 77, 60, 33, 45, 56, 44, 95, 33, 57, 61, 0, 88]], [[100, 50, 75, 25, 10, 90, 98, 30, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 15, 5, 95]], [[67, 54, 89, 12, 45, 78, 84, 23, 56, 61, 32, 76, 21, 54, 76, 32, 89, 12]], [[71, 99, 88, 67, 77, 66, 55, 22, 11, 56, 99]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 32, 67, 76, 87, 21, 54, 76, 32, 89, 12, 21]], [[100, 75, 25, 10, 90, 80, 30, 16, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 67, 65, 100]], [[67, 89, 12, 45, 78, 24, 56, 90, 32, 76, 21, 54, 76, 32, 89, 12, 11]], [[100, 74, 75, 25, 10, 90, 80, 30, 28, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 65, 40]], [[99, 88, 30, 66, 55, 44, 33, 11, 0]], [[67, 54, 89, 12, 45, 78, 23, 56, 90, 76, 21, 54, 76, 32, 67, 89, 76]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 25, 40, 95, 99, 70, 55, 89, 45, 85, 35, 48, 15, 44, 99, 95, 55, 100, 65, 100]], [[70, 1, 3, 5, 8, 71, 9, 2, 4, 7, 6, 8, 42, -1, 0, 70, 42]], [[100, 75, 75, 25, 10, 90, 80, 30, 60, 20, 40, 95, 99, 70, 55, 65, 45, 85, 35, 77, 48, 15, 5, 99, 95, 55, 100, 65, 100, 65]], [[100, 75, 25, 10, 90, 80, 30, 16, 60, 20, 40, 95, 70, 55, 65, 45, 85, 35, 48, 15, 5, 95, 55, 100, 65, 70]], [[14, 99, 88, 77, 66, 55, 55, 44, 33, 22, 11, 0]], [[70, 1, 3, 5, 7, 87, 71, 12, 2, 4, 6, 8, -1, 0, 70, 8, 4]], [[100, 88, 77, 60, 33, 56, 44, 95, 33, 61, 0]], [[79, 89, 12, 45, 78, 23, 56, 90, 32, 76, 21, 54, 76, 32, 89, 89]], [[7, 21, 76, 39, 52, 45, 83, 16, 35, 93, 16, 16]], [[100, 88, 77, 60, 33, 45, 55, 44, 33, 61, 42, 0, 44]], [[99, 88, 30, 66, 55, 65, 44, 33, 11, 0]], [[99, 88, 77, 66, 55, 44, 33, 22, 11, -1, 99, 11]]]
results = [[15, 25, 38, 69, 79], [12, 36, 54, 85, 98], [12, 23, 32, 41, 42], [12, 28, 37, 42, 54, 59, 66, 78, 84, 91], [7, 16, 21, 35, 39, 45, 52, 76, 83, 93], [13, 27, 32, 48, 56, 61, 65, 77, 89, 95], [9, 12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 90, 98], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], [0, 11, 22, 33, 44, 55, 66, 77, 88, 99], [12, 21, 23, 32, 32, 45, 54, 54, 56, 67, 67, 76, 76, 78, 89, 89, 90], [12, 21, 23, 32, 32, 45, 54, 54, 56, 67, 76, 76, 78, 89, 89, 90], [7, 8, 21, 35, 39, 52, 76, 83, 93, 99], [12, 12, 21, 21, 23, 32, 32, 45, 54, 54, 56, 67, 76, 76, 78, 89, 89, 90], [12, 21, 23, 32, 32, 35, 45, 54, 54, 56, 67, 76, 76, 78, 89, 89, 90], [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 11, 11, 22, 33, 33, 44, 55, 66, 77, 88, 88, 99], [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 95, 100], [5, 10, 15, 20, 25, 30, 35, 40, 45, 55, 55, 60, 65, 70, 75, 75, 80, 85, 90, 95, 95, 100, 100], [5, 10, 15, 20, 25, 30, 35, 40, 45, 55, 55, 60, 65, 70, 70, 75, 75, 80, 85, 90, 95, 95, 100], [11, 12, 12, 21, 23, 32, 32, 45, 54, 56, 67, 76, 76, 78, 89, 89, 90], [5, 10, 15, 20, 25, 30, 35, 40, 45, 48, 55, 55, 60, 65, 65, 70, 75, 75, 80, 85, 90, 95, 95, 100, 100], [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 70], [7, 16, 21, 35, 44, 45, 52, 76, 83, 93], [5, 10, 15, 20, 25, 30, 35, 40, 45, 48, 55, 55, 60, 65, 65, 70, 75, 75, 80, 85, 90, 95, 95, 99, 100, 100], [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 70, 70, 71], [12, 12, 21, 23, 32, 32, 45, 54, 54, 56, 67, 76, 76, 78, 89, 89, 90], [12, 21, 23, 32, 32, 45, 54, 56, 67, 76, 76, 78, 89, 89, 90], [-1, 11, 22, 33, 44, 55, 66, 77, 88, 99, 99], [7, 16, 20, 35, 44, 45, 52, 76, 83, 93], [12, 12, 21, 23, 32, 32, 45, 54, 54, 56, 67, 67, 76, 76, 78, 89, 89, 90], [0, 11, 33, 33, 44, 55, 66, 77, 88, 99], [12, 21, 23, 32, 32, 45, 54, 56, 67, 76, 76, 78, 89, 89, 91], [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 42, 70, 70, 71], [5, 10, 15, 20, 25, 30, 35, 40, 45, 45, 54, 55, 55, 60, 65, 70, 70, 75, 75, 80, 85, 90, 95, 95, 100], [7, 8, 21, 35, 39, 52, 52, 76, 83, 83, 93, 99], [7, 15, 16, 21, 35, 39, 45, 52, 76, 83, 93], [0, 33, 33, 44, 55, 60, 61, 66, 77, 88, 100], [5, 10, 15, 20, 25, 30, 35, 40, 45, 48, 55, 55, 60, 65, 65, 70, 75, 75, 80, 85, 90, 95, 95, 99, 99, 100, 100, 100], [7, 21, 35, 44, 45, 52, 76, 83, 83, 93], [5, 10, 15, 16, 20, 25, 30, 35, 40, 45, 48, 55, 55, 60, 65, 65, 70, 75, 80, 85, 90, 95, 95, 100, 100], [12, 12, 12, 21, 23, 32, 32, 45, 54, 54, 56, 67, 67, 76, 76, 78, 89, 89, 90], [12, 12, 21, 21, 23, 32, 32, 45, 54, 54, 56, 67, 67, 76, 76, 78, 89, 89, 90], [12, 21, 23, 32, 32, 45, 54, 56, 67, 75, 76, 78, 89, 89, 91], [0, 11, 11, 22, 33, 33, 55, 66, 77, 88, 88, 99], [7, 16, 21, 35, 39, 45, 52, 76, 83, 88, 93], [5, 10, 15, 20, 25, 30, 35, 40, 45, 55, 55, 60, 65, 70, 70, 75, 75, 79, 85, 85, 90, 95, 95, 100], [12, 12, 21, 23, 32, 32, 45, 54, 54, 56, 67, 67, 76, 76, 78, 78, 89, 90], [5, 10, 15, 20, 25, 30, 35, 40, 45, 55, 55, 60, 60, 65, 70, 70, 75, 75, 79, 85, 90, 95, 95, 100], [0, 11, 22, 32, 33, 44, 44, 55, 66, 66, 66, 88, 88, 99], [14, 14, 14, 27, 32, 48, 56, 65, 77, 89, 95], [11, 12, 12, 21, 23, 32, 33, 45, 54, 56, 67, 76, 76, 78, 89, 89, 90], [5, 10, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 95, 100], [11, 15, 22, 33, 55, 66, 77, 88, 99], [0, 33, 33, 44, 45, 55, 60, 61, 77, 88, 100], [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 70], [5, 10, 15, 16, 20, 20, 25, 30, 35, 40, 45, 48, 55, 55, 60, 65, 65, 70, 75, 80, 85, 90, 95, 95, 100], [12, 21, 23, 32, 32, 33, 45, 54, 56, 67, 76, 76, 78, 89, 89, 90], [5, 10, 15, 20, 25, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], [-1, 2, 3, 4, 5, 6, 7, 8, 9, 30, 70], [0, 11, 14, 22, 33, 44, 55, 66, 77, 88, 99], [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 70, 70, 71, 87], [0, 11, 33, 33, 44, 55, 66, 88, 99], [7, 16, 21, 35, 44, 45, 52, 76, 83, 93, 93], [5, 10, 15, 20, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], [11, 22, 33, 55, 56, 66, 77, 88, 99, 99], [11, 22, 33, 55, 56, 66, 67, 77, 88, 99, 99], [6, 10, 15, 20, 25, 30, 35, 40, 45, 48, 55, 55, 60, 65, 65, 70, 75, 75, 80, 85, 90, 95, 95, 95, 99, 99, 100, 100, 100], [0, 33, 33, 44, 45, 55, 60, 61, 77, 88, 95, 100], [7, 16, 21, 44, 45, 52, 76, 83, 93, 93], [7, 16, 21, 44, 45, 52, 76, 83, 93, 93, 93], [11, 22, 33, 55, 56, 66, 67, 71, 77, 88, 99, 99], [-1, 0, 1, 2, 3, 4, 5, 6, 8, 8, 9, 42, 70, 70, 71], [0, 33, 33, 44, 45, 56, 60, 61, 77, 88, 95, 100], [11, 22, 33, 55, 57, 66, 77, 84, 88, 98, 99, 99], [12, 21, 23, 32, 32, 45, 54, 56, 67, 76, 76, 78, 89, 89, 89, 90], [12, 12, 21, 23, 32, 32, 45, 54, 54, 56, 67, 76, 76, 78, 84, 89, 89, 90], [5, 10, 10, 15, 20, 25, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 95, 100], [5, 10, 20, 25, 30, 35, 40, 45, 55, 55, 60, 60, 65, 70, 70, 75, 75, 79, 85, 90, 95, 95, 100], [5, 10, 15, 20, 25, 30, 35, 40, 45, 55, 55, 60, 60, 65, 70, 70, 75, 75, 79, 85, 90, 90, 95, 95, 100], [-1, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 70, 70, 71, 87], [5, 10, 15, 20, 25, 30, 40, 45, 55, 55, 60, 60, 65, 70, 70, 75, 75, 79, 85, 90, 95, 95, 100], [-1, 11, 16, 33, 44, 45, 55, 66, 77, 88, 99, 99], [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 70, 70], [6, 10, 15, 20, 25, 30, 30, 35, 40, 45, 48, 55, 55, 60, 65, 65, 70, 75, 75, 80, 85, 90, 95, 95, 95, 95, 99, 99, 100, 100, 100], [7, 11, 16, 44, 45, 52, 76, 83, 93, 93], [-1, 11, 22, 33, 33, 44, 55, 66, 77, 88, 99, 99], [5, 10, 15, 16, 20, 25, 30, 35, 40, 45, 48, 55, 55, 60, 65, 65, 70, 75, 80, 85, 90, 95, 95, 100, 100, 100], [12, 21, 23, 32, 32, 34, 45, 54, 56, 67, 76, 76, 78, 89, 89, 90], [0, 33, 33, 44, 45, 56, 57, 60, 61, 77, 88, 88, 95, 100], [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 85, 90, 95, 95, 98, 100], [12, 12, 21, 23, 32, 32, 45, 54, 54, 56, 61, 67, 76, 76, 78, 84, 89, 89], [11, 22, 55, 56, 66, 67, 71, 77, 88, 99, 99], [12, 12, 21, 21, 23, 32, 32, 45, 54, 54, 56, 67, 67, 76, 76, 78, 87, 89, 89, 90], [5, 10, 15, 16, 20, 25, 30, 35, 40, 45, 48, 55, 55, 60, 65, 65, 67, 70, 75, 80, 85, 90, 95, 95, 100, 100, 100], [11, 12, 12, 21, 24, 32, 32, 45, 54, 56, 67, 76, 76, 78, 89, 89, 90], [5, 10, 15, 20, 25, 28, 30, 35, 40, 40, 45, 48, 55, 55, 65, 65, 70, 74, 75, 80, 85, 90, 95, 95, 100, 100], [0, 11, 30, 33, 44, 55, 66, 88, 99], [12, 21, 23, 32, 45, 54, 54, 56, 67, 67, 76, 76, 76, 78, 89, 89, 90], [10, 15, 25, 25, 30, 35, 40, 44, 45, 48, 55, 55, 60, 65, 70, 75, 75, 80, 85, 89, 90, 95, 95, 99, 99, 100, 100, 100], [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 42, 42, 70, 70, 71], [5, 10, 15, 20, 25, 30, 35, 40, 45, 48, 55, 55, 60, 65, 65, 65, 70, 75, 75, 77, 80, 85, 90, 95, 95, 99, 99, 100, 100, 100], [5, 10, 15, 16, 20, 25, 30, 35, 40, 45, 48, 55, 55, 60, 65, 65, 70, 70, 75, 80, 85, 90, 95, 95, 100, 100], [0, 11, 14, 22, 33, 44, 55, 55, 66, 77, 88, 99], [-1, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 12, 70, 70, 71, 87], [0, 33, 33, 44, 56, 60, 61, 77, 88, 95, 100], [12, 21, 23, 32, 32, 45, 54, 56, 76, 76, 78, 79, 89, 89, 89, 90], [7, 16, 16, 16, 21, 35, 39, 45, 52, 76, 83, 93], [0, 33, 33, 42, 44, 44, 45, 55, 60, 61, 77, 88, 100], [0, 11, 30, 33, 44, 55, 65, 66, 88, 99], [-1, 11, 11, 22, 33, 44, 55, 66, 77, 88, 99, 99]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "pancake_sort"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]', 'assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]', 'assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
