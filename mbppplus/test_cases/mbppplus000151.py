import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[7, 8], [3, 4], [7, 15], [2.5, 3.5], [1.2, 5.8], [6.25, 8.75], [2.152482257674037, 2.152482257674037], [6.25, 3.5], [2.152482257674037, 8.75], [2.700297324225485, 2.152482257674037], [3.5, 3.5], [1.3854432804588013, 3.5], [6.25, 2.5], [3.459608286705722, 3.5], [2.700297324225485, 1.3854432804588013], [2.700297324225485, 2.5], [1.3854432804588013, 8.75], [5.8, 3.5], [1.2, 1.2], [2.308614082678652, 3.5], [2.700297324225485, 2.700297324225485], [4.332995054280495, 1.3854432804588013], [1.3854432804588013, 1.2], [3.128098969138767, 6.25], [2.152482257674037, 3.128098969138767], [1.3854432804588013, 1.3854432804588013], [6.25, 6.25], [3.095980066414836, 2.700297324225485], [2.700297324225485, 3.5], [1.3854432804588013, 3.128098969138767], [5.8, 3.3484482761805356], [2.7086159184536536, 3.5], [2.308614082678652, 6.25], [2.152482257674037, 3.095980066414836], [3.128098969138767, 1.3854432804588013], [3.095980066414836, 3.095980066414836], [2.152482257674037, 3.5], [2.3253354449208996, 2.3253354449208996], [2.5, 3.7294875574760864], [5.8, 8.75], [4.934318039286869, 7.10665346391923], [1.2, 7.10665346391923], [3.7830167078632826, 4.934318039286869], [1.3854432804588013, 2.152482257674037], [5.8, 6.62665120928707], [3.128098969138767, 5.657955029609455], [2.121917472041424, 3.095980066414836], [1.3896678124587478, 1.3854432804588013], [5.8, 5.8], [1.3854432804588013, 0.9247368967322904], [4.332995054280495, 4.332995054280495], [5.8, 3.095980066414836], [7.10665346391923, 6.25], [2.152482257674037, 3.7294875574760864], [0.9247368967322904, 6.25], [1.3854432804588013, 0.9324068563687935], [0.9247368967322904, 1.3854432804588013], [2.700297324225485, 8.75], [3.128098969138767, 3.128098969138767], [1.3854432804588013, 3.7294875574760864], [5.609674187963928, 6.120577768854655], [3.7294875574760864, 2.152482257674037], [2.152482257674037, 4.200733677232915], [1.3896678124587478, 3.5], [2.700297324225485, 6.485822554946278], [7.10665346391923, 1.3854432804588013], [3.037033380664223, 2.5], [2.3253354449208996, 6.25], [9.7314836661486, 8.75], [2.308614082678652, 1.771736989507307], [3.5, 3.320009576711617], [3.095980066414836, 1.3854432804588013], [1.142869766833729, 1.2], [5.8, 4.691960825352264], [2.839781839152035, 2.839781839152035], [8.75, 3.7294875574760864], [3.0905937192183774, 3.5], [2.776233325766796, 3.095980066414836], [0.9247368967322904, 2.152482257674037], [1.4225634330794525, 3.7883490886429945], [2.3253354449208996, 6.350592155455148], [5.8, 1.4225634330794525], [3.5231122565219826, 5.8], [1.6386030770450668, 3.128098969138767], [2.152482257674037, 3.2955503797743395], [3.5, 5.8], [2.096685320976868, 1.2], [5.657955029609455, 4.691960825352264], [8.75, 4.934318039286869], [2.776233325766796, 3.128098969138767], [4.79546607177157, 4.480199970153443], [6.350592155455148, 4.337165328379914], [4.79546607177157, 3.320009576711617], [5.8, 8.659511063997245], [4.480199970153443, 3.095980066414836], [2.558784255229485, 3.5], [3.700904830850258, 2.5], [3.7883490886429945, 6.485822554946278], [6.2784961324556425, 6.25], [4.332995054280495, 1.2726616367292138], [6.485822554946278, 6.485822554946278], [5.8, 4.934318039286869], [8.378901997060781, 8.404736942628722], [1.2726616367292138, 3.5], [6.350592155455148, 1.2726616367292138], [5.609674187963928, 1.3854432804588013]]
results = [10.63014581273465, 5.0, 16.55294535724685, 4.301162633521313, 5.922837157984339, 10.752906583803284, 3.0440696015700817, 7.163274390947201, 9.01086454617988, 3.4532282734885675, 4.949747468305833, 3.764233399162231, 6.73145600891813, 4.921269094191345, 3.0349726065629916, 3.679892068963343, 8.859004068368433, 6.774215821775979, 1.697056274847714, 4.192815162005379, 3.8187970983594597, 4.549098726537783, 1.8328810881692366, 6.9890988804514, 3.797128260979412, 1.9593126771235083, 8.838834764831844, 4.10812587573182, 4.420588833992516, 3.4211776107205343, 6.6971714819210355, 4.425675111629923, 6.662747104816615, 3.770712458042847, 3.4211776107205343, 4.378376998760617, 4.108914682687087, 3.2885209232740116, 4.489886127884419, 10.497737851556401, 8.651706072738891, 7.207254918221999, 6.217612879940706, 2.559811116658798, 8.806390080478254, 6.465095380410868, 3.7533486821494053, 1.96230214603978, 8.202438661763951, 1.6657104825108449, 6.127780371459021, 6.574579269553149, 9.463985601015843, 4.306072144190162, 6.318040703270126, 1.66998072718579, 1.6657104825108449, 9.157188741050351, 4.423799986601342, 3.978508580452905, 8.302404273444326, 4.306072144190162, 4.720099924433834, 3.7657903060292512, 7.025489296374252, 7.2404403553653855, 3.9336461146458968, 6.66855943449599, 13.0867977116068, 2.910111843680687, 4.824154183839572, 3.3918351456116578, 1.6571515633588203, 7.460194125265126, 4.016057991109619, 9.511654821395116, 4.669236504748082, 4.158432884000435, 2.3427159874341545, 4.046637559574245, 6.762928778002467, 5.971908130667685, 6.786185966509864, 3.531292002203808, 3.9362205445366385, 6.774215821775979, 2.4157999369152803, 7.350302817144558, 10.045396682701575, 4.182400583376153, 6.562673740029681, 7.690320137070323, 5.8325773406761705, 10.422434066353729, 5.445850194799791, 4.3355941766740935, 4.466172473943519, 7.511157236516359, 8.859007488723579, 4.51602854087765, 9.172338220350344, 7.614952036147819, 11.867838967189314, 3.724200268729151, 6.4768579084715725, 5.778226161935616]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "otherside_rightangle"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert otherside_rightangle(7,8)==10.63014581273465', 'assert otherside_rightangle(3,4)==5', 'assert otherside_rightangle(7,15)==16.55294535724685']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
