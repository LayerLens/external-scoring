import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[-1, 4, 5, -6]], [[-1, -2, 3, 4]], [[-7, -6, 8, 9]], [[]], [[1, -2, 0, -5, 7, -8, 10, 12, 0, -15, 18]], [[-10, -5, -3, 0, 2, 5, 8, -7, 12, 15]], [[-2, -4, -6, -8, -10, 0, 2, 4, 6, 8, 10]], [[-1, -3, -5, -7, -9, -11, 1, 3, 5, 7, 9, 11]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], [[-2, -4, 0, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[-100, -200, 0, 50, -75, 100, -150, 200, 0, -250, 300, -350]], [[1, 2, 3, 4, -5, -6, 7, 8, -9, 10]], [[-1, -5, -7, -9, -11, 1, 3, 5, 7, 9, 11]], [[-2, -4, 0, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4]], [[1, -6, 2, 3, 4, -5, -6, 7, 8, -9, 10, 7]], [[-2, -4, -6, -8, 0, 2, 4, 6, 8, 10]], [[1, -6, 2, 3, 4, -5, -6, 7, 8, -9, 10, 7, -6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18, 6]], [[1, -2, 0, -5, 7, -8, 10, 12, 0, 18, 0]], [[-1, -8, -5, -7, -9, -11, 1, 3, 5, 7, 9, 11]], [[-2, -4, -6, 10, -8, 0, 2, 4, 8, 10]], [[4, -2, -4, 0, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4]], [[-2, -4, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -3, -4]], [[4, -2, -4, 0, 3, 3, -8, -10, 2, 4, 2, 6, 8, -10, -15, -15, -4]], [[-10, -5, -3, 0, 2, 5, 8, -7, 12, 15, -7]], [[-2, -4, -6, -8, -10, 0, 3, 4, 6, 8, 10]], [[1, -2, 0, -5, 7, -8, 10, 12, 0, -15, 18, -2]], [[4, -4, 0, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4]], [[-2, -4, 4, 3, -8, -10, 0, 2, 11, 4, 2, 6, 8, -10, 20, -15, -15, -3, -4]], [[-2, -4, 20, -8, 2, 4, 6, 8, 10]], [[-2, 11, 0, 3, 3, -8, -11, 20, -250, 0, 2, 4, 2, 6, 8, -10, -15, 18, 6]], [[1, -2, 0, 1, -5, 7, -8, 10, 12, 0, -15, 18, -2, 12]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18, 6, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 7, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 7, 10, 6]], [[-350, -2, 0, -5, 7, -8, 10, 12, 0, 18, 0]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 4, 2, 6, 8, -10, -15, -15, 18, 6, 6]], [[4, -4, 0, 1, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4, 3]], [[4, -4, 0, 1, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -14, -4, 3]], [[2, 2, 3, 4, 5, 6, 7, 200, 8, 9, 10, 7, 10]], [[1, -2, 0, -14, 7, -8, 10, 300, 0, -15, 17]], [[4, -4, 0, 1, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4, 3, 3]], [[1, 2, 3, 4, -5, -6, 7, 8, -9, 10, -5]], [[-2, -4, -6, -10, 0, 2, 4, 6, 8, 10]], [[-2, 16, -4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18, 6]], [[-2, 16, -4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -11, -15, -15, 18, 6]], [[1, -6, 3, -5, -6, 7, 8, -9, 10, 7, -6, 8]], [[1, -2, 0, -5, 7, -8, 10, 0, 18, 0, 0]], [[-10, -5, -3, -14, 0, 2, 5, 8, -7, 12, 15]], [[-2, -4, 0, 3, 3, -9, -11, 20, 0, 4, 2, 6, 8, -10, -15, 18, 6, 6, 3]], [[1, 2, 3, 4, -5, -6, 7, 8, -9, 10, -5, 7]], [[1, -2, 0, -5, 7, -8, 10, 12, 0, -15, 18, -2, -2]], [[-1, -8, -350, -7, -9, -11, 1, 3, 5, 7, 9, 11, -8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 10]], [[-2, 0, -5, 7, -8, 10, 12, 0, -15, 18]], [[-10, 0, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10]], [[1, -6, 3, -5, -6, 7, 8, -9, 10, 7, -6, 8, 8]], [[1, 2, 2, 4, -5, 3, -6, 7, 8, -9, 10, 11, 7, 7]], [[-2, -4, 0, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -2, -15, -15]], [[4, -2, -4, 0, 3, 2, -8, -10, 4, 2, 6, 8, -10, -15, -15, -4]], [[4, -2, -4, 0, 3, 3, -8, -10, 1, 4, 2, 6, 8, -10, -15, -15, -4]], [[1, -2, 0, -5, 7, -8, 10, 12, 50, 0, -15]], [[-2, -4, -6, -8, 2, 4, 6, 8, 10]], [[1, -6, 15, 3, -5, -6, 7, 8, -9, 10, 7, -6, 8, 8]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18]], [[1, -6, 2, 3, 4, -5, -6, 7, 8, -9, 7, -5]], [[1, -6, 3, -5, -150, -6, 7, 8, -9, 10, 7, -6, 8, 8]], [[-2, -4, 0, 3, 3, -8, -10, 0, 2, 2, 6, 8, -10, -15, -15]], [[-10, 0, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 6, 9, 10]], [[-2, -4, -6, -8, -10, 0, 3, 6, 8, 10]], [[-2, -4, -6, -8, 0, 2, -150, 6, 10, 2]], [[4, -4, 0, 1, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -16, -14, -4, 3]], [[-100, -200, 0, 50, -75, -150, 200, 0, -250, 300, -350]], [[1, 8, -6, 2, 3, 4, -5, -6, 7, 8, -9, 10, 7, -6]], [[4, -2, -75, -4, 0, 3, 3, -8, -10, 1, 4, 2, 6, 8, -10, -15, -15, -4]], [[1, -6, 15, 3, -5, -6, 7, 8, -9, 10, 7, -6, 8, 8, -6]], [[4, -4, -9, 0, 1, 3, 3, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4, 3]], [[-2, -4, 4, 3, -8, -10, 0, 2, 11, 4, 2, 6, 8, -10, -15, -15, -3, -4]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]], [[1, -6, 3, 7, 100, -150, -6, 7, 8, -9, 10, 7, -6, 8, 8]], [[-4, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18, 6, 6]], [[0, 1, 2, 3, 4, 5, 3, 6, 7, 8, 9, 10]], [[-2, -4, -2, 0, 3, 3, -8, -11, 20, 0, 2, 4, 2, 6, 8, -10, -15, -15, 18, 6]], [[-2, -4, -6, -8, 0, 2, 4, 8, 10]], [[-2, -4, 0, 3, 3, -8, -10, 0, 2, 2, 8, -10, -15, -15]], [[-1, -3, -5, -1, -9, -11, 1, 3, 5, 7, 9, 11, 9]], [[1, -6, 15, 3, -5, -6, 7, 8, -9, 10, 7, 8, 8]], [[0, 1, 16, 2, 3, 4, 5, 6, 7, 8, 6, 9, 10]], [[-10, -5, 16, 9, 0, 2, 5, 8, -7, 12, 15]], [[1, 2, 3, 4, -5, -6, 7, 8, -9, 10, -5, 1]], [[4, -2, -75, 0, 3, 3, -8, -10, 1, 4, 2, 6, 8, -10, -15, -15, -4]], [[-2, -4, 4, 3, -8, -10, 2, 11, 4, 2, 6, 8, -10, 20, -15, -15, 6, -3, -4, 2]], [[1, 2, -3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, -5, -6, 4, 8, -9, 10]], [[1, -6, 3, -5, -6, 7, 8, -9, 10, 7, -6, 8, 10]], [[-2, -4, -6, -8, 2, 6, 8, 10]], [[1, 2, 2, 4, -5, 8, 3, -6, 7, 8, -9, 10, 11, 7, 7, -9]], [[-10, -5, -3, -14, 0, 2, -7, 8, -7, 12, 15]], [[-10, 0, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, 10]], [[1, -2, 0, -5, 7, -8, 10, 12, 0, -15, 18, -5]], [[1, -6, 16, 3, -5, -6, 7, -5, 8, -9, 10, 7, -6, 8, 8]], [[-2, -4, 0, 3, 3, -8, -10, 2, 0, 2, 2, 6, 8, -10, -15, -15]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 7, 10, 6]], [[1, 2, 3, 4, 5, 7, 8, 9, 10, 6, 6, 10, 1]], [[1, 2, -3, 4, 5, 6, 7, 8, 9, 10, 8]], [[1, 2, 3, 4, -5, -6, 7, 8, -14, -9, 10]], [[4, -4, 0, 1, 4, 3, -8, -10, 0, 2, 4, 2, 6, 8, -10, -15, -15, -4, 3, 3, 4]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 4, 2, 6, 8, -10, -15, -15, 18, 6, 6, -2]], [[-2, -4, 0, 3, 3, -8, -11, 20, 0, 4, 2, 6, 8, -10, -15, -15, 18, 6, 6, -75]], [[2, -3, 4, 5, 6, 7, 8, 9, 10]]]
results = [[-1, -6], [-1, -2], [-7, -6], [], [-2, -5, -8, -15], [-10, -5, -3, -7], [-2, -4, -6, -8, -10], [-1, -3, -5, -7, -9, -11], [], [], [-2, -4, -8, -10, -10, -15, -15], [], [-100, -200, -75, -150, -250, -350], [-5, -6, -9], [-1, -5, -7, -9, -11], [-2, -4, -8, -10, -10, -15, -15, -4], [-6, -5, -6, -9], [-2, -4, -6, -8], [-6, -5, -6, -9, -6], [], [-2, -4, -8, -11, -10, -15, -15], [-2, -5, -8], [-1, -8, -5, -7, -9, -11], [-2, -4, -6, -8], [-2, -4, -8, -10, -10, -15, -15, -4], [-2, -4, -8, -10, -10, -15, -15, -3, -4], [-2, -4, -8, -10, -10, -15, -15, -4], [-10, -5, -3, -7, -7], [-2, -4, -6, -8, -10], [-2, -5, -8, -15, -2], [-4, -8, -10, -10, -15, -15, -4], [-2, -4, -8, -10, -10, -15, -15, -3, -4], [-2, -4, -8], [-2, -8, -11, -250, -10, -15], [-2, -5, -8, -15, -2], [-2, -4, -8, -11, -10, -15, -15], [], [], [-350, -2, -5, -8], [-2, -4, -8, -11, -10, -15, -15], [-4, -8, -10, -10, -15, -15, -4], [-4, -8, -10, -10, -15, -14, -4], [], [-2, -14, -8, -15], [-4, -8, -10, -10, -15, -15, -4], [-5, -6, -9, -5], [-2, -4, -6, -10], [-2, -4, -8, -11, -10, -15, -15], [-2, -4, -8, -11, -11, -15, -15], [-6, -5, -6, -9, -6], [-2, -5, -8], [-10, -5, -3, -14, -7], [-2, -4, -9, -11, -10, -15], [-5, -6, -9, -5], [-2, -5, -8, -15, -2, -2], [-1, -8, -350, -7, -9, -11, -8], [], [-2, -5, -8, -15], [-10, -10], [-6, -5, -6, -9, -6], [-5, -6, -9], [-2, -4, -8, -10, -10, -2, -15, -15], [-2, -4, -8, -10, -10, -15, -15, -4], [-2, -4, -8, -10, -10, -15, -15, -4], [-2, -5, -8, -15], [-2, -4, -6, -8], [-6, -5, -6, -9, -6], [-2, -4, -8, -11, -10, -15, -15], [-6, -5, -6, -9, -5], [-6, -5, -150, -6, -9, -6], [-2, -4, -8, -10, -10, -15, -15], [-10, -10, -10], [], [-2, -4, -6, -8, -10], [-2, -4, -6, -8, -150], [-4, -8, -10, -10, -16, -14, -4], [-100, -200, -75, -150, -250, -350], [-6, -5, -6, -9, -6], [-2, -75, -4, -8, -10, -10, -15, -15, -4], [-6, -5, -6, -9, -6, -6], [-4, -9, -8, -10, -10, -15, -15, -4], [-2, -4, -8, -10, -10, -15, -15, -3, -4], [], [-6, -150, -6, -9, -6], [-4, -8, -11, -10, -15, -15], [], [-2, -4, -2, -8, -11, -10, -15, -15], [-2, -4, -6, -8], [-2, -4, -8, -10, -10, -15, -15], [-1, -3, -5, -1, -9, -11], [-6, -5, -6, -9], [], [-10, -5, -7], [-5, -6, -9, -5], [-2, -75, -8, -10, -10, -15, -15, -4], [-2, -4, -8, -10, -10, -15, -15, -3, -4], [-3], [-5, -6, -9], [-6, -5, -6, -9, -6], [-2, -4, -6, -8], [-5, -6, -9, -9], [-10, -5, -3, -14, -7, -7], [-10, -10, -10], [-2, -5, -8, -15, -5], [-6, -5, -6, -5, -9, -6], [-2, -4, -8, -10, -10, -15, -15], [], [], [-3], [-5, -6, -14, -9], [-4, -8, -10, -10, -15, -15, -4], [-2, -4, -8, -11, -10, -15, -15, -2], [-2, -4, -8, -11, -10, -15, -15, -75], [-3]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "neg_nos"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert neg_nos([-1,4,5,-6]) == [-1,-6]', 'assert neg_nos([-1,-2,3,4]) == [-1,-2]', 'assert neg_nos([-7,-6,8,9]) == [-7,-6]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
