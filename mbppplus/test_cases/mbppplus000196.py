import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 2, 3, 4, 5], 4], [[2, 3, 4, 5, 6], 8], [[9, 7, 4, 8, 6, 1], 11], [[], 10], [[1, 2, 3, 4, 5], 6], [[], -10], [[-24.9567031174266, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 9], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 6], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], 10], [[True, False, False, False, True, True, False, False, False], -10], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 7], [[True, True, False, False, True, True, False, False, False], -10], [[1, 2, 3, 4, 5], 7], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 8], [[1, 2, 3, 2, 4, 5, 2], 7], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], 3], [[True, True, False, False, True, True, True, False, False], -10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -22.030348483337058, 76.11828953745851, -29.07079657602243], 10], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], 3], [[1, 2, 3, 2, 4, 5, 2], 3], [[-88.95249619481227, -89.04505768413293, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 6], [[1, 2, 3, 4, 5, 3], 6], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], 2], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 4], [[True, True, False, False, False, True, True, False, False, False], -10], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 39.03098002919728, -88.95249619481227, 76.11828953745851, -29.07079657602243], 6], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, -29.07079657602243], 9], [[1, 2, 3, 2, 4, 5, 2], 4], [[1, 2, 3, 2, 4, 5, 3], 7], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], 6], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851], 4], [[76.11828953745851, -24.9567031174266, 76.49684430385265, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851], -10], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], 6], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851, -24.9567031174266], 4], [[-89.9137698848537, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 8], [[44, -55, 10, 9], -10], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, -29.07079657602243], 3], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -88.95249619481227], 10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 9], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 28.64651047073241], 7], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243], 9], [[], 9], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -24.9567031174266, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], 6], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851], 6], [[True, True, False, False, True, True, True, False, False], 6], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 29.445371536010146, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851, -28.530054745009153], 6], [[5], 2], [[-30, -55, 1, -84, 37], -11], [[39.03098002919728, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 9], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[1, 2, 3, 4, 5], 5], [[True, True, False, False, False, True, True, False, True, False, False], -10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 39.03098002919728], 9], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243], 1], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243], 8], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851, -88.95249619481227], 4], [[-102.29228051425821, 28.64651047073241, -24.9567031174266, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], 5], [[-24.9567031174266, -88.95249619481227, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -89.9137698848537, -29.07079657602243], 8], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -88.95249619481227, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851], -11], [[76.11828953745851, -24.9567031174266, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -29.07079657602243], 4], [[True, True, False, True, True, True, False, False], -10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 6], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243], 9], [[1, 2, 3, 2, 4, 5, 2, 2], 8], [[-89.9137698848537, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 9], [[-88.95249619481227, -89.04505768413293, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 7], [[-24.9567031174266, -21.950010757474818, 41.531086520483385, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -29.07079657602243, 76.11828953745851, -29.07079657602243], 4], [[-89.9137698848537, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], -10], [[1, 2, 3, 4, 5], 8], [[True, False, False, False, True, True, False, False, False, False], -10], [[True, True, False, False, True, True, True, False, False, True], 5], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 39.03098002919728, -88.95249619481227, 76.11828953745851, -29.07079657602243], 5], [[-89.9137698848537, -24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243], 8], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], -12], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11523496633954, -29.07079657602243, 76.11828953745851, -88.95249619481227], 10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 39.03098002919728], 5], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -88.95249619481227, -29.07079657602243, 76.11828953745851, -29.07079657602243], 2], [[True, True, False, False, True, True, True, False, False, True], -12], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -24.9567031174266, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 9], [[-24.9567031174266, -21.950010757474818, 41.531086520483385, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -29.07079657602243, 76.11828953745851, -29.07079657602243, -88.95249619481227], 4], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, 76.11828953745851, 76.11828953745851, -28.530054745009153], 6], [[False, True, True, True, False, True], -10], [[True, True, False, True, True, True, False, True], -10], [[True, True, False, False, True, True, True, False, False, True], 9], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, 28.64651047073241, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, 76.11828953745851], -30], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.49684430385265, 76.11828953745851, -29.07079657602243], 7], [[1, 2, 4, 5], 5], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 39.03098002919728], 10], [[-24.9567031174266, -21.950010757474818, 28.64651047073241, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 76.11828953745851, -29.07079657602243], 3], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.27369600369303, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], -30], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -24.9567031174266, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243, 28.64651047073241], 6], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -24.9567031174266, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], 5], [[-88.95249619481227, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 3], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 76.11828953745851, -16.56428238448845, -29.07079657602243], 1], [[-24.9567031174266, -21.950010757474818, -29.07079657602243, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -88.95249619481227, 76.11828953745851, -29.07079657602243], 3], [[-14.595458215631101, 39.03098002919728, 28.64651047073241, 39.03098002919728, -89.04505768413293, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243, 39.03098002919728], 7], [[-24.9567031174266, 76.49684430385265, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, 76.11828953745851, -29.07079657602243, -29.07079657602243, 28.64651047073241], 1], [[76.11828953745851, -24.9567031174266, -21.950010757474818, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, -29.07079657602243, 76.11828953745851, 76.11828953745851, -24.9567031174266], 3], [[-89.9137698848537, 28.64651047073241, 39.03098002919728, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, -29.07079657602243], 10], [[39.03098002919728, 28.64651047073241, 39.03098002919728, -89.27369600369303, -29.07079657602243, -28.530054745009153, -88.95249619481227, 76.11828953745851, 76.11523496633954], -30], [[-102.39704966749818, -21.950010757474818, -102.29228051425821, 28.64651047073241, -24.9567031174266, 76.11828953745851, -29.07079657602243, -28.530054745009153, -21.950010757474818, 76.11828953745851, -29.07079657602243], 4]]
results = [False, True, True, True, True, True, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "check_greater"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert check_greater([1, 2, 3, 4, 5], 4) == False', 'assert check_greater([2, 3, 4, 5, 6], 8) == True', 'assert check_greater([9, 7, 4, 8, 6, 1], 11) == True']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
