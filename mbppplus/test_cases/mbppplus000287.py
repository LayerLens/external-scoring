import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2], [[10, 20, 30], 3], [[12, 15], 5], [[], 3], [[-2, 0, 2, -4, 6], 4], [[0.5, 1.5, 2.5, 3.5], 2], [[-10, -5, 0, 5, 10], 1], [[-3.14, 0, 3.14], 3], [[-100, -50, 0, 50, 100], 0], [[], 2], [[-50, 0, 50, 100], 0], [[-5, 1, 18, 85, 0, 18], 3], [[-100, -50, 0, 50, 100], 1], [[-100, -49, 0, 50, 100], 0], [[-100, -50, 0, 10, 50, 100], 0], [[-10, -5, 0, 5, 10], 2], [[-10, -5, 0, 6, 10], 2], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13], 3], [[-3.14, 0, 3.14], 2], [[50, -100, -49, 0, 50, 100], 0], [[-3.14, -3.14, 0, 3.14], 3], [[-50, 0, 50, 100, 0], 1], [[0.5, 1.5, 2.5, 3.5], 1], [[-10, -5, 0, 5, 10], 0], [[-50, 0, 50, 100, -4, 0], 1], [[-100, -50, 0, 10, 77, 50, 100, -100], 77], [[0.5, 0.5718434373181378, 2.5, 3.5], 2], [[0.5, 2.5, 3.5], 2], [[-100, -50, 0, 50, 1], 0], [[1.405118970978401, 3.5], 2], [[-100, -50, 0, 100, 100], 0], [[1.405118970978401], 2], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100], 9], [[-3.14, -3.14, 0], 4], [[-3.14, -3.14, 0, -3.14], 77], [[-3.14, -3.14, 0, 3.14], 5], [[-10, -5, 0, 5, 10], 85], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100, 77], 9], [[1.405118970978401, 1.405118970978401], 2], [[-10, -5, 0, 5, 5, 10], 85], [[-100, -49, 0, 50, 100], 1], [[2.176651852460075, 1.405118970978401], 1], [[1.405118970978401, 3.5], 18], [[0.9876346699284253, 1.405118970978401], 2], [[50, -5, -100, -49, 0, 50, 100], 0], [[-10, -5, 77, 0, 5, 10], 1], [[2.176651852460075, 0.9876346699284253, 1.405118970978401], 2], [[10, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100, 77], 9], [[-5, 1, 18, 85, 0, 18], 4], [[-10, -5, 0, 5, 10, 5], 0], [[-10, -5, 0, 5, 10, 5], 1], [[-2, 0, 2, -4, 6], 5], [[1.405118970978401, 3.5], 9], [[0.5718434373181378], 2], [[1.5, 2.5, 3.5], 1], [[-10, -5, 77, 0, 5, 10, -10], 1], [[-100, -50, 0, -99, 10, 50, 100], 0], [[-3.14, -3.14, 0, 0], 4], [[-49, 0, 50, 100], 1], [[50, -100, -49, 50, 100], 0], [[1.405118970978401, 1.405118970978401, 1.405118970978401], 2], [[10, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100, 77, 6, 50], 9], [[-100, -50, 0, 50, 1, 49], 0], [[1.405118970978401, 3.5, 1.405118970978401], 2], [[0.5718434373181378, 0.5718434373181378], 2], [[0.5, 1.9139785942066323], 2], [[-10, -5, 0, 5, 10], 50], [[0.9876346699284253, 1.405118970978401], -50], [[-10, -5, 0, 5, 5, 10, 5], 85], [[5, 0, 50, 100], 1], [[-100, -49, 0, 50, 100], 18], [[1.405118970978401, 1.405118970978401, 1.405118970978401], 77], [[-98, 88, 22, 71, 28, -10, 77], 3], [[-100, -50, 0, 50, 1, -100], 71], [[50, -100, 100, 0, 50, 100], 1], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100, 77], 6], [[0.5718434373181378], 0], [[2.176651852460075, 0.9876346699284253, 2.176651852460075], 2], [[-3.14, 0, 3.244354968184857, 3.14], 3], [[0.5, 1.9139785942066323], 1], [[-5, 1, 18, 85, 0, 18], 5], [[5, 0, 50, 99, 100], 1], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13, -100, 77], 10], [[10, 77, -100, 50, 6, 5, 50, -98, 0, 4, -100, 77], 0], [[-3.14, 1.1966863312771978, 0.5, 1.9139785942066323, 0], 4], [[-50, 0, 50, 0], 1], [[0.5, 1.5, 3.2473110594071946, 3.5], 1], [[-3.14, -3.14, 0, 0, -3.14], 3], [[0.9876346699284253], -51], [[3, 77, -100, 50, 6, 5, 50, -98, 0, -13], 4], [[-98, 88, 22, 78, 71, 28, -10, 77], 3], [[0.5, 2.5], 2], [[-10, -5, 0, 6, 10], 3], [[1.5, 2.5, 3.5], 2], [[1.5, 0.9876346699284253], -51], [[-3.14, -3.14, 0], 77], [[1.405118970978401, 1.405118970978401], 9], [[-10, -5, 0, 5, 5, 5, 10], 9], [[-10, 88, -5, 77, 0, 5, 10], 1], [[1.405118970978401, -3.14, 1.405118970978401, 1.405118970978401], 78], [[-3.14, -3.14, 0, 0, 0], 4], [[0.9876346699284253, 1.405118970978401], 3], [[50, -100, 100, 0, 50, 100], 22], [[3.5], 2], [[1.5, 2.5, 3.5], -2], [[-10, 0, 5, 9, 5], 1], [[1.405118970978401, 1.405118970978401, 1.405118970978401], 78], [[0.5, 2.5], 99], [[0.5718434373181378, -3.14, -3.14, 0], 2], [[-3.14, -3.2570960136732894, 0, 0], 4]]
results = [[1, 4, 9, 16, 25, 36, 49, 64, 81, 100], [1000, 8000, 27000], [248832, 759375], [], [16, 0, 16, 256, 1296], [0.25, 2.25, 6.25, 12.25], [-10, -5, 0, 5, 10], [-30.959144000000002, 0, 30.959144000000002], [1, 1, 1, 1, 1], [], [1, 1, 1, 1], [-125, 1, 5832, 614125, 0, 5832], [-100, -50, 0, 50, 100], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [100, 25, 0, 25, 100], [100, 25, 0, 36, 100], [27, 456533, -1000000, 125000, 216, 125, 125000, -941192, 0, -2197], [9.8596, 0, 9.8596], [1, 1, 1, 1, 1, 1], [-30.959144000000002, -30.959144000000002, 0, 30.959144000000002], [-50, 0, 50, 100, 0], [0.5, 1.5, 2.5, 3.5], [1, 1, 1, 1, 1], [-50, 0, 50, 100, -4, 0], [-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, -66174449004242213989712695365597028285264968872070312500000000000000000000000000000000000000000000000000000000000000000000000000000, 0, 100000000000000000000000000000000000000000000000000000000000000000000000000000, 18188037387806198379277339915556929647807403283187048631478337739929618787870634227045716719924575689062274471430368865388203540672666042530996797, 66174449004242213989712695365597028285264968872070312500000000000000000000000000000000000000000000000000000000000000000000000000000, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000], [0.25, 0.327004916803823, 6.25, 12.25], [0.25, 6.25, 12.25], [1, 1, 1, 1, 1], [1.9743593226034009, 12.25], [1, 1, 1, 1, 1], [1.9743593226034009], [19683, 95151694449171437, -1000000000000000000, 1953125000000000, 10077696, 1953125, 1953125000000000, -833747762130149888, 0, -10604499373, -1000000000000000000], [97.21171216000002, 97.21171216000002, 0], [-1.8347753704300173e+38, -1.8347753704300173e+38, 0, -1.8347753704300173e+38], [-305.2447761824001, -305.2447761824001, 0, 305.2447761824001], [-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000, -258493941422821148397315216271863391739316284656524658203125, 0, 258493941422821148397315216271863391739316284656524658203125, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000], [19683, 95151694449171437, -1000000000000000000, 1953125000000000, 10077696, 1953125, 1953125000000000, -833747762130149888, 0, -10604499373, -1000000000000000000, 95151694449171437], [1.9743593226034009, 1.9743593226034009], [-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000, -258493941422821148397315216271863391739316284656524658203125, 0, 258493941422821148397315216271863391739316284656524658203125, 258493941422821148397315216271863391739316284656524658203125, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000], [-100, -49, 0, 50, 100], [2.176651852460075, 1.405118970978401], [455.8644784531237, 6211904899.255558], [0.9754222412446296, 1.9743593226034009], [1, 1, 1, 1, 1, 1, 1], [-10, -5, 77, 0, 5, 10], [4.737813286817876, 0.9754222412446296, 1.9743593226034009], [1000000000, 95151694449171437, -1000000000000000000, 1953125000000000, 10077696, 1953125, 1953125000000000, -833747762130149888, 0, -10604499373, -1000000000000000000, 95151694449171437], [625, 1, 104976, 52200625, 0, 104976], [1, 1, 1, 1, 1, 1], [-10, -5, 0, 5, 10, 5], [-32, 0, 32, -1024, 7776], [21.35098307931332, 78815.638671875], [0.327004916803823], [1.5, 2.5, 3.5], [-10, -5, 77, 0, 5, 10, -10], [1, 1, 1, 1, 1, 1, 1], [97.21171216000002, 97.21171216000002, 0, 0], [-49, 0, 50, 100], [1, 1, 1, 1, 1], [1.9743593226034009, 1.9743593226034009, 1.9743593226034009], [1000000000, 95151694449171437, -1000000000000000000, 1953125000000000, 10077696, 1953125, 1953125000000000, -833747762130149888, 0, -10604499373, -1000000000000000000, 95151694449171437, 10077696, 1953125000000000], [1, 1, 1, 1, 1, 1], [1.9743593226034009, 12.25, 1.9743593226034009], [0.327004916803823, 0.327004916803823], [0.25, 3.6633140590811966], [100000000000000000000000000000000000000000000000000, 88817841970012523233890533447265625, 0, 88817841970012523233890533447265625, 100000000000000000000000000000000000000000000000000], [1.8628747231984095, 4.114765892517103e-08], [-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000, -258493941422821148397315216271863391739316284656524658203125, 0, 258493941422821148397315216271863391739316284656524658203125, 258493941422821148397315216271863391739316284656524658203125, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 258493941422821148397315216271863391739316284656524658203125], [5, 0, 50, 100], [1000000000000000000000000000000000000, 2651730845859653471779023381601, 0, 3814697265625000000000000000000, 1000000000000000000000000000000000000], [236542127065.18347, 236542127065.18347, 236542127065.18347], [-941192, 681472, 10648, 357911, 21952, -1000, 456533], [-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, -4235164736271501695341612503398209810256958007812500000000000000000000000000000000000000000000000000000000000000000000000, 0, 4235164736271501695341612503398209810256958007812500000000000000000000000000000000000000000000000000000000000000000000000, 1, -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000], [50, -100, 100, 0, 50, 100], [729, 208422380089, 1000000000000, 15625000000, 46656, 15625, 15625000000, 885842380864, 0, 4826809, 1000000000000, 208422380089], [1.0], [4.737813286817876, 0.9754222412446296, 4.737813286817876], [-30.959144000000002, 0, 34.1495585717168, 30.959144000000002], [0.5, 1.9139785942066323], [-3125, 1, 1889568, 4437053125, 0, 1889568], [5, 0, 50, 99, 100], [59049, 7326680472586200649, 100000000000000000000, 97656250000000000, 60466176, 9765625, 97656250000000000, 81707280688754689024, 0, 137858491849, 100000000000000000000, 7326680472586200649], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [97.21171216000002, 2.05079061791809, 0.0625, 13.419869895461952, 0], [-50, 0, 50, 0], [0.5, 1.5, 3.2473110594071946, 3.5], [-30.959144000000002, -30.959144000000002, 0, 0, -30.959144000000002], [1.8861981863530708], [81, 35153041, 100000000, 6250000, 1296, 625, 6250000, 92236816, 0, 28561], [-941192, 681472, 10648, 474552, 357911, 21952, -1000, 456533], [0.25, 6.25], [-1000, -125, 0, 216, 1000], [2.25, 6.25, 12.25], [1.0455523636559724e-09, 1.8861981863530708], [-1.8347753704300173e+38, -1.8347753704300173e+38, 0], [21.35098307931332, 21.35098307931332], [-1000000000, -1953125, 0, 1953125, 1953125, 1953125, 1000000000], [-10, 88, -5, 77, 0, 5, 10], [332369830174.8728, 5.761194663150255e+38, 332369830174.8728, 332369830174.8728], [97.21171216000002, 97.21171216000002, 0, 0, 0], [0.9633608232724846, 2.7742097397181036], [23841857910156250000000000000000000000, 100000000000000000000000000000000000000000000, 100000000000000000000000000000000000000000000, 0, 23841857910156250000000000000000000000, 100000000000000000000000000000000000000000000], [12.25], [0.4444444444444444, 0.16, 0.08163265306122448], [-10, 0, 5, 9, 5], [332369830174.8728, 332369830174.8728, 332369830174.8728], [1.5777218104420236e-30, 2.4892061111444566e+39], [0.327004916803823, 9.8596, 9.8596, 0], [97.21171216000002, 112.54397342242135, 0, 0]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "nth_nums"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]', 'assert nth_nums([10,20,30],3)==([1000, 8000, 27000])', 'assert nth_nums([12,15],5)==([248832, 759375])']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
