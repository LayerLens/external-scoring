import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 2, 3, 4, 5, 6]], [[10, 11, 12, 13]], [[7, 8, 9, 1]], [[-3, 0, 5, -9, 10, -13]], [[1, -2, 3, -4, 5, -6, 7, -8, 9, -10]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, -1]], [[-1000, 500, -100, 250, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 600, -700, 800, 900, -1000]], [[-3, 0, 5, -9, 10, -13, 5]], [[12, 43, -56, 78, 90, -34, 64, 0, 23, -12, -1]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, -1, 65]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, 65, -12, 0]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, 23, -12, -1]], [[-3, 0, 5, -9, 10, 1, -13, 5]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, 65, 0]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, -12, -1]], [[12, 43, -56, 78, 90, -34, 64, 0, 23, -12, -1, 90]], [[-3, 0, 5, -9, 10, -13, 5, -13]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -1]], [[-1000, 500, -100, 10, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 600, -700, 800, 900, -1000]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, -12, -1, -13]], [[12, 43, -56, 78, 90, 65, 0, 23, -1, 12]], [[12, 43, -56, 78, 90, -34, 65, 0, 0, 23, -12, 65, -12, 0]], [[-3, 0, 5, -9, 10, -13, 1, -13]], [[-3, 0, 5, -9, 10, -13, 1, -13, 10]], [[12, 43, -56, 78, 90, -34, 64, 0, 23, -12]], [[12, 350, 43, -56, 78, 90, -34, 65, 0, 23, -12, 65, -12, 0, 90]], [[-3, 0, 5, -9, 10]], [[12, 350, 43, -56, 78, 90, -34, 65, 0, 23, -12, 65, 0, 90]], [[12, 43, -56, 78, 90, 65, 0, 23, -1, 12, 43]], [[0, 5, -9, 10]], [[12, 43, 5, 78, 90, -34, 65, 0, 0, 23, -12, 65, -12, 0]], [[12, 43, 78, 90, -34, 65, 0, 23, -12, 65, 0]], [[False, False, False]], [[12, -56, 78, 90, -34, 65, 0, 23, -12, 65, 0]], [[-3, 0, 5, 10, -13, 1, -13]], [[9, 43, -56, 78, 90, -34, 65, 0, 23, -12, -1, 65, 78]], [[-3, 10, 0, 5, 10, -13]], [[-3, 0, 5, -9, 10, -13, 1, -13, 0]], [[-3, 0, 5, -9, 10, 12, -13, 1, -13, 0]], [[12, 43, -56, 78, -13, -450, 90, -34, 64, 0, -12, -1, -13]], [[12, 43, -56, 78, -13, 90, 64, 0, 23, -12, -1, -1]], [[-50, 43, -56, 78, -13, 90, -34, 64, 0, 23, -12, -1]], [[500, 0, 5, -9, 10, -13]], [[1, -2, 6, 3, 100, 5, -6, 7, -8, 9]], [[12, 250, -56, 78, 90, -34, 64, 0, 23, 90, -12, -1, 90, -12]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, -1, -34]], [[-3, -50, -9, 9, -13, 0]], [[12, 43, -56, 78, 90, -34, 64, 0, 77, 23, -12, -1, 90]], [[12, 43, -56, 78, 90, 65, -56, 0, 23, -1, 12]], [[12, -56, 78, 90, 10, -34, 65, 0, 23, -12, 65, 0]], [[12, 43, -56, 78, -13, -450, 90, -34, 64, 0, 9, -12, -1, -13]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, 65, -11, -12, 0]], [[-3, 5, -9, 10, 1, -13, 5]], [[77, -3, 5, -9, 10, 1, -13, 5]], [[13, 43, -56, 78, 90, 65, -56, 0, 23, -1, 12]], [[12, -56, 78, 90, 10, -6, 65, 0, 23, -12, 65, 0]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, 23, -12, -1, 23]], [[-3, 5, -9, 10, -13]], [[12, 43, -56, 78, -13, 90, -1000, 77, 0, 23, -12, -1, 23]], [[-3, 0, -13, -9, 10, -13, 5, -13]], [[-3, 0, 5, 10, 10, 1, -13, 5]], [[-3, 0, 5, 10, 10, 1, -13]], [[12, 43, -56, 78, 90, -34, 64, 0, 23, -12, -1, 90, 64]], [[-3, 0, 5, -9, 10, 1, -13]], [[12, -56, 78, 90, -34, 0, 23, -12, 65, 0, 0]], [[12, 43, -56, 78, 90, -34, 65, 0, 23, -12, 900, -11, -12, 0]], [[12, 43, 78, 90, -34, 65, 0, 78, 23, -12, 65, 0, 0]], [[12, -56, 78, 90, 10, -6, 65, 0, 23, -12, 65, 0, 12]], [[12, 43, -56, 78, 43, -34, 65, 0, 23, -1, 43]], [[-3, 0, 5, -1, 10, -13, 1, -13]], [[12, 43, -56, 400, 90, -34, 64, 0, 23, -12, -1, 90]], [[43, -56, 78, 90, 77, -34, -12, 0, -12, -1, 65, 78]], [[0, 5, 10]], [[-3, 0, -9, 10, -13, 1, -13]], [[43, 5, 78, 90, -34, 65, 0, 0, 23, -12, 65, -12, -1]], [[-1000, 500, -100, 10, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 600, -700, 800, 900, -1000, 10]], [[-1000, 500, -100, 250, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 1, -700, 800, 900, -1000]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, 23, -12, -1, 23, 0]], [[-1000, 599, 500, -100, 10, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 600, -700, 800, 900, -1000]], [[12, 350, 43, -56, 78, 90, -34, 65, 0, 23, -12, 0, -9, 90]], [[-1000, 500, -100, 250, 100, -50, 0, 150, 200, -300, 400, -450, 500, 600, -700, 800, 900, -1000]], [[12, -56, 78, 90, -34, 65, 0, 23, -12, 65, 65, 0]], [[12, 43, -56, 78, 90, -34, 64, 0, -9, 77, 23, -12, -1, 90]], [[-12, 43, -56, 78, -13, 90, -34, 64, 0, 23, -12, -1, 23, 0]], [[12, 350, 43, -56, 78, -34, 90, -34, 65, 0, 23, -12, 65, 0, 90, 65]], [[5, 78, 90, -34, 65, 0, 0, 23, -12, 65, -12, -1]], [[12, 350, 43, -56, 78, 90, -34, 0, 23, -12, 0, -9, 90, 23]], [[12, -56, 78, 90, 10, -34, 65, 0, 23, -12, 65, 5]], [[12, -56, 78, 90, 65, 0, 23, -12, 65, 0, 90]], [[-1000, 599, 500, -100, 10, 100, -50, 0, 150, 200, -300, 350, 400, -450, 500, 6, 600, -700, 800, 900, -1000]], [[-12, 43, -56, 78, -13, 90, -34, 64, 0, -12, -1, 23, 0, 78]], [[12, 43, -56, 78, 90, -34, 64, 0, 23, -12, 0]], [[12, -56, 78, 90, 90, -34, 65, 0, 23, -12, 65, 0]], [[-3, -50, -9, 9, -100, -13, 0]], [[12, -56, 78, 90, -34, 65, 0, 23, -12, 65, 65, 0, 0]], [[12, 43, -56, 78, -13, 90, -34, 64, 0, -12, -1, 90, -1]], [[12, 43, -56, 78, 43, -34, 65, 0, 23, -1, 43, 23]], [[12, 43, -56, -35, 78, 90, -34, 65, 0, 23, -12, 65, -12, 0]], [[12, 43, -56, 400, 90, -34, -9, 0, 23, -12, -1, 90]], [[12, 43, -56, 90, -34, 64, 0, 77, 23, -12, -1, 90]], [[12, 43, -56, 400, 90, -34, -9, 0, 23, -12, -1]], [[12, 43, 78, 90, -34, 65, 0, 64, 78, 23, -12, 65, 0, 0, 90]], [[12, 43, -56, 78, -34, 64, 0, 77, 23, -12, -1, 90]], [[43, 5, 78, 90, -34, 65, 0, 0, 23, -12, 65, -10, -1]], [[-3, 5, -9, 10, -13, 1, -13, 10]], [[12, 43, -56, 78, 90, 65, 0, 23, -1, 12, 44]], [[11, 12, 43, -56, 78, 90, -34, 65, 0, -35, -12, 65, -12, 0, 65, -12]]]
results = [[1, 3, 5], [11, 13], [7, 9, 1], [-3, 5, -9, -13], [1, 3, 5, 7, 9], [43, 65, 23, -1], [], [-3, 5, -9, -13, 5], [43, 23, -1], [43, 65, 23, -1, 65], [43, 65, 23, 65], [43, -13, 23, -1], [-3, 5, -9, 1, -13, 5], [43, 65, 23, 65], [43, -13, -1], [43, 23, -1], [-3, 5, -9, -13, 5, -13], [43, 65, 23, -1], [], [43, -13, -1, -13], [43, 65, 23, -1], [43, 65, 23, 65], [-3, 5, -9, -13, 1, -13], [-3, 5, -9, -13, 1, -13], [43, 23], [43, 65, 23, 65], [-3, 5, -9], [43, 65, 23, 65], [43, 65, 23, -1, 43], [5, -9], [43, 5, 65, 23, 65], [43, 65, 23, 65], [], [65, 23, 65], [-3, 5, -13, 1, -13], [9, 43, 65, 23, -1, 65], [-3, 5, -13], [-3, 5, -9, -13, 1, -13], [-3, 5, -9, -13, 1, -13], [43, -13, -1, -13], [43, -13, 23, -1, -1], [43, -13, 23, -1], [5, -9, -13], [1, 3, 5, 7, 9], [23, -1], [43, 65, 23, -1], [-3, -9, 9, -13], [43, 77, 23, -1], [43, 65, 23, -1], [65, 23, 65], [43, -13, 9, -1, -13], [43, 65, 23, 65, -11], [-3, 5, -9, 1, -13, 5], [77, -3, 5, -9, 1, -13, 5], [13, 43, 65, 23, -1], [65, 23, 65], [43, -13, 23, -1, 23], [-3, 5, -9, -13], [43, -13, 77, 23, -1, 23], [-3, -13, -9, -13, 5, -13], [-3, 5, 1, -13, 5], [-3, 5, 1, -13], [43, 23, -1], [-3, 5, -9, 1, -13], [23, 65], [43, 65, 23, -11], [43, 65, 23, 65], [65, 23, 65], [43, 43, 65, 23, -1, 43], [-3, 5, -1, -13, 1, -13], [43, 23, -1], [43, 77, -1, 65], [5], [-3, -9, -13, 1, -13], [43, 5, 65, 23, 65, -1], [], [1], [43, -13, 23, -1, 23], [599], [43, 65, 23, -9], [], [65, 23, 65, 65], [43, -9, 77, 23, -1], [43, -13, 23, -1, 23], [43, 65, 23, 65, 65], [5, 65, 23, 65, -1], [43, 23, -9, 23], [65, 23, 65, 5], [65, 23, 65], [599], [43, -13, -1, 23], [43, 23], [65, 23, 65], [-3, -9, 9, -13], [65, 23, 65, 65], [43, -13, -1, -1], [43, 43, 65, 23, -1, 43, 23], [43, -35, 65, 23, 65], [43, -9, 23, -1], [43, 77, 23, -1], [43, -9, 23, -1], [43, 65, 23, 65], [43, 77, 23, -1], [43, 5, 65, 23, 65, -1], [-3, 5, -9, -13, 1, -13], [43, 65, 23, -1], [11, 43, 65, -35, 65, 65]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "Split"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert Split([1,2,3,4,5,6]) == [1,3,5]', 'assert Split([10,11,12,13]) == [11,13]', 'assert Split([7,8,9,1]) == [7,9,1]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
