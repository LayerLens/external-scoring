import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[[1, 2, 3], [4, 5]]], [[[9, 8, 1], [1, 2]]], [[]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 2, 3], [4], [5, 6, 7, 8]]], [[[9], [1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[[1], [2], [3], [4], [5]]], [[[1], [2, 3], [4], [5, 6], [7], [8, 9]]], [[['a', 'b', 'c'], [1, 2, 3], [True, False]]], [[[1.5, 2.75, 3.25], ['apple', 'banana', 'cherry'], [True, False, True]]], [[[[1, 2], [3, 4], [5, 6]], ['cat', 'dog'], [None]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]]], [[[['a'], [1], [True]], [['b'], [2], [False]], [['c'], [3], [True]]]], [[[[9], [8], [1]], [[1], [2], [3]], [[4], [5], [6]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8], [9]], [[10, 11, 12], [13, 14]]]], [[[[1, 2, 3], [4]], [[5, 6, 7], [8]], [[9, 10], [11, 12]], [[13, 14], [15]]]], [[[['apple', 'banana'], {'carrot': 'potato'}, 100], [True, False]]], [[[['b', 'a'], ['d', 'c'], ['e', 'f']], [[1, 2, 3], [4, 5, 6]]]], [[[{'A': [1, 2, 3]}, {'B': [4, 5, 6]}, {'C': [7, 8, 9]}], [[10, 20, 30], [40, 50, 60]]]], [[[['red', 'green'], ['blue', 'yellow']], [[100, 200], [300, 400]]]], [[[['lion', 'tiger'], ['elephant', 'giraffe']], [[True, False], ['yes', 'no']]]], [[[[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]]]], [[[1], [2], [3], [4], [5], [1]]], [[[['red', 'green'], ['blue', 'yellow']], [[200], [300, 400]], [[200], [300, 400]]]], [[[[1, 2, 3], [4]], [[13, 14], [15]]]], [[[[1, 2, 3], [4]], [[13, 14], [], []]]], [[[1, 12], [9], [1, 12], [3, 4, 5], [6, 7, 8, 9]]], [[[[1, 2], [3, 4]], [[5, 6]], [[5, 6]], [[9, 10], [11, 12]]]], [[[['a'], [1], [True]], [['b'], [2], [False]], [[3], [True]]]], [[[1, 2, 3], [4], [6, 7, 8], [1, 2, 3]]], [[[[5, 6]], [[5, 6]], [[9, 10], [11, 12]]]], [[[[9], [8], [1]], [[2], [3]], [[4], [5], [6]]]], [[[['a'], [1], [True]], [['b'], [2], [False]], [['c'], [3], [True, True]]]], [[[True, False], [True, False]]], [[[1], [2], [3], [4]]], [[[2.75, 3.25], ['apple', 'banana', 'cherry'], [2.75, 3.25], [True, False, True]]], [[[2], [3], [4]]], [[[['b'], [2], [False]], [[3], [True]], [['a'], [1], [True]]]], [[[[1, 2, 3], [4]], [[13, 14], [], []], [[13, 14], [], []]]], [[[[1, 2, 3], [4]], [[13, 14]], [[13, 14]]]], [[[['red', 'green'], ['blue', 'yellow']], [[200], [300, 400]], [[200], [300, 400]], [[200], [300, 400]]]], [[[True, True, False, False], [True, True, False, False], [True, True, False, False], [True, True, False, False]]], [[[['red', 'green'], ['blue', 'yellow']]]], [[[[1, 2, 3], [4]], [[13, 14, 14], [13, 14, 14], [], []], [[13, 14, 14], [13, 14, 14], [], []]]], [[[[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]]]], [[[[1, 2, 3], [4]], [[13, 14], [], [], [13, 14]], [[1, 2, 3], [4]]]], [[[[13, 14]], [[13, 14]]]], [[[[5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5]], [[9, 10], [11, 12]]]], [[[1, 12], [9], [3, 4, 5], [6, 7, 8, 9]]], [[[['a'], [1], [True]], [['b'], [2], [False]], [[3], [True]], [[3], [True]]]], [[[[[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]]]], [[[{'A': [1, 2, 3]}, {'B': [4, 5, 6]}, {'C': [7, 8, 9]}], [[10, 20, 30], [40, 50, 60], [40, 50, 60]]]], [[[[1, 2, 3], [4]], [[13, 14, 13], [], [13, 14, 13], []]]], [[[3, 3], [1], [2], [3, 3], [4]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]], [[1, 2], [3, 4]]]], [[[['a'], [1], [True]], [['b'], [2], [False]], [[3], [True]], [[3], [True]], [[3], [True]]]], [[[1, 12], [9], [1, 12], [3, 4, 5], [6, 7, 8, 9, 7]]], [[[['red', 'green'], ['blue', 'yellow']], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]]]], [[[[1, 2, 3], [4, 5, 6], [4, 5, 6]], [[1, 2, 3], [4, 5, 6], [4, 5, 6]], [[7, 8], [9]], [[10, 11, 12], [13, 14]]]], [[[1, 12], [9], [1, 12], [3, 4, 5], [6, 7, 8, 9], [1, 12], [1, 12], [1, 12]]], [[[1, 12, 1], [9], [1, 12, 1], [3, 4, 5], [6, 7, 8, 9]]], [[[12], [9], [12], [3, 4, 5], [6, 7, 8, 9, 7]]], [[[[1, 2, 3], [4]]]], [[[['red', 'agreen', 'green'], ['blue', 'yellow']], [[200, 200], [300, 400], [200, 200], [300, 400]], [['red', 'agreen', 'green'], ['blue', 'yellow']], [[200, 200], [300, 400], [200, 200], [300, 400]], [[200, 200], [300, 400], [200, 200], [300, 400]]]], [[[1], [2], [4], [4], [5], [1], [1]]], [[[1, 12], [9], [1, 12], [6, 7, 8, 9]]], [[[2], [4]]], [[[[1, 2, 3], [4, 4]], [[5, 6, 7], [8]], [[9, 10], [11, 12]], [[1, 2, 3], [4, 4]], [[13, 14], [15]]]], [[[[1, 2, 3], [4]], [[13, 14], [13, 14]], [[13, 14], [13, 14]], [[13, 14], [13, 14]]]], [[[[1, 2, 3]], [[13, 14], [], []], [[13, 14], [], []]]], [[[[9], [8], [1]], [[1], [2], [3]], [[4], [5]], [[4], [5]]]], [[[[1, 2, 3], [4]], [[1, 2, 3], [4]]]], [[[[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[9, 10], [11, 12]]]], [[[[2, 1, 2], [2, 1, 2], [3, 4]], [[5, 6], [7, 8]], [[2, 1, 2], [2, 1, 2], [3, 4]], [[9, 10], [11, 12]]]], [[[[[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], []], [[], ['YHSlmRTLE', 'elephant'], []], [[], ['YHSlmRTLE', 'elephant'], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], ['YHSlmRTLE', 'elephant'], []], [[], ['YHSlmRTLE', 'elephant'], []], [[], [], []]]]], [[[[1, 2, 3], [4, 4]], [[5, 6, 7], [8]], [[9, 10, 9], [9, 10, 9], [11, 12]], [[9, 10, 9], [9, 10, 9], [11, 12]], [[1, 2, 3], [4, 4]], [[13, 14], [15]]]], [[[2], [3], [4], [5], [1]]], [[[[1, 2, 3]], [[], []], [[], []], [[], []]]], [[[9], [3, 4, 5], [6, 7, 8, 9]]], [[[['b'], [2], []], [['a'], [1], [True]], [['b'], [2], []], [['c'], [3], [True]]]], [[[[1, 2], [3, 4], [5, 6]], [None]]], [[[True, True, True, False], [True, True, True, False], [True, True, True, False], [True, True, True, False], [True, True, True, False], [True, True, True, False], [True, True, True, False]]], [[[[1, 2], [3, 4]], [[5, 6]], [[5, 6]], [[9, 10], [11, 12], [11, 12]], [[1, 2], [3, 4]]]], [[[27], [3, 2], [3], [4], [5], [3, 2], [27]]], [[[4, 4], [4, 4], [2]]], [[[[3], [True], [True]], [['a'], [1], [True]], [['b'], [2], [False]], [[3], [True], [True]], [[3], [True], [True]], [[3], [True], [True]]]], [[[[1, 2, 3], [4, 4]], [[9, 10], [11, 12]], [[1, 2, 3], [4, 4]], [[13, 14], [15]]]], [[[1, 12], [9, 9], [9, 9], [6, 7, 8, 9]]], [[['apple', 'banana', 'cherry'], [1.5, 3.25], [1.5, 3.25], [True, False, True]]], [[[1], [76, 2], [3], [4], [5]]], [[[1, 12], [9], [1, 12], [3, 4, 5], [6, 7, 8, 9], [1, 12], [1, 12], [1, 12], [1, 12]]], [[[[1, 2, 3]], [[5, 6, 7], [8]], [[9, 10], [11, 12]], [[13, 14], [15]]]], [[[[9], [8], [1]], [[2], [3]]]], [[[True, True, False], [True, True, False], [True, True, False], [True, True, False], [True, True, False], [True, True, False]]], [[[3, 3], [1], [2], [3, 3], [3, 3]]], [[[[1, 2, 3], [4, 4]], [[5, 6, 7], [8]], [[1, 2, 3], [4, 4]], [[13, 14], [15]]]], [[[1, 12], [9], [3, 4, 5], [6, 7, 8, 9], [9]]], [[[2], [4], [2]]], [[[1, 12, 12], [9], [1, 12, 12], [3, 4, 5], [6, 7, 8, 9], [1, 12, 12], [1, 12, 12], [1, 12, 12], [1, 12, 12]]], [[[1, 12], [9], [9], [6, 7, 8, 9]]], [[[4, 5, 6], [7, 8, 200]]], [[[1], [2], [4], [5], [1]]], [[[[1, 2], [3, 4], [5, 6]], ['cat', 'dog']]], [[[1], [2], [3], [4], [5], [5]]], [[[['red', 'green'], ['blue', 'yellow']], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [[200], [300, 400], [300, 400]], [['red', 'green'], ['blue', 'yellow']]]], [[['apple', 'banana', 'cherry'], [1.5, 3.25, 3.25], [1.5, 3.25, 3.25]]], [[[[], [1], [True]], [['b'], [2], [False]], [[], [1], [True]], [[3], [True]], [[3], [True]], [[3], [True]]]], [[[[13, 14, 13], [False, False], [], [13, 14, 13], []], [[1, 2, 3], [4]], [[13, 14, 13], [False, False], [], [13, 14, 13], []], [[13, 14, 13], [False, False], [], [13, 14, 13], []]]], [[[1], [1], [9], [1], [3, 4, 5], [6, 7, 8, 9, 7]]], [[[1], [2], [3], [4], [5, 5], [5, 5]]], [[[1], [2, 2], [3, 3], [4], [5]]], [[[True, False, False], [True, False, False], [True, False, False], [True, False, False]]], [[[[3], [True, True], [True, True]], [[3], [True, True], [True, True]], [['a'], [1], [True]], [['b'], [2], [False]], [[3], [True, True], [True, True]], [[3], [True, True], [True, True]], [[3], [True, True], [True, True]]]], [[[['b'], [2], []], [['a'], [1], [False]], [['b'], [2], []], [['a'], [1], [False]], [['c'], [3], [True]]]], [[[4], [4], [2], [4]]], [[[[1, 2, 3]], [[]], [[]], [[]], [[1, 2, 3]]]], [[[[1, 2, 3], [4]], [[13, 14, 14], [13, 14, 14], [], []], [[13, 14, 14], [13, 14, 14], [], []], [[1, 2, 3], [4]]]], [[[True, True, False], [True, True, False], [True, True, False], [True, True, False], [True, True, False], [True, True, False], [True, True, False], [True, True, False]]], [[[['b'], [2], []], [['a'], [1], [True]], [['b'], [2], []], [['c'], [3], [True]], [['b'], [2], []]]], [[[[[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]]], [[[], [], []], [[], ['YHSlmRTLE', 'elephant'], []], [[], ['YHSlmRTLE', 'elephant'], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], [], []], [[], [], []]], [[[], [], []], [[], ['YHSlmRTLE', 'elephant'], []], [[], ['YHSlmRTLE', 'elephant'], []], [[], [], []]]]], [[[[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[5, 6, 5], [5, 6, 5], [5, 6, 5]], [[9, 10], [11, 12, 12]]]], [[[[9], [8], [1, 1]], [[2], [3], [3]], [[2], [3], [3]], [[5], [6]], [[9], [8], [1, 1]], [[5], [6]]]]]
results = [[1, 3, 6], [1, 4], [9, 1], [], [1, 4, 7], [1, 4, 5], [9, 1, 3, 6], [1, 2, 3, 4, 5], [1, 2, 4, 5, 7, 8], ['a', 1, True], [1.5, 'apple', True], [[1, 2], 'cat', None], [[1, 2], [5, 6], [9, 10]], [['a'], ['b'], ['c']], [[9], [1], [4]], [[1, 2, 3], [7, 8], [10, 11, 12]], [[1, 2, 3], [5, 6, 7], [9, 10], [13, 14]], [['apple', 'banana'], True], [['b', 'a'], [1, 2, 3]], [{'A': [1, 2, 3]}, [10, 20, 30]], [['red', 'green'], [100, 200]], [['lion', 'tiger'], [True, False]], [[[], [], []], [[], [], []], [[], [], []]], [1, 2, 3, 4, 5, 1], [['red', 'green'], [200], [200]], [[1, 2, 3], [13, 14]], [[1, 2, 3], [13, 14]], [1, 9, 1, 3, 6], [[1, 2], [5, 6], [5, 6], [9, 10]], [['a'], ['b'], [3]], [1, 4, 6, 1], [[5, 6], [5, 6], [9, 10]], [[9], [2], [4]], [['a'], ['b'], ['c']], [True, True], [1, 2, 3, 4], [2.75, 'apple', 2.75, True], [2, 3, 4], [['b'], [3], ['a']], [[1, 2, 3], [13, 14], [13, 14]], [[1, 2, 3], [13, 14], [13, 14]], [['red', 'green'], [200], [200], [200]], [True, True, True, True], [['red', 'green']], [[1, 2, 3], [13, 14, 14], [13, 14, 14]], [[[], [], []], [[], [], []], [[], [], []], [[], [], []]], [[1, 2, 3], [13, 14], [1, 2, 3]], [[13, 14], [13, 14]], [[5, 6, 5], [5, 6, 5], [5, 6, 5], [9, 10]], [1, 9, 3, 6], [['a'], ['b'], [3], [3]], [[[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []]], [{'A': [1, 2, 3]}, [10, 20, 30]], [[1, 2, 3], [13, 14, 13]], [3, 1, 2, 3, 4], [[1, 2], [5, 6], [9, 10], [1, 2]], [['a'], ['b'], [3], [3], [3]], [1, 9, 1, 3, 6], [['red', 'green'], [200], [200], [200], [200]], [[1, 2, 3], [1, 2, 3], [7, 8], [10, 11, 12]], [1, 9, 1, 3, 6, 1, 1, 1], [1, 9, 1, 3, 6], [12, 9, 12, 3, 6], [[1, 2, 3]], [['red', 'agreen', 'green'], [200, 200], ['red', 'agreen', 'green'], [200, 200], [200, 200]], [1, 2, 4, 4, 5, 1, 1], [1, 9, 1, 6], [2, 4], [[1, 2, 3], [5, 6, 7], [9, 10], [1, 2, 3], [13, 14]], [[1, 2, 3], [13, 14], [13, 14], [13, 14]], [[1, 2, 3], [13, 14], [13, 14]], [[9], [1], [4], [4]], [[1, 2, 3], [1, 2, 3]], [[5, 6, 5], [5, 6, 5], [5, 6, 5], [9, 10]], [[2, 1, 2], [5, 6], [2, 1, 2], [9, 10]], [[[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []]], [[1, 2, 3], [5, 6, 7], [9, 10, 9], [9, 10, 9], [1, 2, 3], [13, 14]], [2, 3, 4, 5, 1], [[1, 2, 3], [], [], []], [9, 3, 6], [['b'], ['a'], ['b'], ['c']], [[1, 2], None], [True, True, True, True, True, True, True], [[1, 2], [5, 6], [5, 6], [9, 10], [1, 2]], [27, 3, 3, 4, 5, 3, 27], [4, 4, 2], [[3], ['a'], ['b'], [3], [3], [3]], [[1, 2, 3], [9, 10], [1, 2, 3], [13, 14]], [1, 9, 9, 6], ['apple', 1.5, 1.5, True], [1, 76, 3, 4, 5], [1, 9, 1, 3, 6, 1, 1, 1, 1], [[1, 2, 3], [5, 6, 7], [9, 10], [13, 14]], [[9], [2]], [True, True, True, True, True, True], [3, 1, 2, 3, 3], [[1, 2, 3], [5, 6, 7], [1, 2, 3], [13, 14]], [1, 9, 3, 6, 9], [2, 4, 2], [1, 9, 1, 3, 6, 1, 1, 1, 1], [1, 9, 9, 6], [4, 7], [1, 2, 4, 5, 1], [[1, 2], 'cat'], [1, 2, 3, 4, 5, 5], [['red', 'green'], [200], [200], [200], [200], [200], ['red', 'green']], ['apple', 1.5, 1.5], [[], ['b'], [], [3], [3], [3]], [[13, 14, 13], [1, 2, 3], [13, 14, 13], [13, 14, 13]], [1, 1, 9, 1, 3, 6], [1, 2, 3, 4, 5, 5], [1, 2, 3, 4, 5], [True, True, True, True], [[3], [3], ['a'], ['b'], [3], [3], [3]], [['b'], ['a'], ['b'], ['a'], ['c']], [4, 4, 2, 4], [[1, 2, 3], [], [], [], [1, 2, 3]], [[1, 2, 3], [13, 14, 14], [13, 14, 14], [1, 2, 3]], [True, True, True, True, True, True, True, True], [['b'], ['a'], ['b'], ['c'], ['b']], [[[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], [-68, 400, 11, -57, -70, 76, 50, 27]], [[], [], []], [[], [], []], [[], [], []], [[], [], []]], [[5, 6, 5], [5, 6, 5], [5, 6, 5], [9, 10]], [[9], [2], [2], [5], [9], [5]]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "Extract"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]', 'assert Extract([[1,2,3],[4, 5]]) == [1,4]', 'assert Extract([[9,8,1],[1,2]]) == [9,1]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
