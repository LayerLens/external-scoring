import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [[2, 4, 8, 9], [7, 13, 19, 28], 4], [[3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10], [[1], [2], 1], [[1, 2], [3, 4], 2], [[1, 1, 2, 2, 3], [2, 3, 4, 4, 5], 5], [[3, 6, 14, 23], [2, 18, 27, 39, 49, 55], 4], [[3], [5], 1], [[7], [2], 1], [[2, 3], [4, 5], 2], [[6, 7], [1, 8], 2], [[1, 1, 2, 3], [3, 3, 4, 5], 4], [[5, 6, 6, 7], [3, 4, 7, 7], 4], [[4, 6, 6, 7], [3, 4, 7, 7], 4], [[1], [2], 0], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 8], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 26, 29], 8], [[1], [2, 2], 1], [[2, 1], [2], 1], [[1, 4, 7, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 8], [[3, 3, 4, 5], [3, 3, 4, 5], 4], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 9], [[6, 7], [0, 8], 2], [[1, 1, 2, 3, 3], [3, 3, 4, 5], 4], [[1, 4, 13, 16, 19, 22, 25, 28], [2, 8, 11, 14, 17, 20, 23, 26, 29], 8], [[3, 3, 4, 5, 5], [3, 3, 4, 5, 5], 4], [[1, 4, 7, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 5], [[3, 3, 4, 4, 5], [3, 3, 4, 4, 5], 4], [[6, 26, 7], [0, 8], 2], [[3, 3, 4, 4, 5, 3], [3, 3, 4, 4, 5, 3], 4], [[3, 3, 4, 4, 5, 4], [3, 3, 4, 4, 5, 4], 4], [[3, 3, 4, 4, 5, 3, 3], [3, 3, 4, 4, 5, 3, 3], 4], [[1, 1, 2, 3], [3, 3, 4, 5], 1], [[8], [8], 1], [[4, 6, 6, 7, 6], [3, 4, 7, 7], 3], [[1, 1, 2, 3, 3], [3, 3, 4], 1], [[1, 4, 13, 16, 19, 22, 25, 28], [2, 8, 11, 11, 14, 17, 20, 23, 29], 4], [[3, 3, 4, 5, 5, 5, 3], [3, 3, 4, 5, 5, 5, 3], 4], [[2, 5, 8, 11, 14, 17, 20, 29], [1, 4, 7, 10, 13, 16, 19, 22, 22, 25, 28], 8], [[1, 4, 7, 13, 16, 3, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 5], 5], [[1, 1], [2, 2], 1], [[1, 4, 7, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 4], [[1, 1, 2, 4], [3, 3, 4, 5], 1], [[49, 7], [22, 2], 1], [[3, 3, 4, 4, 5, 4, 3], [3, 3, 4, 4, 5, 4, 3], 4], [[2, 5, 7, 11, 14, 17, 20, 23, 26, 29], [2, 5, 7, 11, 14, 17, 20, 23, 26, 29], 5], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4], 10], [[1, 4, 7, 10, 13, 17, 19, 22, 25, 28, 1, 16], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10], [[7, 26, 7], [0, 8], 2], [[2, 5, 7, 11, 14, 10, 20, 23, 26, 29, 2], [2, 5, 7, 11, 14, 10, 20, 23, 26, 29, 2], 5], [[1, 2, 2], [3, 4], 2], [[2, 5, 7, 11, 14, 10, 20, 23, 26, 29, 2, 23], [2, 5, 7, 11, 14, 10, 20, 23, 26, 29, 2, 23], 5], [[2, 18, 27, 39, 49, 55, 55], [3, 6, 14, 23], 4], [[3, 3, 4, 3, 4, 5], [3, 3, 4, 3, 4, 5], 3], [[2, 4, 7, 11, 14, 10, 20, 23, 26, 29, 2, 23], [2, 4, 7, 11, 14, 10, 20, 23, 26, 29, 2, 23], 5], [[8, 8], [8, 8], 1], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 4], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 4], 10], [[1], [3], 1], [[1, 1, 2, 4], [3, 3, 4, 5], 2], [[2, 4, 7, 11, 14, 17, 20, 23, 26, 29], [2, 4, 7, 11, 14, 17, 20, 23, 26, 29], 5], [[1, 2, 2], [3, 9, 4], 2], [[14, 7], [2], 1], [[8, 8, 8, 8], [8, 8, 8, 8], 1], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4, 19], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4, 19], 10], [[0, 7], [0, 7], 2], [[0, 1, 2, 2, 1], [3, 9, 4], 2], [[7, 26, 7], [0, 8, 8], 2], [[1, 4, 7, 10, 13, 16, 19, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 9], [[5, 5], [3], 1], [[1, 1, 2, 3, 3], [3, 3, 4, 5], 3], [[5, 7], [1, 8], 2], [[26, 1], [2], 1], [[1, 2, 2], [3, 3, 9, 4], 2], [[1, 4, 13, 16, 19, 22, 25, 28], [2, 8, 11, 11, 14, 20, 23, 29], 4], [[3, 3, 4, 49, 4, 5, 3], [3, 3, 4, 49, 4, 5, 3], 4], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 4], [2, 5, 8, 11, 14, 17, 20, 23, 26, 14, 29, 29], 8], [[2, 7], [2, 7], 2], [[19, 0, 1, 2, 27, 4], [19, 0, 1, 2, 27, 4], 1], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 4], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 4], 9], [[14, 17, 7], [14, 17, 7], 2], [[3, 18, 27, 39, 49, 55, 55], [3, 6, 14, 23], 4], [[4, 3], [4, 3], 1], [[1, 4, 13, 16, 29, 19, 22, 25, 28], [2, 8, 11, 11, 14, 17, 20, 23, 29], 4], [[13, 5, 5], [4, 3], 1], [[3, 3, 4, 5, 3], [3, 3, 4, 5, 3], 4], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4, 19], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 1, 4, 19], 9], [[1, 2, 17, 1], [2], 1], [[2, 1], [3, 2], 1], [[3, 9, 4, 4], [3, 9, 4, 4], 2], [[2, 2, 2], [3, 3, 9, 4], 2], [[1, 9], [1, 9], 2], [[7, 8], [7, 8], 1], [[19, 0, 2, 27, 4], [19, 0, 2, 27, 4], 1], [[1, 4, 7, 10, 13, 17, 19, 22, 25, 28, 1, 16], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 9], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 2], [[6, 7], [-1, 0, 8], 2], [[1, 1, 2, 3, 3], [3, 3, 4, 5, 3], 3], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 17], 10], [[13, 5, 5, 13], [4, 3], 1], [[2, 2], [2, 2], 1], [[1, 4, 13, 16, 19, 22, 25, 28], [2, 8, 11, 14, 17, 25, 23, 29], 4], [[13, 5], [4, 4, 3], 1], [[2, 4, 7, 11, 14, 17, 20, 23, 29], [2, 4, 7, 11, 14, 17, 20, 23, 29], 5], [[13, 5, 5], [4, 3, 4], 1], [[1, 4, 7, 10, 13, 16, 19, 25, 28], [2, 5, 8, 11, 14, 16, 17, 20, 23, 26, 29], 9], [[5, 5], [5, 5], 1], [[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 3, 4], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 23, 1, 4, 3, 4], 10], [[2], [5, 5], 1], [[3, 3, 4, 5, 3, 3], [3, 3, 4, 5, 3, 3], 4], [[3, 3, 3, 5, 4, 3], [3, 3, 3, 5, 4, 3], 4], [[1, 2], [3, 3, 9, 4], 2], [[49, 49], [49, 49], 1]]
results = [16.0, 8.5, 25.0, 15.0, 1.5, 2.5, 2.5, 16.0, 4.0, 4.5, 3.5, 6.5, 3.0, 6.0, 6.0, 0.5, 12.0, 12.0, 1.5, 2.0, 13.5, 3.5, 15.0, 13.5, 6.5, 3.0, 16.5, 3.5, 7.5, 3.5, 7.0, 3.5, 3.5, 3.5, 2.0, 8.0, 5.0, 2.0, 9.5, 3.5, 12.0, 7.5, 1.5, 6.0, 2.0, 35.5, 3.5, 7.0, 14.5, 15.5, 7.5, 7.0, 2.5, 7.0, 16.0, 3.0, 7.0, 8.0, 14.5, 2.0, 2.0, 7.0, 2.5, 8.0, 8.0, 14.5, 3.5, 2.0, 7.5, 13.5, 4.0, 2.5, 6.0, 14.0, 2.5, 9.5, 3.5, 12.0, 4.5, 19.0, 13.0, 15.5, 16.0, 4.0, 9.5, 8.5, 3.5, 13.0, 1.5, 2.5, 6.0, 2.5, 5.0, 7.0, 19.0, 13.5, 3.0, 3.0, 2.5, 15.0, 8.5, 2.0, 9.5, 8.5, 7.0, 8.5, 13.5, 5.0, 14.5, 3.5, 3.5, 3.0, 2.5, 49.0]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "get_median"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0', 'assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5', 'assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
