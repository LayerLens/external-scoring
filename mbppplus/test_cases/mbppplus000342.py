import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 1, 2, 3, 3, 4, 4, 5]], [[1, 5, 7, 9, 10]], [[5, 1, 9, 7, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[]], [[1]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]], [['apple', 1, True, 2.5, [1, 2]]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]], [[5, 10, 15, 20, 25, 30, 35]], [[2, 4, 8, 16, 32, 64, 128]], [['a', 'b', 'c', 'd', 'e', 'f', 'g']], [['apple', 'banana', 'cherry', 'date', 'elderberry']], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]], [[1, 2.5, 'hello', True, 3.14, 'world', False]], [['', 'c', 'B', 'vi', 'pAKb', 'c', 'EuUfCuweMj']], [[False, False, False, True, None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a', True, False]], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'a']], [['apple', 1, 3.14, 'appl', True, 2.5, [1, 2]]], [[False, False, False, True, None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a', True]], [['date', 'b', 'c', 'd', 'e', 'f', 'g']], [['date', 'b', 'c', 'd', 'ee', 'f', 'a', 'g']], [['c', 'B', 'vi', 'pAKb', 'c', 'EuUfCuweMj', 'c']], [['apple', 1, True, [1, 2]]], [[39.52616213203228, -64.78484107892933, 2.5, 3.14, -60.839277499671866, 3.14, 2.5, 83.06195985369447]], [[10, 20, 30, 40, 50, 30, 70, 80, 90, 100]], [['Mw', 'luttEB']], [['apple', 1, True, 2.5, [1, 2], 1]], [[20, 30, 40, 50, 30, 100, 70, 80, 90, 100]], [[False, False, False, True, None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a']], [[2, 20, -69, 1, 48, 42, 30]], [['date', 'b', 'c', 'd', 'ee', 'f', 'a', 'g', 'c']], [[-37, 17, 35, 19, 5, -69, 2, 40, 2]], [['apple', 1, True]], [['apple', 1]], [[1, 'hello', True, 3.14, 'world', False]], [['apple', 1, True, 2.5, [1, 2], [1, 2]]], [['Mw', 'luttEB', 'luttEB']], [[False, False, None, False, True, None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a', True]], [['apple', 1, True, 2.5]], [[20, 30, 40, 50, 60, 70, 80, 90, 100]], [['luttEB', 'luttEB']], [['YrFlQtkwMA', 'c', 'B', 'vi', 'pAKb', 'c', 'EuUfCuweMj']], [['apple', 'banana', 'Mw', 'cherry', 'date', 'elderberry']], [[10, 20, 30, 40, 50, 30, 70, 80, 90, 100, 50]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 3]], [['apple']], [[10, 20, 30, 40, 50, 30, 80, 90, 100]], [['a', 'b', 'c', 'd', 'e', 'f', 'EuUfCuweMj', 'g']], [[False, False, True, None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a']], [[5, 15, 20, 25, 30, 35]], [['apple', 'crherry', 'banana', 'cherry', 'cherry', 'b', 'date', 'elderberry']], [[0, 1]], [['applle', 'apple', 1]], [[2, 20, -69, 1, 48, 42, 30, 20]], [[39.52616213203228, 2.5, 3.14, -60.839277499671866, 3.14, 2.5, 83.06195985369447]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 3, 13]], [[1, 'hello', 3.14, 'world', False]], [[10, 20, 30, 40, 50, 30, 80, 21, 100]], [['', 'c', 'B', 'vi', 'pAKb', 'c', 'EuUfCuweMj', 'EuUfCuweMj']], [['applle', 1]], [[20, 30, 40, False, 99, 50, 60, 70, 80, 90, 100]], [[5, 10, 15, 20, 25, 30]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 19]], [[False, False, False, True, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a', True]], [[10, 20, 30, 40, 50, 30, 80, 90, 100, 100]], [['date', 'b', 'c', 'd', 'ee', 'f', 'a', 'g', 'ee']], [['UZHjhsX', 'b', 'Rf', 'pAKb', '', 'apple', 'pAKb', 'xubfwq', '', 'g']], [[False, False, None, False, True, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a', True]], [[1, True, [1, 2]]], [[2, 4, 8, 32, 32, 64, 128, 64]], [[False, False, False, True, None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a', True, False, False, False]], [['apple', 'crherry', 'banana', 'cherry', 'cherry', 'date', 'elderberry']], [['appMw', 'crherry', 'banana', 'cherry', 'cherry', 'b', 'date', 'elderberry']], [[1, True, [100, 2]]], [['', '', '', 'B', 'vi', 'pAKb', 'c', 'EuUfCuweMj']], [[39.52616213203228, -64.78484107892933, 2.5, 3.9503308701348963, -60.839277499671866, 3.14, 2.5, 83.06195985369447]], [[False, False, False, True, None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a', True, False, False]], [[10, 20, 30, 40, 51, 30, 80, 21, 100, 20]], [['', 'c', 'EuUfCuwe', 'B', 'vi', 'pAKb', 'c', 'EuUfCuweMj', 'EuUfCuweMj']], [[10, 30, 40, 50, 30, 80, 90, 100]], [['c', 'd', 'e', 'f', 'g', 'e']], [['c', 'apple', 1]], [[10, 20, 30, 40, 50, 30, 70, 80, 90, 100, 50, 40]], [[1, True, True, [100, 2]]], [[False, False, False, True, None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a', False, False, False, False]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 3, 13, 13]], [['apple', 'crherry', 'b', 'cherry', 'cherry', 'date', 'elderberry']], [['date', 'b', 'c', 'd', 'ee', 'f', 'a', 'g', 'c', 'c']], [[False, False, False, True, None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a', True, False, False, False, False]], [['date', 'd', 'b', 'd', 'e', 'f', 'g']], [['apple', 'apluttEBple', 1]], [['date', 'd', 'b', 'd', 'e', 'f', 'g', 'd']], [['appMw', 'crherry', 'banana', 'cherry', 'cherry', 'b', 'date', 'crherry']], [['apple', 1, [1]]], [[10, 20, 30, 40, 30, 5, 80, 50, 90, 100]], [['apple', 'banana', 'cherry', 'date', 'elderberry', 'apple']], [['apviple', 'apple']], [[20, 30, 40, 50, 30, 128, 100, 70, 80, 90, 100, 30]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 3, 9]], [['apple', 1, [1, 1]]], [[False, False, False, True, None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True, 'a', False, False, False, False, False]], [[1, True, [1, 2, 2], [1, 2], True]], [[5, 10, 15, 20, 25, 35]], [['apluttEBple', 'aplluttEBple', 1]], [['apple', True, 2.5]], [[5, 15, 20, 25, 35]], [[10, 20, 30, 40, 50, 30, 70, 80, -69, 90, 100, 50]], [[-37, 17, 35, 19, 20, 5, -69, 2, 40, 2, -69]], [[0, 'apple', 1]], [[2, 4, 8, 16, 32, 64, 128, 8]], [[2, 128, 8, 32, 32, 64, 127, 64]], [['banana', 'cherry', 'date', 'elderberry']], [['banana', 'cherry', 'date', 'elderberry', 'date']], [['apple', 'dappMwe', 'banana', 'cherry', 'eldeerberry', 'date', 'elderberry']]]
results = [[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)], [(1, 5), (5, 7), (7, 9), (9, 10)], [(5, 1), (1, 9), (9, 7), (7, 10)], [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)], [], [], [(1, 1), (1, 2), (2, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5), (5, 5), (5, 6), (6, 6)], [('apple', 1), (1, True), (True, 2.5), (2.5, [1, 2])], [(10, 20), (20, 30), (30, 40), (40, 50), (50, 60), (60, 70), (70, 80), (80, 90), (90, 100)], [(5, 10), (10, 15), (15, 20), (20, 25), (25, 30), (30, 35)], [(2, 4), (4, 8), (8, 16), (16, 32), (32, 64), (64, 128)], [('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e'), ('e', 'f'), ('f', 'g')], [('apple', 'banana'), ('banana', 'cherry'), ('cherry', 'date'), ('date', 'elderberry')], [(1, 3), (3, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (15, 17), (17, 19)], [(1, 2.5), (2.5, 'hello'), ('hello', True), (True, 3.14), (3.14, 'world'), ('world', False)], [('', 'c'), ('c', 'B'), ('B', 'vi'), ('vi', 'pAKb'), ('pAKb', 'c'), ('c', 'EuUfCuweMj')], [(False, False), (False, False), (False, True), (True, None), (None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a'), ('a', True), (True, False)], [('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e'), ('e', 'f'), ('f', 'g'), ('g', 'a')], [('apple', 1), (1, 3.14), (3.14, 'appl'), ('appl', True), (True, 2.5), (2.5, [1, 2])], [(False, False), (False, False), (False, True), (True, None), (None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a'), ('a', True)], [('date', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e'), ('e', 'f'), ('f', 'g')], [('date', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'ee'), ('ee', 'f'), ('f', 'a'), ('a', 'g')], [('c', 'B'), ('B', 'vi'), ('vi', 'pAKb'), ('pAKb', 'c'), ('c', 'EuUfCuweMj'), ('EuUfCuweMj', 'c')], [('apple', 1), (1, True), (True, [1, 2])], [(39.52616213203228, -64.78484107892933), (-64.78484107892933, 2.5), (2.5, 3.14), (3.14, -60.839277499671866), (-60.839277499671866, 3.14), (3.14, 2.5), (2.5, 83.06195985369447)], [(10, 20), (20, 30), (30, 40), (40, 50), (50, 30), (30, 70), (70, 80), (80, 90), (90, 100)], [('Mw', 'luttEB')], [('apple', 1), (1, True), (True, 2.5), (2.5, [1, 2]), ([1, 2], 1)], [(20, 30), (30, 40), (40, 50), (50, 30), (30, 100), (100, 70), (70, 80), (80, 90), (90, 100)], [(False, False), (False, False), (False, True), (True, None), (None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a')], [(2, 20), (20, -69), (-69, 1), (1, 48), (48, 42), (42, 30)], [('date', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'ee'), ('ee', 'f'), ('f', 'a'), ('a', 'g'), ('g', 'c')], [(-37, 17), (17, 35), (35, 19), (19, 5), (5, -69), (-69, 2), (2, 40), (40, 2)], [('apple', 1), (1, True)], [('apple', 1)], [(1, 'hello'), ('hello', True), (True, 3.14), (3.14, 'world'), ('world', False)], [('apple', 1), (1, True), (True, 2.5), (2.5, [1, 2]), ([1, 2], [1, 2])], [('Mw', 'luttEB'), ('luttEB', 'luttEB')], [(False, False), (False, None), (None, False), (False, True), (True, None), (None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a'), ('a', True)], [('apple', 1), (1, True), (True, 2.5)], [(20, 30), (30, 40), (40, 50), (50, 60), (60, 70), (70, 80), (80, 90), (90, 100)], [('luttEB', 'luttEB')], [('YrFlQtkwMA', 'c'), ('c', 'B'), ('B', 'vi'), ('vi', 'pAKb'), ('pAKb', 'c'), ('c', 'EuUfCuweMj')], [('apple', 'banana'), ('banana', 'Mw'), ('Mw', 'cherry'), ('cherry', 'date'), ('date', 'elderberry')], [(10, 20), (20, 30), (30, 40), (40, 50), (50, 30), (30, 70), (70, 80), (80, 90), (90, 100), (100, 50)], [(1, 3), (3, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (15, 17), (17, 19), (19, 3)], [], [(10, 20), (20, 30), (30, 40), (40, 50), (50, 30), (30, 80), (80, 90), (90, 100)], [('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e'), ('e', 'f'), ('f', 'EuUfCuweMj'), ('EuUfCuweMj', 'g')], [(False, False), (False, True), (True, None), (None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a')], [(5, 15), (15, 20), (20, 25), (25, 30), (30, 35)], [('apple', 'crherry'), ('crherry', 'banana'), ('banana', 'cherry'), ('cherry', 'cherry'), ('cherry', 'b'), ('b', 'date'), ('date', 'elderberry')], [(0, 1)], [('applle', 'apple'), ('apple', 1)], [(2, 20), (20, -69), (-69, 1), (1, 48), (48, 42), (42, 30), (30, 20)], [(39.52616213203228, 2.5), (2.5, 3.14), (3.14, -60.839277499671866), (-60.839277499671866, 3.14), (3.14, 2.5), (2.5, 83.06195985369447)], [(1, 3), (3, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (15, 17), (17, 19), (19, 3), (3, 13)], [(1, 'hello'), ('hello', 3.14), (3.14, 'world'), ('world', False)], [(10, 20), (20, 30), (30, 40), (40, 50), (50, 30), (30, 80), (80, 21), (21, 100)], [('', 'c'), ('c', 'B'), ('B', 'vi'), ('vi', 'pAKb'), ('pAKb', 'c'), ('c', 'EuUfCuweMj'), ('EuUfCuweMj', 'EuUfCuweMj')], [('applle', 1)], [(20, 30), (30, 40), (40, False), (False, 99), (99, 50), (50, 60), (60, 70), (70, 80), (80, 90), (90, 100)], [(5, 10), (10, 15), (15, 20), (20, 25), (25, 30)], [(1, 3), (3, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (15, 17), (17, 19), (19, 19)], [(False, False), (False, False), (False, True), (True, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a'), ('a', True)], [(10, 20), (20, 30), (30, 40), (40, 50), (50, 30), (30, 80), (80, 90), (90, 100), (100, 100)], [('date', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'ee'), ('ee', 'f'), ('f', 'a'), ('a', 'g'), ('g', 'ee')], [('UZHjhsX', 'b'), ('b', 'Rf'), ('Rf', 'pAKb'), ('pAKb', ''), ('', 'apple'), ('apple', 'pAKb'), ('pAKb', 'xubfwq'), ('xubfwq', ''), ('', 'g')], [(False, False), (False, None), (None, False), (False, True), (True, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a'), ('a', True)], [(1, True), (True, [1, 2])], [(2, 4), (4, 8), (8, 32), (32, 32), (32, 64), (64, 128), (128, 64)], [(False, False), (False, False), (False, True), (True, None), (None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a'), ('a', True), (True, False), (False, False), (False, False)], [('apple', 'crherry'), ('crherry', 'banana'), ('banana', 'cherry'), ('cherry', 'cherry'), ('cherry', 'date'), ('date', 'elderberry')], [('appMw', 'crherry'), ('crherry', 'banana'), ('banana', 'cherry'), ('cherry', 'cherry'), ('cherry', 'b'), ('b', 'date'), ('date', 'elderberry')], [(1, True), (True, [100, 2])], [('', ''), ('', ''), ('', 'B'), ('B', 'vi'), ('vi', 'pAKb'), ('pAKb', 'c'), ('c', 'EuUfCuweMj')], [(39.52616213203228, -64.78484107892933), (-64.78484107892933, 2.5), (2.5, 3.9503308701348963), (3.9503308701348963, -60.839277499671866), (-60.839277499671866, 3.14), (3.14, 2.5), (2.5, 83.06195985369447)], [(False, False), (False, False), (False, True), (True, None), (None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a'), ('a', True), (True, False), (False, False)], [(10, 20), (20, 30), (30, 40), (40, 51), (51, 30), (30, 80), (80, 21), (21, 100), (100, 20)], [('', 'c'), ('c', 'EuUfCuwe'), ('EuUfCuwe', 'B'), ('B', 'vi'), ('vi', 'pAKb'), ('pAKb', 'c'), ('c', 'EuUfCuweMj'), ('EuUfCuweMj', 'EuUfCuweMj')], [(10, 30), (30, 40), (40, 50), (50, 30), (30, 80), (80, 90), (90, 100)], [('c', 'd'), ('d', 'e'), ('e', 'f'), ('f', 'g'), ('g', 'e')], [('c', 'apple'), ('apple', 1)], [(10, 20), (20, 30), (30, 40), (40, 50), (50, 30), (30, 70), (70, 80), (80, 90), (90, 100), (100, 50), (50, 40)], [(1, True), (True, True), (True, [100, 2])], [(False, False), (False, False), (False, True), (True, None), (None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a'), ('a', False), (False, False), (False, False), (False, False)], [(1, 3), (3, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (15, 17), (17, 19), (19, 3), (3, 13), (13, 13)], [('apple', 'crherry'), ('crherry', 'b'), ('b', 'cherry'), ('cherry', 'cherry'), ('cherry', 'date'), ('date', 'elderberry')], [('date', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'ee'), ('ee', 'f'), ('f', 'a'), ('a', 'g'), ('g', 'c'), ('c', 'c')], [(False, False), (False, False), (False, True), (True, None), (None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a'), ('a', True), (True, False), (False, False), (False, False), (False, False)], [('date', 'd'), ('d', 'b'), ('b', 'd'), ('d', 'e'), ('e', 'f'), ('f', 'g')], [('apple', 'apluttEBple'), ('apluttEBple', 1)], [('date', 'd'), ('d', 'b'), ('b', 'd'), ('d', 'e'), ('e', 'f'), ('f', 'g'), ('g', 'd')], [('appMw', 'crherry'), ('crherry', 'banana'), ('banana', 'cherry'), ('cherry', 'cherry'), ('cherry', 'b'), ('b', 'date'), ('date', 'crherry')], [('apple', 1), (1, [1])], [(10, 20), (20, 30), (30, 40), (40, 30), (30, 5), (5, 80), (80, 50), (50, 90), (90, 100)], [('apple', 'banana'), ('banana', 'cherry'), ('cherry', 'date'), ('date', 'elderberry'), ('elderberry', 'apple')], [('apviple', 'apple')], [(20, 30), (30, 40), (40, 50), (50, 30), (30, 128), (128, 100), (100, 70), (70, 80), (80, 90), (90, 100), (100, 30)], [(1, 3), (3, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (15, 17), (17, 19), (19, 3), (3, 9)], [('apple', 1), (1, [1, 1])], [(False, False), (False, False), (False, True), (True, None), (None, {'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}), ({'3.14': 'apple', '2.5': 'YrFlQtkwMA', '-63.48479177576927': 'd'}, True), (True, 'a'), ('a', False), (False, False), (False, False), (False, False), (False, False)], [(1, True), (True, [1, 2, 2]), ([1, 2, 2], [1, 2]), ([1, 2], True)], [(5, 10), (10, 15), (15, 20), (20, 25), (25, 35)], [('apluttEBple', 'aplluttEBple'), ('aplluttEBple', 1)], [('apple', True), (True, 2.5)], [(5, 15), (15, 20), (20, 25), (25, 35)], [(10, 20), (20, 30), (30, 40), (40, 50), (50, 30), (30, 70), (70, 80), (80, -69), (-69, 90), (90, 100), (100, 50)], [(-37, 17), (17, 35), (35, 19), (19, 20), (20, 5), (5, -69), (-69, 2), (2, 40), (40, 2), (2, -69)], [(0, 'apple'), ('apple', 1)], [(2, 4), (4, 8), (8, 16), (16, 32), (32, 64), (64, 128), (128, 8)], [(2, 128), (128, 8), (8, 32), (32, 32), (32, 64), (64, 127), (127, 64)], [('banana', 'cherry'), ('cherry', 'date'), ('date', 'elderberry')], [('banana', 'cherry'), ('cherry', 'date'), ('date', 'elderberry'), ('elderberry', 'date')], [('apple', 'dappMwe'), ('dappMwe', 'banana'), ('banana', 'cherry'), ('cherry', 'eldeerberry'), ('eldeerberry', 'date'), ('date', 'elderberry')]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "pair_wise"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]', 'assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]', 'assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]', 'assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
