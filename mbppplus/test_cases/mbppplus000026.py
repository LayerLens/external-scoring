import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[6, 5, 4, 4]], [[1, 2, 2, 3]], [[1, 3, 2]], [[]], [[9, 3, 7, 2, 5, 1, 6]], [[9, 7, 7, 2, 5, 5, 1, 6]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005]], [[43.01465662466188, -69.38224302373561, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, -9.527847657655224, -10.481407073259263, -34.902913681824856, -9.527847657655224]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -9.527847657655224, -10.481407073259263, -64.57664800604005]], [[43.01465662466188, -69.73647736308538, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, -10.481407073259263, -69.73647736308538, 43.01465662466188]], [[43.01465662466188, -34.902913681824856, 42.59716035619264, -69.38224302373561, -9.527847657655224, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[-10.481407073259263, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263]], [[43.01465662466188, -10.481407073259263]], [[9, 5, 3, 7, 2, 5, 1, 1, 2, 6]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263]], [[43.01465662466188, -98.52620778096008, -69.73647736308538, -10.481407073259263]], [[9, 7, 7, 2, 5, 5, 3, 6]], [[-47.55433018390211, -10.481407073259263, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005, -34.902913681824856]], [[-34.902913681824856, -69.38224302373561, -10.481407073259263, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -47.55433018390211, -64.57664800604005]], [[43.01465662466188, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005]], [[41.82235199511542, -68.76772490153975, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005, -69.38224302373561]], [[43.01465662466188, -69.38224302373561, -69.88165026016243, -10.481407073259263, -69.73647736308538, 43.01465662466188, -69.88165026016243]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[-10.481407073259263, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005, -10.481407073259263]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005]], [[-34.902913681824856, -10.481407073259263, -69.38224302373561, -10.481407073259263]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[False, False, False]], [[-34.902913681824856, -69.38224302373561, -10.481407073259263, -94.97100584944054]], [[-34.902913681824856, -10.481407073259263, -94.97100584944054]], [[43.01465662466188, -69.38224302373561, -10.481407073259263, 43.01465662466188]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[-94.97100584944054, -10.481407073259263, -10.481407073259263]], [[43.01465662466188, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, 27.4121976200018, -64.57664800604005]], [[-34.902913681824856, -10.481407073259263, -69.88165026016243, -94.97100584944054]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, 43.01465662466188]], [[42.59716035619264, -68.76772490153975, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561]], [[-34.902913681824856, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005]], [[-34.902913681824856, -9.527847657655224, -10.481407073259263, -94.97100584944054, -34.902913681824856]], [[7, 3, 7, 2, 5, 5, 3, 6]], [[42.59716035619264, -68.76772490153975, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561, 43.01465662466188]], [[False, False, False, False]], [[9, 5, 7, 2, 5, 1, 1, 2, 6]], [[27.4121976200018, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[9, 7, 7, 2, 5, 5, 3, 6, 5]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -94.97100584944054, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -34.902913681824856]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -11.141086666406599, -10.481407073259263, -69.38224302373561]], [[-9.527847657655224, -34.902913681824856, 43.01465662466188, -69.38224302373561, -10.493584737965575, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -9.527847657655224, -10.481407073259263, 27.4121976200018, -64.57664800604005]], [[-34.902913681824856, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005, -10.768528666126521]], [[9, 3, 5, 1, 1]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[-34.902913681824856, 42.81869869284685, -69.38224302373561, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.88165026016243, -64.57664800604005, -34.902913681824856]], [[-34.902913681824856, 43.01465662466188, -64.57664800604005, -10.481407073259263, -64.57664800604005]], [[-34.902913681824856, 42.81869869284685, -69.38224302373561, -10.481407073259263, 43.01465662466188]], [[-96.47330712486206, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[7, 3, 5, -11, -4, 2, 54]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, 43.411858408450954, -10.768528666126521, -35.65861283942265]], [[-96.47330712486206, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -10.768528666126521]], [[-12.580228512164316, 42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -10.481407073259263]], [[9, 4, 3, 7, 2, 5, 1, 1, 2, 6]], [[-34.902913681824856, -69.38224302373561, -10.481407073259263, -94.97100584944054, -34.902913681824856, -10.481407073259263, -94.97100584944054]], [[42.59716035619264, 43.01465662466188, -69.14764750208506, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[43.01465662466188, -34.902913681824856, -49.529210259810306, 42.59716035619264, -69.38224302373561, -9.527847657655224, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, 42.81869869284685, -69.88165026016243, -10.481407073259263, -69.73647736308538, 43.01465662466188, -69.88165026016243]], [[43.01465662466188, -34.902913681824856, -35.42913486984109, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005]], [[True, False, False, False, False]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005, 43.01465662466188, 43.01465662466188]], [[-96.47330712486206, 43.01465662466188, -96.47330712486206, -10.768528666126521, -35.65861283942265, -10.768528666126521]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, 43.411858408450954, -10.768528666126521, -35.65861283942265, 43.411858408450954]], [[42.87694882226923, -12.580228512164316, 42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -10.481407073259263]], [[-34.967048506901335, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005]], [[43.01465662466188, -69.38224302373561, -69.88165026016243, -10.481407073259263, -69.73647736308538, -69.88165026016243]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005, -47.55433018390211]], [[-34.902913681824856, -9.527847657655224, -10.481407073259263, -94.97100584944054]], [[-10.902910189585176, -34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -34.902913681824856]], [[43.01465662466188, -10.481407073259263, 43.01465662466188]], [[42.59716035619264, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -64.57664800604005, -69.38224302373561]], [[9, 3, 3, 7, 2, 5, 1, 1, 2, 6]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -69.14764750208506]], [[42.59716035619264, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561, -10.481407073259263]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, 43.411858408450954, -10.768528666126521, -35.65861283942265, 43.411858408450954, -34.902913681824856]], [[-34.902913681824856, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005, -10.768528666126521, -10.768528666126521]], [[-34.902913681824856, -35.42913486984109, -34.967048506901335, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005, -34.902913681824856]], [[9, 5, 4, 7, 2, 5, 1, 1, 2, 6]], [[42.81869869284685, 43.01465662466188, -96.47330712486206, -10.768528666126521, -35.65861283942265, -10.323022141346687]], [[-34.902913681824856, 43.01465662466188, -69.6514466229769, -10.481407073259263, 43.01465662466188]], [[-96.47330712486206, -34.902913681824856, 43.01465662466188, -34.902913681824856]], [[-9.527847657655224, -34.902913681824856, 43.01465662466188, -10.902910189585176, -10.493584737965575, -64.57664800604005]], [[43.01465662466188, -98.52620778096008, -69.73647736308538, -10.481407073259263, -10.481407073259263, 43.01465662466188]], [[-96.47330712486206, 42.87694882226923, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[43.01465662466188, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -9.527847657655224, -64.57664800604005, 43.01465662466188]], [[-10.768528666126521, -9.527847657655224, -10.481407073259263, -94.97100584944054, -34.902913681824856, -34.902913681824856]]]
results = [True, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, True, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "is_Monotonic"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert is_Monotonic([6, 5, 4, 4]) == True', 'assert is_Monotonic([1, 2, 2, 3]) == True', 'assert is_Monotonic([1, 3, 2]) == False']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
