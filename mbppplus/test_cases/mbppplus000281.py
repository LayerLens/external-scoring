import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)),), (((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)),), (((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)),), (((7, 8, 9), (-2, -4, -6), (0, 20, 30)),), (((-10, 10), (2, -2), (-5, 5), (-1, 1)),), (((1000, 2000, 3000, 4000), (500, 1000, 1500, 2000), (-100, -200, -300, -400)),), (((-7, 14), (-9, 18), (0, 0)),), (((2, 4, 6), (8, 10, 12), (14, 16, 18), (20, 22, 24)),), (((2, 4), (8, 10, 12), (14, 16, 18), (20, 22, 24)),), (((1000,), (500, 1000, 1500, 2000), (-100, -200, -300, -400)),), (((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, -39, 32), (1, 2, 3, -4)),), (((-1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)),), (((7,), (-2, -4, -6), (0, 20, 30)),), (((-10, 10, -5), (2, -2, 3), (-5, 5, -10), (-1, 1, -3)),), (((2, 4, 6), (-8, 10), (14, -16, 18, -20), (22, 24)),), (((-2, 4, 8, -6), (-10, 12, -7), (14, -16, 18, -12), (20, -22, 24)),), (((10, -10, -10, 12, -5), (30, -45, 56), (-81, 80, -39), (32, -1, 2, 3, -4)),), (((7, -9, -1), (-2, -4, -6), (0,), (20, 30, -40)),), ((),), (((1,), (2, 3, 4)),), (((-1, -2, -3, -4), (5, 10, 15)),), (((0, 0, 0, 0), (100, -100, 100, -100), (-100, 100, -100, 100)),), (((-10, -20, -30, -40), (50, 60, 70), (80, 90)),), (((1, 2, 3, 4, 5), (-5, -4, -3, -2, -1), (0, 0, 0, 0)),), (((1, 2, 3, 4, 5, 6, 7), (0, 10, 20, 30, 40, 50), (-9, -6, -3, 0, 3, 6, 9)),), (((-1, 3, -5, 7, -9), (2, -4, 6, -8, 10), (-3, 5, -7, 9, -11)),), (((10, 20, 30), (-10, -20, -30), (100, 200, 300), (-100, -200, -300)),), (((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)),), (((1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11, 12, 13, 14)),), (((1,), (2, 3, 4), (5, 6), (7, 8, 9)),), (((1, 2, 3, 4), (5,), (6, 7, 8), (9, 10, 11, 12)),), (((-7, 5, 13), (1, 2, 3, 4), (-10, -15)),), (((100, 200), (-500, 1000), (0, 0), (10, 20, 30)),), (((11, 22), (33, 44), (55, 66), (77, 88), (99, 110)),), (((-1, -2, -3), (-4, -5, -6), (-7, -8, -9, -10)),), (((-1, 2, 3, 4), (-5, -6), (0, 0, 0, 0)),), (((1,), (2,), (3,), (4,)),), (((-1, -2, -3, -4, -5, -6), (1, 2, 3, 4, 5, 6)),), (((0,), (0,), (0,), (0,)),), (((-1, -2, -3, -4, -5), (1, 2, 3, 4, 5), (-1, -2, -3, -4, -5)),), (((1, 2, 3, 4, 5), (-5, -4, -3, -2, -1), (0, 0, 0, 0), (10, 20, 30)),), (((-1, -2, -3, -4), (-5, -6, -7, -8), (-9, -10, -11, -12), (-13, -14, -15, -16)),), (((1, 3, 5), (2, 4, 6), (10, 20, 30), (100, 200, 300)),), (((0, 0, 0, 0, 0), (1, 1, 1, 1, 1), (2, 2, 2, 2, 2), (3, 3, 3, 3, 3)),), (((1, 2, 3), (4, 5, 6), (7, 8, 9)),), (((1, 1, 1), (2, 2, 2, 2), (3, 3, 3, 3, 3)),), (((-5, 10, -15), (20, -25, 30), (-35, 40, -45)),), (((-1, -2, -3, -4, -5), (-5, -4, -3, -2, -1)),), (((-10, -5, 0), (1, 2, 3), (4, 5, 6), (7, 8, 9)),), (((1.5, 2.5, 3.5, 4.5), (5.5, 6.5, 7.5, 8.5), (9.5, 10.5, 11.5, 12.5), (13.5, 14.5, 15.5, 16.5)),), (((3, 3, 3, 3, 3),),), (((100, 200), (100, 1000), (0, 0), (10, 20, 30)),), (((1000, 2000, 3000, 4000), (500, 1000, 1500, 2000)),), (((2, 4), (8, 10, 12), (8, 10, 12, 10), (20, 22, 24)),), (((501, 1000, 1500, 2000), (1000,), (500, 1000, 1500, 2000), (-100, -200, -300, -400)),), (((1,), (), (3,), (4,)),), (((2, 4, 6), (8, 10, 12), (14, 16, 18), (20, 22, 24), (20, 22, 24)),), (((1, 2, 3, 4), (5,), (6, 7, 8), (9, 10, 11, 12), (9, 10, 11, 12)),), (((2, 4, 6), (2, 4, 90, 6), (8, 10, 12), (14, 16, 18), (20, 22, 24), (20, 22, 24)),), (((1000,), (-100, -200, -300, -400, -400), (500, 1000, 1500, 2000), (-100, -200, -300, -400), (-100, -200, -300, -400)),), (((10, 20, 30), (-10, -20, -30), (-10, -400, -30), (10, -39, 30), (100, 200, 300), (-100, -200, -300), (-10, -20, -30)),), (((-10, 10, -5), (2, -2, 3), (-5, 5, -10), (-1, 1, -3), (-10, 10, -5), (-1, 1, -3)),), (((1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11, 12, 13, 14), (4, 5)),), (((7, 8, 9), (-2, -4, -6), (0, 20, 30), (7, 8, 9)),), (((14, -16, 18, -20), (22, 24)),), (((2, 2, 2, 2), (3, 3, 3, 3, 3)),), (((2, 2, 2, 2, 2), (2, 2, 2, 2), (2, 2, 2, 1, 2), (3, 3, 3, 3, 3)),), (((10, -10, -10, 12, -5), (30, -45, 56), (32, -1, 2, 3, -4)),), (((-1, 1, -5), (81, -60, -39), (-10, 2, 3)),), (((1, 3, 5), (2, 4, 6), (100, 300, 200, 300)),), (((-10, 10, -5), (2, -2, 3), (-1, 1, -3), (-1, 1, -3)),), (((-2, 4, 8, -6, 8), (14, -16, 18, -12), (20, -22)),), (((2, 4, 6), (-8, 10), (2, -3, 4, 6), (14, -16, 18, -20), (22, 24)),), (((2,), (3,), (4,)),), (((-5, 10, -15), (20, -25), (20, -25, 30), (-35, 40, -45)),), (((-10, -20, -30, -40), (50, 60, 70)),), (((-10, -5), (-10, -5, 0), (1, 2, 3), (4, 5, 6), (7, 8, 9)),), (((-2, 4, 8, -6), (-10, 12, -7), (14, -16, 18, -12), (20, -22, 24), (20, -22, 24)),), (((501, 1000, 1500, 2000), (501, 12, 1500, 2000), (1000,), (500, 1000, 1500, 2000), (-100, -200, -300, -400)),), (((-10, 10, -5), (2, -2, 3), (-5, 5, -10), (-1, 1, -3), (-10, 10, -5), (-1, 1, -3), (-10, 10, -5)),), (((0, 0, 0, 3000), (-5,), (0, 0, 0, 0)),), (((-4, -1, -2, -3), (-4, -5, -6), (-7, -8, -9, -10)),), (((-1, -2, -3, -4, -5), (1, 2, 3, 4, 5, 4), (88, -2, -3, -4, -5)),), (((1, 2, 3, 4, 5, 6, 7), (0, 10, 20, 30, 40, 50), (-9, -6, -3, 0, 3, 6, 9, 0)),), (((2,), (4,)),), (((1,), (2, 3, 4), (5, 6), (5, 6)),), (((2, 2, 2, 2, 2), (2, 2, 2, 2), (2, 2, 2, 1, 2), (3, 3, 3, 3, 3), (2, 2, 2, 1, 2)),), (((-10, 10), (2, -2, -2), (-5, 5), (-1, 1)),), (((7, 8, 9), (-2, -4, -6), (0, 20, 30, 20), (7, 8, 9), (-2, -4, -6)),), (((88, -2, -3, -4, -5), (-1, -2, -3, -4, -5, -1), (-1, -2, -3, -4, -5), (30, 1, 2, 3, 4, 5, 4), (88, -2, -3, -4, -5)),), (((1, 2, 3), (4, 5), (1000, 1, 2, 3), (6, 7, 8, 9), (10, 11, 12, 13, 14), (4, 5)),), (((3, 3, 3, 3, 3, 3),),), (((7, 8, 9), (-4, -6), (0, 20, 30), (7, 8, 9)),), (((1, 1, 1), (2, 2, 2, 2), (3, 3, 3, 3, 3), (3, 3, 3, 3, 3)),), (((2, 4, 6), (8, 10, 12), (20, 22, -12), (14, 16, 18), (20, 22, 24)),), (((500, 1000, 1500, 2000), (-100, -200, -300, -400), (500, 1000, 1500, 2000)),), (((1,), (6,), (2, 3, 4), (5, 6), (7, 8, 9)),), (((7, 8, 9), (1, 20, 30), (-2, -4, -6), (1500, -4, -6), (-2, 77, -6), (0, 20, 30)),), (((11, 22, 11), (78, 88), (33, 44), (55, 66), (77, 88), (99, 110), (33, 44)),), (((-10, -200, -5), (2, -2, 3), (-5, 5, -10), (-1, 1, -3), (-10, 10, -5), (-1, 1, -3)),), (((0, 0, 0, 3000), (-5,)),), (((10, 20, 30), (-10, -20, -30), (100, 200, 300), (-100, -200, -300), (-10, -20, -30)),), (((-4, -5, -6), (-7, -8, -9, -10)),), (((-1, 1, -5), (81, -60), (-10, 2, 3, -10), (-10, 2, 3), (-10, 2, 3)),), (((-5, 10, -15), (20, -25, 30), (-35, 40, -45), (-35, 40, -45)),), (((2, 4, 6), (8, 10, 12), (14, 16, 18, 16), (20, 22, 24), (20, 22, 24)),), (((24,),),), (((1, 2, 3), (4, 5), (1000, 1, 2, 3), (6, 7, 8, 9), (4, 5)),), (((-100, -200, -300, -400, -400), (500, 1000, 1500, 2000), (-100, -200, -300, -400), (-100, -200, -300, -400)),), (((1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5, 6), (0, 10, 20, 30, 40, 50), (-9, -6, -3, 0, 3, 6, 9, 0)),), (((2, 2, 2, 2, 2), (2, 2, 2, 2), (2, 2, 2), (2, 2, 2, 2, 2, 2), (2, 2, 2, 1, 2), (3, 3, 3, 3, 3)),), (((-10, 10, -5, -5), (2, -2, 3), (-5, 5, -10), (-1, 1, -3), (-10, 10, -5), (-1, 1, -3), (-10, 10, -5)),), (((-1, -2, -3, -4), (-5, -5, -7, -8), (-9, -10, -11, -12), (-13, -14, -15, -16)),), (((7, 8, 9), (-4, -6), (-12, 20, 30), (7, 8, 9), (-12, 20, 30)),), (((-1, 1, -5, 1), (81, -60), (-10, 2, 3, -10, -10), (-10, 2, 3), (-10, 2, 3)),), (((11, 22, 11), (78, 77, 88), (78, 88), (33, 44), (55, 66), (77, 88), (99, 110), (33, 44)),), (((-1, -2, -3, -4), (5, 10, 15), (5, 10), (-1, -2, -3, -4)),), (((10, -10, -10, 12, -5), (30, -45, 56), (1000, 80, -39), (32, -1, 2, 3, -4)),), (((1, 2, 3), (4, 5, 5), (7, 8, 9), (1, 2, 3), (1, 2, 3)),), (((0, 0, 0, 3000), (-5,), (), (0, 0, 0, 0), (0, 0, 0, 3000)),), (((1,), (2, 3, 4), (5, 6), (7, 8, 9), (1,)),), (((1, 2, 3, 4, 5), (-5, -4, -3, -2, -1), (0, 0, 0, 0), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5)),), (((-1, -2, -3, -4, -5), (-5, -4, -2, -2, -1)),), (((1, 2, 3, 4, 5), (0, 0, 0, 0), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5)),), (((1, 2, 3, 3), (4, 5, 6), (7, 8, 9)),), (((2, 4), (8, 10, 12), (8, 10, 12, 10), (20, 24)),), (((1, 2, 3, 4, 5), (-5, -4, -3, -2, -1), (0, 0, 0, 0), (10, 20, 30), (1, 2, 3, 4, 5)),), (((1000,), (500, 1000, 1500, 2000), (-100, -200, -300, -400), (-100, -200, -300, -400)),), (((-1, -2, -3, -4, -5, -6), (-1, -3, -4, -5, -6), (1, 2, 3, 4, 5, 6)),), (((-1, -2, -3, -4, -5), (1, 2, 3, 4, 5), (-1, -2, -3, -4, -5), (-1, -2, -3, -4, -5)),), (((14, -16, 18, -20), (88, 24)),), (((-1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3), (30, -15, 56)),), (((-1, -2, -3, -4), (-5, -6, -7, -8), (-13, -14, -16), (-9, -10, -11, -12), (-13, -14, -15, -16)),), (((1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11, 12, 13, 14), (4, 5), (6, 7, 8, 9)),), (((88, -2, -3, -4, -5), (-1, -2, -3, -4, -5, -1), (-1, -2, -3, -4, -5), (88, -2, -3, -4, -5)),), (((0, 0, 0, 0, 0), (1, 1, 1, 1, 1), (0, 0, 0, 0, 0, 0), (2, 2, 2, 2, 2), (3, 3, 3, 3, 3)),), (((14, 13, 18, -20), (2, 4, 6), (-8, 10), (14, -16, 18, -20), (23, 22, 24), (22, 24)),), (((100, 200), (100, 1000), (0, 0), (10, 20, 30), (10, 20, 30)),), (((1, 3, 5), (3, 2, 4, 6), (10, 20, 30), (100, 200, 300)),), (((88, -2, -3, -4, -5), (-1, -2, -3, 1500, -4, -5, -1), (-1, -2, -3, -4, -5), (88, -2, -3, -4, -5)),), (((-1, -2, -3), (-5, -6, -7, -8), (-13, -14, -16), (-9, -10, -11, -12, -12), (-13, -14, -15, -16)),), (((1, 2, 3, 4), (5,), (6, 7, 8), (9, 10, 11, 12), (9, 10, 11, 12), (1, 2, 3, 4)),), (((1, 1, 1), (2, 2, 2, 2), (3, 3, 3, 3, 3, 3), (3, 3, 3, 3, 3)),), (((2,), (3,), (4,), (3,)),), (((2, 2, 2, 2, 2), (2, 2, 2, 2), (2, 2, 2), (2, 2, 2, 2, 2, 2), (2, 2, 2, 1, 2), (3, 3, 3, 3, 3), (2, 2, 2, 1, 2), (3, 3, 3, 3, 3)),), (((1.5, 2.5, 3.5, 4.5), (5.5, 8.285192165167475, 7.5, 5.4466803900799565, 8.5), (5.5, 6.5, 7.5, 8.5), (9.5, 10.5, 11.5, 12.5), (5.5, 6.5, 7.5, 5.4466803900799565, 8.5), (13.5, 14.5, 15.5, 16.5)),), (((2, 4, 6, 2), (8, 10, 12), (14, 16, 18, 16), (20, 22, 24), (20, 22, 24)),), (((-1, -2, -3, -4, -5, -6), (1, 2, 3, 4, 5, 6, 6)),), (((-1, -2, -3, -4),),), (((1,), (6,), (2, 3, 4), (5, 6), (6, 6), (7, 8, 9), (2, 3, 4)),)]
results = [[30.5, 34.25, 27.0, 23.25], [25.5, -18.0, 3.75], [305.0, 342.5, 270.0, 232.5], [1.6666666666666667, 8.0, 11.0], [-3.5, 3.5], [466.6666666666667, 933.3333333333334, 1400.0, 1866.6666666666667], [-5.333333333333333, 10.666666666666666], [11.0, 13.0, 15.0], [11.0, 13.0], [466.6666666666667], [30.5, 34.25, 7.5, 21.25], [25.0, -18.0, 3.75], [1.6666666666666667], [-3.5, 3.5, -3.75], [7.5, 5.5], [5.5, -5.5, 10.75], [-2.25, 6.0, 2.25], [6.25], [], [1.5], [2.0, 4.0, 6.0], [0.0, 0.0, 0.0, 0.0], [40.0, 43.333333333333336], [-1.3333333333333333, -0.6666666666666666, 0.0, 0.6666666666666666], [-2.6666666666666665, 2.0, 6.666666666666667, 11.333333333333334, 16.0, 20.666666666666668], [-0.6666666666666666, 1.3333333333333333, -2.0, 2.6666666666666665, -3.3333333333333335], [0.0, 0.0, 0.0], [7.0, 8.0, 9.0, 10.0], [5.25, 6.25], [3.75], [5.25], [-5.333333333333333, -2.6666666666666665], [-97.5, 305.0], [55.0, 66.0], [-4.0, -5.0, -6.0], [-2.0, -1.3333333333333333], [2.5], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0], [-0.3333333333333333, -0.6666666666666666, -1.0, -1.3333333333333333, -1.6666666666666667], [1.5, 4.5, 7.5], [-7.0, -8.0, -9.0, -10.0], [28.25, 56.75, 85.25], [1.5, 1.5, 1.5, 1.5, 1.5], [4.0, 5.0, 6.0], [2.0, 2.0, 2.0], [-6.666666666666667, 8.333333333333334, -10.0], [-3.0, -3.0, -3.0, -3.0, -3.0], [0.5, 2.5, 4.5], [7.5, 8.5, 9.5, 10.5], [3.0, 3.0, 3.0, 3.0, 3.0], [52.5, 305.0], [750.0, 1500.0, 2250.0, 3000.0], [9.5, 11.5], [475.25], [], [12.8, 14.8, 16.8], [6.0], [11.0, 13.0, 29.0], [240.0], [-1.4285714285714286, -65.57142857142857, -4.285714285714286], [-4.166666666666667, 4.166666666666667, -3.8333333333333335], [5.0, 6.0], [3.0, 8.0, 10.5], [18.0, 4.0], [2.5, 2.5, 2.5, 2.5], [2.25, 2.25, 2.25, 2.0], [24.0, -18.666666666666668, 16.0], [23.333333333333332, -19.0, -13.666666666666666], [34.333333333333336, 102.33333333333333, 70.33333333333333], [-2.5, 2.5, -2.0], [10.666666666666666, -11.333333333333334], [6.4, 3.8], [3.0], [0.0, 0.0], [20.0, 20.0, 20.0], [-1.6, 1.0], [8.4, -8.8, 13.4], [480.4], [-5.0, 5.0, -4.0], [-1.6666666666666667], [-5.0, -4.666666666666667, -5.666666666666667], [29.333333333333332, -0.6666666666666666, -1.0, -1.3333333333333333, -1.6666666666666667], [-2.6666666666666665, 2.0, 6.666666666666667, 11.333333333333334, 16.0, 20.666666666666668], [3.0], [3.25], [2.2, 2.2, 2.2, 1.8], [-3.5, 3.5], [2.0, 5.6, 7.2], [40.8, -1.4, -2.0, -2.6, -3.2], [170.83333333333334, 5.166666666666667], [3.0, 3.0, 3.0, 3.0, 3.0, 3.0], [2.5, 7.5], [2.25, 2.25, 2.25], [12.8, 14.8, 9.6], [300.0, 600.0, 900.0, 1200.0], [4.2], [250.66666666666666, 19.5, 8.5], [55.142857142857146, 66.0], [-4.166666666666667, -30.833333333333332, -3.8333333333333335], [-2.5], [-2.0, -4.0, -6.0], [-5.5, -6.5, -7.5], [10.0, -10.6], [-13.75, 16.25, -18.75], [12.8, 14.8, 16.8], [24.0], [203.0, 4.0], [50.0, 100.0, 150.0, 200.0], [-1.75, 2.0, 5.75, 9.5, 13.25, 17.0], [2.1666666666666665, 2.1666666666666665, 2.1666666666666665], [-5.0, 5.0, -4.0], [-7.0, -7.75, -9.0, -10.0], [-2.8, 10.0], [10.0, -10.6], [58.0, 67.375], [2.0, 4.0], [268.0, 6.0, 2.25], [2.8, 3.8, 4.6], [], [3.2], [-0.4, 0.4, 1.2, 2.0], [-3.0, -3.0, -2.5, -3.0, -3.0], [0.75, 1.5, 2.25, 3.0], [4.0, 5.0, 6.0], [9.5, 12.0], [1.4, 4.0, 6.6], [325.0], [-0.3333333333333333, -1.0, -1.3333333333333333, -1.6666666666666667, -2.0], [-0.5, -1.0, -1.5, -2.0, -2.5], [51.0, 4.0], [26.0, -17.4, 14.2], [-8.2, -9.2, -10.4], [5.166666666666667, 6.166666666666667], [43.5, -2.0, -3.0, -4.0, -5.0], [1.2, 1.2, 1.2, 1.2, 1.2], [11.166666666666666, 9.5], [44.0, 248.0], [28.5, 56.25, 84.75], [43.5, -2.0, -3.0, 372.0, -4.75], [-8.2, -9.2, -10.4], [5.166666666666667], [2.25, 2.25, 2.25], [3.0], [2.25, 2.25, 2.25], [6.833333333333333, 8.130865360861245, 8.833333333333334, 8.815560130026652], [12.8, 14.8, 16.8], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, -2.0, -3.0, -4.0], [4.142857142857143]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "average_tuple"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]', 'assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]', 'assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
