import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[(11, 22, 33), (44, 55, 66)]], [[(1, 2, 3), (4, 5, 6, 7)]], [[(1, 2), (3, 4)]], [[(1, 2, 3), (), (4, 5)]], [[(1, 2, 3), (), (4, 5), (6, 7, 8)]], [[(1,), (2, 3), (4, 5, 6), (7, 8, 9, 10), (11, 12, 13, 14, 15)]], [[(1,), (2, 3), (4, 5, 6), (7,)]], [[(1, 2, 3, 4), (5, 6), (7, 8, 9)]], [[(), (1,), (2, 3), (4, 5, 6), (7, 8, 9, 10)]], [[(1, 2, 3), (4, 5), (), (6, 7, 8), (9, 10)]], [[(1, 2, 3), (4,), (5, 6, 7), (8, 9, 10), (11, 12, 13)]], [[(1, 2), (3, 4, 5), (6, 7, 8, 9), (10, 11, 12)]], [[(1, 2, 3), (4, 5), (6, 7), (8, 9), (10,)]], [[(1,), (2, 3), (), (4, 5, 6, 7), (8, 9, 10)]], [[(1, 2, 3, 4, 5), (6, 7, 8), (9, 10, 11, 12)]], [[(1, 2), (3, 4), (5, 6), (7, 8)]], [[(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]], [[(1, 2, 3), (4, 5), (6, 7, 8), (9, 10, 11)]], [[(1, 2), (3, 4), (5, 6, 7), (8,)]], [[(1, 2), (3, 4), (5, 6, 7)]], [[(1,), (2, 3), (4, 5), (6, 7, 8)]], [[(1, 2), (3, 4), (5, 6, 7), (3, 4)]], [[(1, 1), (2, 3), (4, 5, 6), (11, 12, 13, 14, 15), (2, 3)]], [[(1, 2), (1, 2, 3), (), (4, 5), (6, 7, 8)]], [[(1, 2, 3), (4,), (5, 6, 7), (8, 9, 10), (8, 10), (11, 12, 13)]], [[(1, 2, 3, 4, 5), (6, 7, 8), (9, 10, 11, 12), (9, 10, 11, 12, 12)]], [[(1,), (2, 3, 2), (), (4, 5, 6, 7), (8, 9, 10)]], [[(1, 2, 3), (4, 5), (6, 7, 8), (9, 10, 11), (4, 5)]], [[(), (), (2, 3), (4, 5, 6), (7, 8, 9, 10), ()]], [[(1, 2, 3), (), (4, 4, 5)]], [[(2, 3, 2, 3), (1,), (2, 3, 2), (), (4, 5, 6, 7), (8, 11, 10), (8, 9, 10)]], [[(1,), (8, 3), (4, 5), (6, 7, 8)]], [[(1, 2, 3), (3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13)]], [[(1, 2, 3), (4,), (5, 7), (8, 9, 10), (8, 10), (11, 12, 13), (1, 2, 3)]], [[(1,), (2, 3, 2), (4, 5, 6, 7), (8, 9, 10)]], [[(1, 2), (3, 4), (5, 6, 7), (8,), (8,)]], [[(1, 2), (3, 4, 4), (3, 4), (5, 6, 7), (11, 4), (3, 4)]], [[(1, 2, 3), (), (4,), (6, 7, 8)]], [[(1, 2), (3, 4), (5, 6, 7), (3, 4), (1, 2)]], [[(1, 2, 3), (4, 5), (6, 7), (8, 9), (), (10,)]], [[(1, 2), (3, 4, 3), (5, 6, 7), (8,)]], [[(1,), (4, 5), (6, 7, 8)]], [[(1, 2, 3), (4, 5), (6, 7, 8), (9, 10, 5, 11)]], [[(1, 2, 3, 3), (), (9, 10)]], [[(1, 2), (1, 2, 3), (4, 5), (6, 7, 8), (9, 10, 5, 11), (1, 2)]], [[(1, 2), (3,), (5, 6, 5, 7), (8,), (8,)]], [[(2, 3), (4, 5, 6), (11, 12, 13, 14, 15), (14, 2, 3)]], [[(1, 2, 3, 4), (5, 6), (8, 9)]], [[(1, 2, 3), (), ()]], [[(1, 2, 3), (4, 5, 6), (4, 5, 5, 6), (7, 8, 9), (10, 11, 12)]], [[(1, 2), (3, 4), (5, 6, 7), (1, 2)]], [[(1, 2, 3), (4,), (5, 7), (8, 10), (11, 12, 13), (1, 2, 3)]], [[(3, 1, 2), (1, 2), (3, 4), (5, 6, 7), (8,)]], [[(1, 2, 3), (4,), (7, 6, 7), (8, 9), (10,)]], [[(4, 5)]], [[(1, 2), (3, 4), (5, 6, 7), (3, 4), (5, 6, 7)]], [[(1, 2, 3), (4, 5), (5,), (6, 7, 8), (9, 10, 11), (4, 5)]], [[(1, 2, 3), (4, 5, 6), (4, 5, 5, 6), (7, 8, 9), (10, 11, 12), (7, 8, 9)]], [[(1, 2), (3, 4, 4), (3, 4), (5, 6, 7), (11, 4), (3, 4), (11, 11, 4)]], [[(1, 2, 3), (), (4, 5), (7, 8), (7, 8)]], [[(1, 2, 3), (4,), (5, 6, 7), (8, 9, 10), (8, 10), (11, 12, 13), (8, 10)]], [[(1, 2, 3), (7, 2, 3), (4, 5), (6, 7, 8), (9, 10, 11), (4, 5)]], [[(1,), (4, 5, 6), (2, 3, 2), (), (4, 5, 6, 7), (8, 9, 10)]], [[(1, 2), (3, 4), (5, 6, 7), (5, 6, 7)]], [[(2, 3), (4, 5, 6), (11, 12, 13, 14, 15), (14, 2, 3), (11, 12, 13, 14, 15)]], [[(1,), (4, 5, 6), (), (4, 5, 6, 7), (8, 9, 10)]], [[(2,), (3, 4), (5, 6, 7), (3, 4, 4), (3, 4, 4), (3, 4)]], [[(1, 2), (3, 4), (5, 6, 7), (3, 4), (5, 6, 7), (5, 6, 7)]], [[(), (3,), (1,), (2, 3), (4, 5, 6), (7, 8, 9, 10), (2, 3), (1,)]], [[(), (3,), (1,), (2, 3), (4, 5, 6), (7, 8, 9, 10), (1,)]], [[(1,), (2, 2), (3,), (), (4, 5, 6, 7), (8, 9, 9, 10)]], [[(1, 1), (2, 3), (4, 5, 6), (11, 12, 13, 14, 15), (2, 3), (1, 1)]], [[(1, 2), (3, 4, 4), (3, 4), (3, 4, 4), (5, 6, 7), (11, 4), (3, 4), (11, 11, 4)]], [[(1,), (2, 2), (2,), (3,), (4, 5, 6, 7), (8, 9, 9, 10)]], [[(1, 2), (3, 4, 5), (6, 7, 8, 9), (10, 11, 12), (1, 2), (1, 2), (3, 4, 5)]], [[(1,), (8, 3), (4, 5), (4, 1, 5), (6, 7, 8)]], [[(2,), (3, 4), (5, 6, 7), (2, 2), (3, 4, 4), (3, 4, 4), (3, 4)]], [[(1, 1), (2, 3), (4, 5, 6), (11, 12, 13, 14, 15)]], [[(2, 2), (1, 2), (3,)]], [[(1,), (4, 5, 6), (4, 5, 6, 7), (8, 9, 10)]], [[(9, 10, 11, 10), (1, 2, 3), (4, 5), (6,), (5,), (6, 7, 8), (9, 10, 11), (4, 5)]], [[(1,), (4, 5, 6), (2, 3, 2), (), (4, 5, 6, 7), (8, 9, 10), (4, 5, 6, 7)]], [[(), ('D', 'DgNw'), (), (2, 3), (4, 5, 6), (), ()]], [[(1,), (4, 5), (6, 7, 8), (1,)]], [[(1, 2), (3, 4), (5, 6, 7), (3, 4), (8,), (8,)]], [[(4, 5, 5), (1, 2, 3), (), (6, 7, 8), (4, 5)]], [[(4, 5, 5), (1, 2, 3), (), (1, 14, 3), (6, 7, 8), (4, 5)]], [[(1,), (4, 5, 6), (2, 3, 2), (), (8, 9, 10)]], [[(4,), (4, 5)]], [[(1, 2), (3, 4), (5, 6, 7), (7,), (3, 4), (8,), (8,), (8,)]], [[(1, 2, 3), (4, 5), (6, 7, 8), (6, 7, 8, 6), (9, 10, 11)]], [[(1, 2, 3, 4), (5, 6), (6, 8, 9)]], [[(1, 1), (2, 3), (2, 3, 3), (4, 5, 6), (11, 12, 13, 14, 15), (2, 3), (1, 1)]], [[(1, 2, 3), (3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13), (1, 2, 3), (11, 12, 13), (3, 4)]], [[(2, 3), (4, 5, 6), (11, 12, 13, 14, 15), (14, 2, 3), (11, 12, 13, 14, 15), (11, 12, 13, 14, 15)]], [[(1,), (4, 5, 6), (4, 5, 6, 7), (1,)]], [[(9, 10, 11, 10), (1, 2, 3), (4, 5), (5,), (6, 7, 8), (9, 10, 11), (4, 5, 5), (5,)]], [[(1, 1), (2,), (4, 5, 6, 4), (11, 12, 13, 14, 15), (2, 3)]], [[(1, 2, 3), (7, 8, 9), (10, 11, 12)]], [[(3, 3), (1, 1), (2, 3), (4, 5, 6), (5, 12, 13, 14, 15, 12), (2, 3)]], [[(1,), (4, 6, 6), (4, 5, 6, 7), (4, 5, 6, 7, 7), (1,)]], [[(1, 2, 2), (3, 4), (1, 2)]], [[(), ('D', 'DgNw'), (True, True, True, False, True, True), (2, 3), (4, 5, 6), (), (), ()]], [[(1, 2), (3, 4, 5), (6, 7, 8, 9), (10, 11, 12), (1, 2)]], [[(1, 2, 3), (4, 5, 5), (4, 5), (6, 7, 8), (6, 7, 8, 6), (9, 10, 11)]], [[(4, 5), (1, 2, 3), (), (4, 5), (7, 8), (7, 8)]], [[(9, 10, 11, 10), (1, 2, 3), (4, 5), (6, 7, 8), (9, 10, 11), (4, 5, 5), (4, 14), (5,)]], [[(1, 2, 3), (3, 4), (5, 6, 7), (8, 9, 10)]], [[(2, 3), (4, 5, 6), (11, 12, 13, 14, 15), (14, 2, 13, 3), (11, 12, 13, 12, 14, 15)]], [[(2, 3, 2, 3), (1,), (2, 3, 2), ({'-50': -92, '-31': 10, '24': 8, '12': 5}, 'DgNw', True, -66, -77.47956663455827, None, None, False, 'DgNw'), (4, 5, 6, 7), (8, 11, 10), (8, 9, 10)]], [[(6, 7), (6, 7), (1, 2), (3, 4), (5, 6, 7), (1, 2)]], [[(2, 3), (4, 5, 6), (11, 12, 13, 14, 15), (2, 3), (1, 1)]], [[(1, 2, 3, 4), (5, 6), (5, 6, 6), (5, 6)]], [[(1, 2, 3), (1, 7, 2, 3), (3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13), (1, 2, 3), (11, 12, 13), (3, 4), (1, 2, 3), (8, 9, 10)]], [[(1,), (4, 5), (6, 7, 8), (4, 5)]], [[(1,), (6, 7, 8), (1,)]], [[(2,), (3, 4), (5, 6, 7), (2, 2), (3, 4, 4), (3, 4, 4), (2, 3, 2), (3, 4)]], [[(), (1,), (4, 5, 6), (4, 5, 6, 7, 5), (1,)]], [[(1, 2), (3, 4), (5, 6, 7), (3, 4), (3, 4)]], [[(1, 2, 3), ()]], [[(9, 10, 11, 11), (1, 2, 3), (4, 5), (6, 8), (6, 7, 8, 6), (9, 10, 11)]]]
results = [True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "get_equal"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert get_equal([(11, 22, 33), (44, 55, 66)]) == True', 'assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False', 'assert get_equal([(1, 2), (3, 4)]) == True']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
