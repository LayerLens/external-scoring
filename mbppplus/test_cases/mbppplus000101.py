import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[10, 20, 0], [19, 15, 18], [-10, -20, -30], [1000000, 2000000, 3000000], [1000000000, 999999999, 999999998], [1.5, 2.5, 3.5], [-1.75, 0.25, 1.5], [10.75, -2.5, 5.25], [-1.3812949223956517, 0.25, 0.25], [1000000, 2000000, 2000000], [999999, 2000000, 2000000], [999999999, 2000000, 2000000], [0.20488397953788226, 0.25, 1.5], [1.5, 2.5, 3.3437604275080233], [0.25, 1.5, 0.25], [2000000, 1000000000, 3000000], [1000000000, 3000000, 1000000000], [0.25, 0.25, 0.25], [-1.75, 0.25, 0.25], [0.20488397953788226, 2.497409389352824, 3.3437604275080233], [0.17611024919184165, -1.75, 0.25], [999999, 1000000000, 3000000], [1.5, 10.75, 3.5], [3.7890029635472247, 2.5, 3.9317345052748065], [1.5, -1.3812949223956517, 3.3437604275080233], [0.25, 1.5, 1.5], [-2.5, 3.7890029635472247, 5.25], [-1.918312672054964, 0.25, 2.497409389352824], [-1.918312672054964, 0.25, 2.183076392319643], [0.17611024919184165, -1.75, -1.75], [2.5612669577905645, 2.7101763997809707, 2.497409389352824], [2.5, 3.9317345052748065, 3.9317345052748065], [1.5, 1.272867059860154, 1.5], [10.75, 3.006337625967327, 3.5], [-1.75, 10.75, -2.661664813980879], [-2.5, 3.7890029635472247, -2.5], [-1.1167380933821645, 10.75, -2.661664813980879], [999999998, 999999, 1000000001], [2.5, 10.75, 3.5], [1.5, 1.272867059860154, 0.7953338906861538], [-2.860283823066491, 3.7890029635472247, 0.20488397953788226], [2.5, 11.067988481984312, 10.75], [2.183076392319643, 10.75, 10.75], [-1.3322026502757378, 0.20321740000095526, 0.25], [0.20488397953788226, -1.3322026502757378, 3.3437604275080233], [0.25, 0.20321740000095526, 0.25], [2.542576612131854, 3.339994408063236, 2.497409389352824], [999999, 999999999, 999999998], [2000000, 1000000000, 999999999], [999999, 3000000, 1000000000], [1000001, 999999998, 2000000], [0.25, 2.497409389352824, 2.497409389352824], [0.23138836931395312, 1.5, 0.25], [1.5, -1.784944220031555, 3.3437604275080233], [-2.860283823066491, -1.1167380933821645, 0.2317946251259954], [-2.5, -1.75, -1.75], [0.20488397953788226, 3.3437604275080233, 3.3437604275080233], [0.2317946251259954, -1.784944220031555, 1.5], [1.5, 1.5, 1.7539550971097109], [0.2057319869888941, 1.5, 1.7159542385547792], [3000000, 999999998, 1000000000], [0.25, 0.16771769444791357, 0.25], [2.5, 2.005042027615088, 3.9317345052748065], [0.20488397953788226, 0.8948515726423616, 1.7321264212932135], [-3.0180377045824702, 3.7890029635472247, -2.5], [0.17611024919184165, -1.75, 0.2057319869888941], [0.7449345921902422, 2.655338717321931, 3.3437604275080233], [1000000000, 2000000, 999999998], [5.25, -1.1167380933821645, 10.75], [2.655338717321931, 3.3437604275080233, 3.3437604275080233], [-1.1167380933821645, 10.75, 3.006337625967327], [-1.918312672054964, 2.487800059617913, 2.497409389352824], [999999, 2000000, 3000000], [999999998, 1000001, 1000000001], [0.2178481359441579, 0.25, 0.25], [3.3437604275080233, 3.3437604275080233, 3.382112374954924], [999999999, 999999999, 999999998], [2000001, 1000000000, 1000000000], [0.25, 0.7822054945762149, 0.16771769444791357], [2000001, 1000001, 1000000000], [5.25, 3.3437604275080233, 3.382112374954924], [-2.860283823066491, 0.2317946251259954, -1.1167380933821645], [0.20488397953788226, 3.3437604275080233, 0.9749443969127325], [-2.5, 3.5054779127270486, -1.9832450617287465], [-3.684200358639524, 5.551432150054553, 10.75], [-2.419583301611894, 3.382112374954924, 2.5], [-2.5, 3.7890029635472247, -1.3322026502757378], [0.2057319869888941, 1.5, 3.5], [999999999, 999999997, 999999997], [-1.75, -1.75, -1.75], [2000000, 3000001, 3000000], [1.226646627958301, 3.3364402247615583, 2.487800059617913], [1.226646627958301, 2.487800059617913, 2.487800059617913], [3.9317345052748065, 1.272867059860154, 0.7953338906861538], [0.12182452942816296, 0.20488397953788226, 1.7321264212932135], [3.339994408063236, 0.2178481359441579, 1.272867059860154], [0.20488397953788226, 3.3437604275080233, -1.784944220031555], [3.477734585733067, 0.20488397953788226, 3.3437604275080233], [3.3437604275080233, 3.382112374954924, 3.382112374954924], [2000001, 1000000000, 3000000], [0.20488397953788226, 3.5, 0.20488397953788226], [0.17611024919184165, 2.5, 0.2178481359441579], [1.5, 10.75, 4.169373639575513], [-2.860283823066491, -3.1548052929478647, -2.249476681153046], [2.183076392319643, 2.5612669577905645, 3.382112374954924], [1.226646627958301, 2.487800059617913, 1.5], [2.487800059617913, 1.5, 2.487800059617913], [0.20488397953788226, 3.3437604275080233, 0.45168629516729597]]
results = [0, 15, -30, 1000000, 999999998, 1.5, -1.75, -2.5, -1.3812949223956517, 1000000, 999999, 2000000, 0.20488397953788226, 1.5, 0.25, 2000000, 3000000, 0.25, -1.75, 0.20488397953788226, -1.75, 999999, 1.5, 2.5, -1.3812949223956517, 0.25, -2.5, -1.918312672054964, -1.918312672054964, -1.75, 2.497409389352824, 2.5, 1.272867059860154, 3.006337625967327, -2.661664813980879, -2.5, -2.661664813980879, 999999, 2.5, 0.7953338906861538, -2.860283823066491, 2.5, 2.183076392319643, -1.3322026502757378, -1.3322026502757378, 0.20321740000095526, 2.497409389352824, 999999, 2000000, 999999, 1000001, 0.25, 0.23138836931395312, -1.784944220031555, -2.860283823066491, -2.5, 0.20488397953788226, -1.784944220031555, 1.5, 0.2057319869888941, 3000000, 0.16771769444791357, 2.005042027615088, 0.20488397953788226, -3.0180377045824702, -1.75, 0.7449345921902422, 2000000, -1.1167380933821645, 2.655338717321931, -1.1167380933821645, -1.918312672054964, 999999, 1000001, 0.2178481359441579, 3.3437604275080233, 999999998, 2000001, 0.16771769444791357, 1000001, 3.3437604275080233, -2.860283823066491, 0.20488397953788226, -2.5, -3.684200358639524, -2.419583301611894, -2.5, 0.2057319869888941, 999999997, -1.75, 2000000, 1.226646627958301, 1.226646627958301, 0.7953338906861538, 0.12182452942816296, 0.2178481359441579, -1.784944220031555, 0.20488397953788226, 3.3437604275080233, 2000001, 0.20488397953788226, 0.17611024919184165, 1.5, -3.1548052929478647, 2.183076392319643, 1.226646627958301, 1.5, 0.20488397953788226]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "min_of_three"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert min_of_three(10,20,0)==0', 'assert min_of_three(19,15,18)==15', 'assert min_of_three(-10,-20,-30)==-30']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
