import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31], [[12, 32, 45, 62, 35, 47, 44, 61], 61], [[9, 10, 17, 19, 22, 39, 48, 56], 48], [[], 10], [[], 5], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8], 5], [[-3, -2, -1, 0, 1, 2], -2], [[1000000000, 2000000000, 3000000000, 4000000000], 2000000000], [[9, 10, 17, 19, 22, 39, 48, 56], 50], [[], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8], 3000000000], [[], []], [[1000000000, 2000000000, 3000000000, 999999999, 4000000000], [1000000000, 2000000000, 3000000000, 999999999, 4000000000]], [[4000000000, 2000000000, 999999999, 4000000000], [4000000000, 2000000000, 999999999, 4000000000]], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8], 1], [[-3, -2, -1, 0, 1, 2, -2], [-3, -2, -1, 0, 1, 2, -2]], [[9, 10, 3, 19, 22, 39, 48, 56], 50], [[9, 10, 17, 19, 22, 39, 48, 56], 2], [[1000000000, 2000000000, 3000000000, 999999999, 4000000000, 3000000000], [1000000000, 2000000000, 3000000000, 999999999, 4000000000, 3000000000]], [[5, -2, -1, 0, 1, 2], -2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1], 5], [[9, 10, 17, 19, 22, 39, 48, 56, 9], [9, 10, 17, 19, 22, 39, 48, 56, 9]], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 5], 5], [['VgBMzYA', 'vPdnkp', 'YfFpcqtFRz', 'VUS', 'RfrFzbvRve', 'lWGk', 'fCyMNDqiso', 'vSEYYDj'], [2000000000, 'RB']], [[1, 2, 3, 4, 5, 5, 6, 7, 8, 8], 6], [[4000000000, 2000000000, 8, 4000000000], [4000000000, 2000000000, 8, 4000000000]], [[1, 2, 3, 4, 5, 5, 2, 6, 7, 8], 5], [[9, 10, 3, 19, 22, 39, 48, 56], 48], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 3000000000, 8], [1, 2, 3, 4, 5, 5, 5, 6, 7, 3000000000, 8]], [[-3, -2, -1, 0, 1, 2], -1], [[1, 2, 3, 4, 5, 5, 6, 7, 3000000000, 8, 3000000000], [1, 2, 3, 4, 5, 5, 6, 7, 3000000000, 8, 3000000000]], [[9, 10, 17, 19, 22, 39, 1000000000, 48, 56, 9], [9, 10, 17, 19, 22, 39, 1000000000, 48, 56, 9]], [[], 4], [[9, 19, 19, 10, 17, 19, 22, 39, 48, 56, 9, 19], [9, 19, 19, 10, 17, 19, 22, 39, 48, 56, 9, 19]], [[9, 10, 17, 19, 22, 39, 1000000000, 48, 56, 9, 56], [9, 10, 17, 19, 22, 39, 1000000000, 48, 56, 9, 56]], [[1, 2, 3, 4, 5, 5, 6, 7, 8, 8], 5], [[9, 10, 17, 19, 22, 39, 56], 2], [[9, 10, 3, 19, 22, 39, 48, 56], 47], [[2000000000, 8, 4000000000, 4000000000], [2000000000, 8, 4000000000, 4000000000]], [[8, 2000000000, 999999999, 4000000000, 2000000000, 4000000000], [8, 2000000000, 999999999, 4000000000, 2000000000, 4000000000]], [[6, 1, 2, 3, 4, 5, 6, 8, 9, 10, 1, 6], [6, 1, 2, 3, 4, 5, 6, 8, 9, 10, 1, 6]], [[8, 2000000000, 4000000000, 2000000000, 4000000000], [8, 2000000000, 4000000000, 2000000000, 4000000000]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6], [[1, 2, 3, 4, 5, -1, 5, 6, 7, 3000000000, 8, 7], [1, 2, 3, 4, 5, -1, 5, 6, 7, 3000000000, 8, 7]], [[], 7], [[-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2]], [[False, True, True, False], 2], [[2000000000, 1000000000, 8, 4000000000, 4000000000], [2000000000, 1000000000, 8, 4000000000, 4000000000]], [[-3, -2, -1, 0, 1, 2, -1], [-3, -2, -1, 0, 1, 2, -1]], [[2000000000, 39, 1000000000, 8, 4000000000, 4000000000], [2000000000, 39, 1000000000, 8, 4000000000, 4000000000]], [[4000000000, 2000000000, 8, 4000000000, 4000000000], [4000000000, 2000000000, 8, 4000000000, 4000000000]], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 7], [1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 7]], [[1000000000, 2, 2000000000, 3000000000, 999999999, 4000000000], [1000000000, 2, 2000000000, 3000000000, 999999999, 4000000000]], [[9, 10, 3, 19, 22, 39, 48, 56], [9, 10, 3, 19, 22, 39, 48, 56]], [[8, 10, 3, 19, 22, 39, 48, 56], [8, 10, 3, 19, 22, 39, 48, 56]], [[1000000000, 8, 3999999999, -1, 4000000000, 1000000000], [1000000000, 8, 3999999999, -1, 4000000000, 1000000000]], [[9, 10, 17, 19, 47, 22, 1000000000, 48, 9, 56], [9, 10, 17, 19, 47, 22, 1000000000, 48, 9, 56]], [[9, 10, 17, 22, 39, 48, 56], 22], [[10, 3, 19, 22, 39, 48, 56], [10, 3, 19, 22, 39, 48, 56]], [[3999999999, 48, 2000000000, 999999999, 4000000000], [3999999999, 48, 2000000000, 999999999, 4000000000]], [[1000000000, 8, 3999999999, -1, 4000000000], [1000000000, 8, 3999999999, -1, 4000000000]], [[1000000000, -3, -2, -1, 0, 1, 2, -2, 0], [1000000000, -3, -2, -1, 0, 1, 2, -2, 0]], [[1, 2, 3, 4, 5, 7, 9, 9, 10], [1, 2, 3, 4, 5, 7, 9, 9, 10]], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 5], 4], [[False, True], [False, True]], [[9, 19, 19, 10, 17, 19, 22, 39, 48, 56, 19], [9, 19, 19, 10, 17, 19, 22, 39, 48, 56, 19]], [[9, 10, 17, 19, 22, 38, 48, 56], 50], [[1000000000, 2, 2000000000, 3000000000, 999999999, 4000000000, 4000000000], [1000000000, 2, 2000000000, 3000000000, 999999999, 4000000000, 4000000000]], [[9, 10, 17, 22, 39, 48, 56, 22, 48], 21], [[1, 2, 3, 4, 5, 5, 5, 6, 7, 8], 4], [[4000000000, 2000000000, 7, 8, 4000000000], [4000000000, 2000000000, 7, 8, 4000000000]], [[10, 3, 19, 22, 39, 48, 56, 3, 22], [10, 3, 19, 22, 39, 48, 56, 3, 22]], [[5, -2, -1, 0, 1, 2, -2], [5, -2, -1, 0, 1, 2, -2]], [[21, 2000000000, 8, 4000000000, 4000000000], [21, 2000000000, 8, 4000000000, 4000000000]], [[1000000000, 8, 3999999999, -1, 4000000000, 3999999998, 1000000000, 8], [1000000000, 8, 3999999999, -1, 4000000000, 3999999998, 1000000000, 8]], [[8, 10, 3, 19, 22, 39, 56], [8, 10, 3, 19, 22, 39, 56]], [[], 999999999], [[True, True, False, False, False], 21], [[9, 10, 3, 19, 22, 39, 48, 56, 48], 6], [[1000000000, 999999999, 1000000000, 2000000000, 3000000000, 999999999, 4000000000, 3000000000], [1000000000, 999999999, 1000000000, 2000000000, 3000000000, 999999999, 4000000000, 3000000000]], [[1, 2, 1, 3, 4, 5, 5, 5, 6, 7, 8, 8, 7], [1, 2, 1, 3, 4, 5, 5, 5, 6, 7, 8, 8, 7]], [[1, 2, 4, 4, 5, 5, 5, 6, 7, 8, 8], 3000000000], [[10, 3, 19, 39, 56, 3], [10, 3, 19, 39, 56, 3]], [[8, 10, 3, 19, 22, 39, 21, 57], [8, 10, 3, 19, 22, 39, 21, 57]], [[9, 10, 3, 19, 22, 39, 48, 56, 48, 39], [9, 10, 3, 19, 22, 39, 48, 56, 48, 39]], [[9, 10, 17, 19, 22, 39, 1000000000, 56, 9], [9, 10, 17, 19, 22, 39, 1000000000, 56, 9]], [[9, 10, 17, 19, 22, 39, 56, 17], 2], [[1000000000, 2, 3000000001, 2000000000, 3000000000, 999999999, 4000000000], [1000000000, 2, 3000000001, 2000000000, 3000000000, 999999999, 4000000000]], [[-3, -2, -1, 0, 1, 21, 2, -2], [-3, -2, -1, 0, 1, 21, 2, -2]], [[1, 3, 4, 5, 7, 9, 9, 10], [1, 3, 4, 5, 7, 9, 9, 10]], [[8, 3999999999, 3, 2, 19, 22, 39, 21, 57], [8, 3999999999, 3, 2, 19, 22, 39, 21, 57]], [[-2, -1, 0, 1, 3], [-2, -1, 0, 1, 3]], [[10, 17, 19, 47, 22, 1000000000, 48, 9, 56], [10, 17, 19, 47, 22, 1000000000, 48, 9, 56]], [[2000000001, 8, 2000000000, 4000000000, 2000000000, 4000000000], [2000000001, 8, 2000000000, 4000000000, 2000000000, 4000000000]], [[False, False], []], [[True, False, False, False], 21], [[3000000000, 7], [False]], [[9, 10, 17, 22, 39, 48, 56], [9, 10, 17, 22, 39, 48, 56]], [[10, 3, 19, 22, 23, 39, 48, 56, 22, 10], [10, 3, 19, 22, 23, 39, 48, 56, 22, 10]], [[-20, 57, 3999999998, -83, 21, -24, 8, 1000000000, -99], [-20, 57, 3999999998, -83, 21, -24, 8, 1000000000, -99]], [[8, 10, 2, 3, 19, 22, 22, 21, 57, 57], [8, 10, 2, 3, 19, 22, 22, 21, 57, 57]], [[10, 17, 19, 47, 22, 1000000000, 48, 9, 56, 19], [10, 17, 19, 47, 22, 1000000000, 48, 9, 56, 19]], [[1, 2, 3, 4, -83, 5, 5, 5, 6, 7, 8, 8, 7], [1, 2, 3, 4, -83, 5, 5, 5, 6, 7, 8, 8, 7]], [[1, 2, 3, 4, -83, -83, 5, 5, 5, 6, 7, 8, 8, 7], [1, 2, 3, 4, -83, -83, 5, 5, 5, 6, 7, 8, 8, 7]], [[9, 10, 2, 19, 22, 39, 48, 19, 9], [9, 10, 2, 19, 22, 39, 48, 19, 9]], [[3000000000], [3000000000]], [[8, 10, 3, 19, 23, 39, 56], [8, 10, 3, 19, 23, 39, 56]], [[3999999999, 8, 4000000000, 4000000000], [3999999999, 8, 4000000000, 4000000000]], [[38, 10, 17, 19, 22, 39, 47, 1000000000, 48, 56, 9], [38, 10, 17, 19, 22, 39, 47, 1000000000, 48, 56, 9]], [[8, 3, 19, 23, 39, 56], [8, 3, 19, 23, 39, 56]]]
results = [(True, 3), (True, 7), (True, 6), (False, -1), (False, -1), (True, 4), (True, 1), (True, 1), (False, -1), (False, -1), (True, 4), (False, -1), (False, -1), (False, -1), (False, -1), (True, 0), (False, -1), (False, -1), (False, -1), (False, -1), (True, 1), (True, 4), (False, -1), (True, 4), (False, -1), (True, 6), (False, -1), (True, 4), (True, 6), (False, -1), (True, 2), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (True, 4), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (True, 5), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (True, 3), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (True, 3), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (True, 3), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1), (False, -1)]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "sequential_search"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)', 'assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)', 'assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
