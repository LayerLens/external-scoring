import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[('A', 1, 'B', 2, 'C', 3)], [(1, 'Raju', 2, 'Nikhil', 3, 'Deepanshu')], [([1, 'Lion'], [2, 'Tiger'], [3, 'Fox'], [4, 'Wolf'])], [([1, 'Raju'], [2, 'Nikhil'], [3, 'Deepanshu'])], [([1, 'A'], [2, 'B'], [3, 'C'])], [([[1, 'Lion'], [2, 'Tiger']], [[3, 'Fox'], [4, 'Wolf']])], [()], [([[1, [2, 3], 4], [5, [6, 7], 8]], [[9, [10, 11], 12], [13, [14, 15], 16]])], [(['A', 1, 'B', 2, 'C', 3], ['D', 4, 'E', 5, 'F', 6], ['G', 7, 'H', 8, 'I', 9])], [([1, 2], {'3': 'A', '4': 'B'}, [5, 6, 7], ['z', 'y', 'x'])], [([[1, 'A'], [2, 'B']], {'C': [3, 'D'], 'E': [4, 'F']})], [([[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [{'8': [9, 'F'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}]])], [([[1, 2, 3], [4, 5, 6], [7, 8, 9]], {'A': {'B': {'C': 'D'}}})], [([1, {'2': [3, 'A'], '4': 'B'}, [5, [6, 'C']]], [{'7': [8, 'D'], '9': 'E'}, [10, 'F']])], [([[1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]])], [([[]], [])], [([['a', 'b', 'c']], [['d', 'e', 'f'], ['g', 'h', 'i']])], [(['Hello', 123, [1, 2, 3]], [True, False], ['A', 'B', 'C'])], [([['apple', 'banana'], ['cat', 'dog']], [1, 2, 3], [[1, 2, 3], [4, 5, 6]], {'x': 1, 'y': 2, 'z': 3})], [(['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l'], ['m', 'n', 'o'], ['p', 'q', 'r'], ['s', 't', 'u'], ['v', 'w', 'x'], ['y', 'z'])], [([[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant']], [[4, 'Giraffe'], [5, 'Zebra']])], [(['Apple', 1], [[2, 3, 4], {'a': 'A', 'b': 'B'}], [5.5, True])], [([1, 2, 3], ['a', 'b', 'c'], {'x': 10, 'y': 20}, [[1, 2], [3, 4], [5, 6]])], [([[1, 'Lion', ['A', 'B']], [2, 'Tiger', ['C', 'D']]], [[3, 'Elephant', ['E', 'F']], [4, 'Giraffe', ['G', 'H']]])], [([[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}, 1], [1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [{'8': [9, 'F'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}]])], [([],)], [([['d', 'e', 'f'], ['g', 'h', 'i'], ['d', 'e', 'f']], [['d', 'e', 'I'], ['g', 'h', 'i']], [['d', 'e', 'f'], ['g', 'h', 'i']])], [([[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [3, 'Elephant']],)], [([[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [2, 'Tiger']], [[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [2, 'Tiger']])], [([[4, 'Giraffe', ['G', 'H']]],)], [([['d', 'e', 'f'], ['g', 'h', 'i'], ['d', 'e', 'f']], [['d', 'e', 'I'], ['g', 'h', 'i']], [['g', 'h', 'i']])], [([[1, 'Lion', ['A', 'B']], [2, 'Tiger', ['C', 'D']]], [[3, 'Elephant', ['E', 'F']], [4, 'Giraffe', ['G', 'H']]], [[1, 'Lion', ['A', 'B']], [2, 'Tiger', ['C', 'D']]])], [([[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}, 1], [1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]])], [([2, 'Nikhil'], [3, 'Deepanshu'])], [(['Hello', 122, [1, 2, 3]], [True, False], ['A', 'B', 'C'])], [([[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [2, 'Tiger']], [[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [3, 'applelephant', 'Elephant'], [2, 'Tiger']], [[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant']], [[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [2, 'Tiger']])], [([[1, {'2': [3, 'A'], '4': 'B'}, 1], [1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [{'8': [9, 'F'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}]])], [([[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}, 1, 1], [1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [{'8': [9, 'F'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}]])], [([[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}, 5]], [[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}, 5]], [[1, {'2': [3, 'A'], '4': 'B'}, 1], [1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}, 5]], [[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}, 5]])], [([1, 2], {'3': 'A', '4': 'B'}, [5, 6, 7], ['z', 'y', 'x'], {'3': 'A', '4': 'B'})], [([[1, 'Lion', ['A', 'B']], [2, 'Tiger', ['C', 'D']]], [[3, 'Elephant', ['E', 'F']], [2, 'Giraffe', ['G', 'H']], [4, 'Giraffe', ['G', 'H']]])], [([{'7': [8, 'D'], '9': 'E'}, [10, 'F'], {'7': [8, 'D'], '9': 'E'}], [{'7': [8, 'D'], '9': 'E'}, [10, 'F'], {'7': [8, 'D'], '9': 'E'}])], [([1, 3], ['a', 'b', 'c'], {'x': 10, 'y': 20}, [[1, 2], [3, 4], [5, 6]], {'x': 10, 'y': 20})], [(['A', 1, 'B', 2, 'C', 3], ['D', 4, 'E', 5, 'F', 6], ['G', 7, 'H', 8, 'I', 9], ['G', 7, 'H', 8, 'I', 9])], [([True, False], ['A', 'B', 'C'])], [([[1, 2, 3], [7, 8, 9, 9], [4, 5, 6], [7, 8, 9, 9]], {'A': {'B': {'C': 'D', 'd': 'l'}, '': {'C': 'D', 'd': 'l'}}})], [([1, 3], ['a', 'b', 'c'], {'y': 20}, {'y': 20})], [([[2, 3, 4], {'a': 'A', 'b': 'B'}], [5.5, True])], [([[1, 'Lion', ['A', 'B']], [2, 'Tiger', ['C', 'D']]], [[3, 'Elephant', ['E', 'F']], [4, 'Giraffe', ['G', 'H']]], [[1, 'Lion', ['A', 'B']]])], [(['G', 7, 'H', 8, 'I', 9],)], [([[3, 'Elephant', ['E', 'F']], [4, 'k', ['G', 'H']]], [[3, 'Elephant', ['E', 'F']], [4, 'Giraffe', ['G', 'H']]])], [(['a', 'b', 'c'], ['d', 'e', 'f'], ['j', 'k', 'l'], ['m', 'n', 'o'], ['p', 'q', 'r'], ['s', 't', 'u'], ['v', 'w', 'x'], ['y', 'z'])], [([1, 4], ['a', 'b', 'c'], {}, {}, {}, {})], [([[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}, 1], [1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [[0, 1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [{'8': [9, 'F'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}]])], [(['A', 1, 'B', 2, 'C', 3], ['D', 4, 'E', 5, 'F', 6], ['G', 7, 'H', 8, 'I', 9], ['A', 1, 'B', 2, 'C', 3], ['A', 1, 'B', 2, 'C', 3])], [([2, 'Nikhil'], [3, 'Deepanshu'], [3, 'Deepanshu'])], [([1, 2], {'3': 'A', '4': 'B', '2': ''}, [5, 6, 7], {'3': 'A', '4': 'B', '2': ''}, ['z', 'x', 'y'], {'3': 'A', '4': 'B', '2': ''})], [([3, 'Deepanshu'], [3, 'Deepanshu', 3], [3, 'Deepanshu'])], [(['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'ii'], ['j', 'k', 'l'], ['m', 'n', 'o'], ['p', 'q', 'r'], ['s', 't', 'u'], ['v', 'w', 'x'])], [([{'7': [8, 'D'], '9': 'E'}, [10, 'F']], [{'7': [8, 'D'], '9': 'E'}, [10, 'F']])], [([1, 3], ['a', 'b', 'c'], {'x': 10, 'y': 20}, [[1, 2], [3, 4], [5, 6]], {'x': 10, 'y': 20}, ['a', 'b', 'c'])], [([[1, 'Lion'], [2, 'Tiger']],)], [([1, 2], {'3': 'H', '4': 'B', '2': ''}, [5, 6, 7], {'3': 'H', '4': 'B', '2': ''}, ['z', 'x', 'y'], {'3': 'H', '4': 'B', '2': ''}, {'3': 'H', '4': 'B', '2': ''})], [(['Apple', 2], [[2, 3, 4], {'a': 'A', 'b': 'B'}], [5.5, True])], [([1, 2], {'3': 'A', '4': 'B', '2': ''}, [5, 6, 7], {'3': 'A', '4': 'B', '2': ''}, {'3': 'A', '4': 'B', '2': ''}, {'3': 'A', '4': 'B', '2': ''}, {'3': 'A', '4': 'B', '2': ''})], [([['apple', 'banana'], ['cat', 'dog'], ['cat', 'dog']], [1, 2, 3], [[1, 2, 3], [4, 5, 6]], {'x': 1, 'y': 2, 'z': 3})], [([['d', 'e', 'I'], ['g', 'h', 'i']], [['d', 'e', 'f'], ['g', 'h', 'i']])], [([[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [3, 'Elephant']], [[1, 'Lion'], [2, 'Tiger'], [1, 'Lion', 1], [3, 'Elephant'], [3, 'Elephant']])], [([['d', 'e', 'f'], ['g', 'h', 'i'], ['d', 'e', 'f']], [['d', 'e', 'I', 'I'], ['g', 'h', 'i']], [['g', 'h', 'i']])], [([[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [{'8': [9, 'F'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}]], [[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]])], [([[1, 'Lion', ['A', 'B']], [2, 'Tiger', ['C', 'D']]], [[3, 'Elephant', ['E', 'F']], [4, 'Giraffe', ['G', 'H']]], [[1, 'Lion', ['A', 'B']], [2, 'Tiger', ['C', 'D']]], [[1, 'Lion', ['A', 'B']], [2, 'Tiger', ['C', 'D']]])], [([{'7': [8, 'D'], '9': 'E'}, [10, 'F']],)], [([[1, {'2': [3, 'A'], '4': 'B'}], [{'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}, 1], [1, {'2': [3, 'A'], '4': 'B'}], [{'6': 'C', 'D': [7, 'E']}]], [[0, 1, {'2': [3, 'A'], '4': 'B'}], [{'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}, 1], [1, {'2': [3, 'A'], '4': 'B'}], [{'6': 'C', 'D': [7, 'E']}]], [{'8': [9, 'F'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}]])], [([True, True], [True, False], ['A', 'B', 'C'])], [([1, {'2': [3, 'A'], '4': 'B'}, [5, [6, 'C']]], [[10, 'F']], [[10, 'F']])], [([[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}, 1, 1], [1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [{'8': [9, 'F'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}]], [[1, {'2': [3, 'A'], '4': 'B'}, 1, 1], [1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]])], [([[1, 'Lion', ['A', 'B']], [2, 'Tiger', ['C', 'D']]], [[3, 'Elephant', ['E', 'F']], [4, 'Giraffe', ['G', 'H']]], [[1, 'Lion', ['A', 'B']]], [[1, 'Lion', ['A', 'B']]])], [([1, {'2': [3, 'A'], '4': 'B'}, [5, [6, 'C']]], [{'7': [8, 'D'], '9': 'E'}, [10, 'F']], [1, {'2': [3, 'A'], '4': 'B'}, [5, [6, 'C']]])], [([[1, 'Lion', ['A', 'B']], [2, 'Tiger', ['C', 'D']]], [[1, 'Lion', ['A', 'B']]], [[3, 'Elephant', ['E', 'F']], [4, 'Giraffe', ['G', 'H']]])], [([1, {'2': [3, 'A'], '4': 'B'}, [5, [6, 'C']], [5, [6, 'C']]], [1, {'2': [3, 'A'], '4': 'B'}, [5, [6, 'C']], [5, [6, 'C']]], [{'7': [8, 'D'], '9': 'E'}, [10, 'F']])], [([1, 'A'], [2, 'B'], [3, 'C'], [2, 'B'])], [([True, True], [True, False], ['A', 'B', 'C'], [True, False])], [([[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [{'8': [9, 'F'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}], [11, {'12': 'I', 'J': [13, 'K']}]])], [([1, {'2': [3, 'A'], '4': 'B'}, [5, 2, [6, 'C']]], [1, {'2': [3, 'A'], '4': 'B'}, [5, 2, [6, 'C']]], [{'7': [8, 'D'], '9': 'E'}, [10, 'F']], [1, {'2': [3, 'A'], '4': 'B'}, [5, 2, [6, 'C']]], [1, {'2': [3, 'A'], '4': 'B'}, [5, 2, [6, 'C']]])], [([1, 2, 3], ['a', 'b', 'c'], {'x': 10, 'y': 20}, [[1, 2], [3, 4], [5, 6], [3, 4]])], [([[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [2, 'Tiger']],)], [([['apple', 'banana'], ['cat', 'dog']], [[1, 2, 3], [4, 5, 6]], {'x': 1, 'y': 2, 'z': 3})], [([-73, 5, False, 1, -73, -82, 122, 33, 13], [])], [([1, 3], ['a', 'b', 'c'], {'y': 20}, [[1, 2], [3, 4], [5, 6]], {'y': 20}, ['a', 'b', 'c'])], [([1, {'2': [3, 'A'], '4': 'B'}, [5, [6, 'C']], {'2': [3, 'A'], '4': 'B'}], [{'7': [8, 'D'], '9': 'E'}, [10, 'F']], [1, {'2': [3, 'A'], '4': 'B'}, [5, [6, 'C']], {'2': [3, 'A'], '4': 'B'}])], [([1, {'2': [3, 'A'], '4': 'B'}, [5, [6, 'C']]], [{'7': [8, 'D'], '9': 'E'}, [10, 'F'], {'7': [8, 'D'], '9': 'E'}], [{'7': [8, 'D'], '9': 'E'}, [10, 'F'], {'7': [8, 'D'], '9': 'E'}], [1, {'2': [3, 'A'], '4': 'B'}, [5, [6, 'C']]])], [({'A': {'B': {'C': 'D'}, '': {'C': 'D'}, 't': {'C': 'D'}}, 'dog': {'B': {'C': 'D'}, '': {'C': 'D'}, 't': {'C': 'D'}}},)], [(True, True, True, True, True, False, True, False)], [(['a', 'b', 'c'], ['d', 'e', 'f'], ['j', 'l'], ['m', 'n', 'o'], ['p', 'q', 'r'], ['s', 't', 'u'], ['v', 'w', 'x'], ['m', 'n', 'o'])], [([[1, 'Lion'], [2, 'Tiger'], [1, 6, 'Lion'], [3, 'Elephant'], [3, 'Elephant']],)], [({'4': 'B', '2': ''}, [1, 2], {'4': 'B', '2': ''}, [5, 6, 7], {'4': 'B', '2': ''}, {'4': 'B', '2': ''}, {'4': 'B', '2': ''}, {'4': 'B', '2': ''})], [([1, {'2': [3, 'A'], '4': 'B', '20': 'I'}, [5, [6, 'C']], {'2': [3, 'A'], '4': 'B', '20': 'I'}], [{'7': [8, 'D'], '9': 'E'}], [1, {'2': [3, 'A'], '4': 'B', '20': 'I'}, [5, [6, 'C']], {'2': [3, 'A'], '4': 'B', '20': 'I'}], [{'7': [8, 'D'], '9': 'E'}], [1, {'2': [3, 'A'], '4': 'B', '20': 'I'}, [5, [6, 'C']], {'2': [3, 'A'], '4': 'B', '20': 'I'}], [{'7': [8, 'D'], '9': 'E'}])], [([1, 2, 3], ['a', 'b', 'c'], {'x': 10, 'y': 20}, [[1, 2], [3, 4], [5, 6], [3, 4]], [1, 2, 3])], [([['d', 'e', 'f'], ['g', 'h', 'i'], ['d', 'e', 'f']], [['d', 'e', 'I'], ['g', 'h', 'i']], [['d', 'e', 'f'], ['g', 'h', 'i']], [['d', 'e', 'f'], ['g', 'h', 'i'], ['d', 'e', 'f']])], [([1, {'2': [3, 'A', 3], '4': 'B', '3': [3, 'A', 3]}, [5, [6, 'C']]], [{'7': [8, 'D'], '9': 'E'}, [10, 'F']], [{'7': [8, 'D'], '9': 'E'}, [10, 'F']])], [({'x': 1, 'y': 1, 'z': 3}, [['apple', 'banana'], ['cat', 'dog'], ['cat', 'dog']], [1, 2, 3], [[1, 2, 3], [4, 5, 6]], {'x': 1, 'y': 1, 'z': 3})], [([[1, 'Lion'], [2]], [[3, 'Fox'], [4, 'Wolf']])], [([[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [[11, {'12': [13], 'J': [13]}], {'8': [9, 'F'], 'G': [10, 'H']}, [11, {'12': [13], 'J': [13]}]], [[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}], [5, {'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]])], [(['A', 1, 'B', 2, 3], ['D', 4, 'E', 5, 'F', 6], ['G', 7, 'H', 8, 'I', 9])], [([1, 1, 3], ['a', 'b', 'c'], [1, 1, 3], {'y': 20}, [[1, 2], [3, 4], [5, 6]], {'y': 20}, ['a', 'b', 'c', 'c'], ['a', 'b', 'c'])], [([[]], [], [[]])], [([[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [2, 'Tiger']], [[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [3, 'applelephant', 'Elephant'], [2, 'Tiger']], [[1, 'Lion'], [2, 'Tiger'], [2, 'Tiger']], [[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant']], [[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [2, 'Tiger']])], [([[1, 'Lion'], [2, 'Tiger'], [3, 'Elephant'], [3, 'Elephant']], [[1, 'Lion'], [2, 'Tiger'], [1, 'Lion', 1], [3, 'Elephant'], [3, 'Elephant']], [[1, 'Lion'], [2, 'Tiger'], [1, 'Lion', 1], [3, 'Elephant'], [3, 'Elephant']])], [({'x': 1, 'y': 1, 'z': 4}, [['apple', 'banana'], ['cat', 'dog'], ['cat', 'dog']], {'x': 1, 'y': 1, 'z': 4}, [1, 2, 3], [[1, 2, 3], [4, 5, 6]], {'x': 1, 'y': 1, 'z': 4})], [([[1, 'Lion'], [2]], [[3, 'Fox'], [4, 'Wolf']], [[3, 'Fox'], [4, 'Wolf']])], [([[2, 3, 4], {'a': 'A', 'b': 'B'}],)], [([1, {'2': [3, 'A'], '4': 'B'}], [1, {'2': [3, 'A'], '4': 'B'}], [{'7': [8, 'D'], '9': 'E'}, [10, 'F']])], [([[1, 2, 3], [7, 8, 9, 9], [4, 5, 6], [7, 8, 9, 9]], {'A': {'B': {'C': 'D', 'd': 'l'}, '': {'C': 'D', 'd': 'l'}}}, [[1, 2, 3], [7, 8, 9, 9], [4, 5, 6], [7, 8, 9, 9]])], [([[False, 5, {'6': 'C', 'D': [7, 'E']}], [1, {'2': [3, 'A'], '4': 'B'}], [False, 5, {'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}], [False, 5, {'6': 'C', 'D': [7, 'E']}]], [{'8': [9, 'F'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}], [11, {'12': 'I', 'J': [13, 'K']}]])], [([8, {'2': [3, 'A'], '4': 'B'}, [5, [6, 'C']]], [{'7': [8, 'D'], '9': 'E'}, [10, 'F']])], [({'3': 'A', '4': 'B'}, [5, 6, 7], ['z', 'x', 'y'], {'3': 'A', '4': 'B'})], [([{'a': 'A', 'b': 'B'}],)], [(['a', 'b', 'c'], {'x': 10, 'y': 20}, [[1, 2], [3, 4], [5, 6], [3, 4]], [1, 2, 3])], [({'x': 1, 'y': 1, 'z': 3}, [['apple', 'banana'], ['cat', 'dog'], ['cat', 'dog']], [1, 2, 3], [[1, 2, 3], [4, 5, 6]], {'x': 1, 'y': 1, 'z': 3}, [['apple', 'banana'], ['cat', 'dog'], ['cat', 'dog']])], [([True, True],)], [([{'8': [2, 'H'], 'G': [10, 'H']}, {'8': [2, 'H'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}]], [[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [[1, {'2': [3, 'A'], '4': 'B'}, 1, 1], [1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [{'8': [2, 'H'], 'G': [10, 'H']}, [11, {'12': 'I', 'J': [13, 'K']}]], [[1, {'2': [3, 'A'], '4': 'B'}, 1, 1], [1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]])], [([{'a': 'A', 'b': 'B'}, {'a': 'A', 'b': 'B'}],)], [([{'a': 'AA', 'b': 'B'}, [2, 3, 4], {'a': 'AA', 'b': 'B'}], ['Apple', 1], [[2, 3, 4], {'a': 'AA', 'b': 'B'}], [5.5, True], ['Apple', 1])], [([[1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]], [[{'2': [3, 'A'], '4': 'B'}], [1, {'2': [3, 'A'], '4': 'B'}], [5, {'6': 'C', 'D': [7, 'E']}]])]]
results = [88, 88, 72, 64, 64, 56, 40, 56, 64, 72, 56, 56, 56, 56, 56, 56, 56, 64, 72, 112, 56, 64, 72, 56, 64, 48, 64, 48, 56, 48, 64, 64, 64, 56, 64, 72, 56, 64, 72, 80, 56, 56, 80, 72, 56, 56, 72, 56, 64, 48, 56, 104, 88, 72, 80, 64, 88, 64, 104, 56, 88, 48, 96, 64, 96, 72, 56, 56, 64, 64, 72, 48, 80, 64, 64, 72, 72, 64, 64, 64, 72, 72, 56, 80, 72, 48, 64, 56, 88, 64, 72, 48, 104, 104, 48, 104, 88, 80, 72, 64, 80, 56, 72, 64, 104, 64, 80, 64, 88, 64, 48, 64, 64, 64, 56, 72, 48, 72, 88, 48, 88, 48, 80, 56]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "tuple_size"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert tuple_size(("A", 1, "B", 2, "C", 3) ) == sys.getsizeof(("A", 1, "B", 2, "C", 3))', 'assert tuple_size((1, "Raju", 2, "Nikhil", 3, "Deepanshu") ) == sys.getsizeof((1, "Raju", 2, "Nikhil", 3, "Deepanshu"))', 'assert tuple_size(((1, "Lion"), ( 2, "Tiger"), (3, "Fox"), (4, "Wolf"))  ) == sys.getsizeof(((1, "Lion"), ( 2, "Tiger"), (3, "Fox"), (4, "Wolf")))']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
