import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 2, 3]], [[2, 4, 6]], [[10, 20, 3]], [[]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10, 12, 14]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[-3, -5, -7, -9, -11]], [[-2, -4, -6, -8, -10]], [[3, 6, 9, 12, 15, 18, 21]], [[1, 4, 7, 10, 13, 16, 19]], [[-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000]], [[-2, -4, -6, -8, -10, -2]], [[5, 3, 5, 7, 9]], [[-3, -7, -9, -11]], [[3, 7, 9]], [[-1000000, -500000, -250000, -125000, 0, 125000, 249999, 250000, 500000, 1000000]], [[False, False, False, False, False, True, True, False, True]], [[1, 4, 7, 10, 13, 16, 19, 19]], [[3, -8, 7, 9]], [[1, 3, 7, 9]], [[False, False, False, False, False, True, True, False, True, False, True, True, False]], [[-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000, -125000, 0]], [[-1000000, -500000, -250000, -125000, 0, 125000, 249999, 250000, 500000]], [[-3, -4, -7, -9, -11]], [[-7, -9, -11, -3]], [[-2, -4, -6, -8, -10, -4]], [[-3, -5, -7, -11]], [[-1000000, -500000, -250000, -125000, 19, 0, 125000, 250000, 500000, 1000000]], [[1, 4, 7, 13, 16, 19, 19]], [[-1000000, -500000, -250000, -125000, 19, 0, 125000, 250000, 500000, 1000000, -250000]], [[3, 7, 9, 3]], [[3, 5, 7, 9, 3]], [[-3, -7, -9, -11, -9]], [[-3, -4, -8, -7, -9, -11]], [[-1000000, -500000, -250000, -125000, 19, 0, 125000, 250000, 10, 500000, 1000000]], [[-3, -5, -7, -8, -9, -11, -8]], [[1, 2, 3, 4, 6, 7, 8, 9, 10]], [[3, 9, 4, 15, 18, 21]], [[-4, -8, -7, -9, -11]], [[-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000]], [[-1000000, -500000, -250000, -125000, -1, 0, 125000, 250000, 10, 500000, 1000000]], [[3, 6, 9, 12, 15, 21]], [[1, 3, 4, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 15, 6, 7, 8, 9, 10]], [[-3, -4, -7, -9, -6, -11]], [[-1000000, -500000, -250000, -125000, 19, 125000, 250000, 500000, 500001, 18, 1000000, -250000]], [[1, 3, 10, 7, 9]], [[2, 9, 12, 15, 18, 21]], [[-3, -4, -8, -7, -9, -11, -9]], [[-5, -7, -8, -9, -11, -8, -5]], [[-2, -4, -8, -10, -4]], [[-1000000, 16, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000, 0, -500000]], [[9, 12, 15, 18, 21]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5]], [[1, 3, 4, 6, -500000, 8, 9, 10, 4]], [[-3, -4, -9, -6, -11]], [[-4, -6, -8, -10, -4]], [[-3, -4, -9, 19, -6, -7, -11]], [[3, 4, 6, 7, 8, 9]], [[-3, 18, -9, -11, -9]], [[-7, -9, -11]], [[3, 6, 9, 12, 15, 21, 12]], [[-1000000, -500000, -250000, -125000, -1, 1, 125000, 250000, 10, -1000000, 1000000]], [[-7, -9, -11, -3, -7, -7]], [[-1000000, -500000, -1, -125000, 0, 125000, 250000, 500000, 1000000, -125000]], [[1, 2, 3, 4, 6, 8, 9, 10]], [[1, 4, 7, 13, 16, 19, 19, 1, 1]], [[9, 4, 15, 18, 21]], [[5, 3, 5, 9]], [[-1000000, -500000, -250000, -125000, -1, 0, 125000, 250000, 10, 499999, 1000000]], [[-3, -7, -9, -11, -7]], [[1, 1, 3, 5, 7, 9]], [[False, False, False, False, False, True, True, False, True, True, True, False]], [[-500000, -250000, -125000, 19, 0, 250000, 500000, 1000000, -250000]], [[-999999, -500000, -250000, -125000, -1, 1, 125000, 250000, 10, 1000000]], [[17, 3, 6, 9, 12, 15, 18, 21]], [[1, 3, 10, -1000000, 2, 9, 10]], [[-3, -7, -9, -11, -11, -9]], [[17, 3, 6, 10, 12, 15, 18, 21, 18]], [[3, 6, 9, 12, 15, 21, 12, 6]], [[-4, -8, -7, -9, -11, -7]], [[500000, 5, 3, 5, 9, 5]], [[1, 4, 10, 13, 16]], [[3, 4, 8, 9]], [[-1000000, -500000, -11, -250000, -125000, -7, 19, 0, 125000, 250000, 18, 10, 500000, -11]], [[1, 2, 3, 4, 5, 6, 7, 500001, 9, 10]], [[False, True, False, False, False, True, True, False, True, False, True, True, False]], [[1, 3, 10, -1000000, 2, 9, 10, 3]], [[500000, 5, 3, 5, 9, 5, 3]], [[-1000000, -500000, -250000, -125000, 0, 125000, 249999, 250000, 500000, 249999]], [[3, -8, 9]], [[-7, -9, -11, -3, -7, -7, -11]], [[-1000000, -500000, -250000, -125000, 0, 125000, 249999, 250000, 500000, 250000]], [[1, 1, 3, 5, 9]], [[-3, -4, -9, 19, -6, -7, -8, -11, -11]], [[-3, -5, -7, -2, -11]], [[3, -8, 7, 2, 9, 9]], [[9, 4, 18, 21, 18]], [[-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000, 0, -500000]], [[-3, -4, -2, -7, -9, -11]], [[-2, -4, -3, 12, -8, -10]], [[False, False, False, False, False, True, True, False, True, True, False]], [[3, 6, 9, 12, 15, 21, 11, 6]], [[-2, -4, -6, -8, 7, -10]], [[-1000000, -500000, -250000, -125000, 0, 125000, 249999, 11, 250000, 250000, 500000]], [[1, 1, 4, 5, 9]], [[-3, -5, -7, -11, -11]], [[-5, -7, -11, -7]], [[False, False, False, False, True, True, False, True]], [[-999999, -500000, -250000, -125000, -1, 1, 125000, 250000, 10, 1000000, -999999]], [[-3, -4, -7, -9, -11, -9]]]
results = [[2], [2, 4, 6], [10, 20], [], [], [2, 4, 6, 8, 10, 12, 14], [2, 4, 6, 8, 10], [], [-2, -4, -6, -8, -10], [6, 12, 18], [4, 10, 16], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000], [-2, -4, -6, -8, -10, -2], [], [], [], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000], [False, False, False, False, False, False], [4, 10, 16], [-8], [], [False, False, False, False, False, False, False, False], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000, -125000, 0], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000], [-4], [], [-2, -4, -6, -8, -10, -4], [], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000], [4, 16], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000, -250000], [], [], [], [-4, -8], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 10, 500000, 1000000], [-8, -8], [2, 4, 6, 8, 10], [4, 18], [-4, -8], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 10, 500000, 1000000], [6, 12], [4, 6, 8, 10], [2, 4, 6, 8, 10], [-4, -6], [-1000000, -500000, -250000, -125000, 125000, 250000, 500000, 18, 1000000, -250000], [10], [2, 12, 18], [-4, -8], [-8, -8], [-2, -4, -8, -10, -4], [-1000000, 16, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000, 0, -500000], [12, 18], [2, 4, 6, 8, 10], [4, 6, -500000, 8, 10, 4], [-4, -6], [-4, -6, -8, -10, -4], [-4, -6], [4, 6, 8], [18], [], [6, 12, 12], [-1000000, -500000, -250000, -125000, 125000, 250000, 10, -1000000, 1000000], [], [-1000000, -500000, -125000, 0, 125000, 250000, 500000, 1000000, -125000], [2, 4, 6, 8, 10], [4, 16], [4, 18], [], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 10, 1000000], [], [], [False, False, False, False, False, False, False], [-500000, -250000, -125000, 0, 250000, 500000, 1000000, -250000], [-500000, -250000, -125000, 125000, 250000, 10, 1000000], [6, 12, 18], [10, -1000000, 2, 10], [], [6, 10, 12, 18, 18], [6, 12, 12, 6], [-4, -8], [500000], [4, 10, 16], [4, 8], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 18, 10, 500000], [2, 4, 6, 10], [False, False, False, False, False, False, False], [10, -1000000, 2, 10], [500000], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000], [-8], [], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 250000], [], [-4, -6, -8], [-2], [-8, 2], [4, 18, 18], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 500000, 1000000, 0, -500000], [-4, -2], [-2, -4, 12, -8, -10], [False, False, False, False, False, False, False], [6, 12, 6], [-2, -4, -6, -8, -10], [-1000000, -500000, -250000, -125000, 0, 125000, 250000, 250000, 500000], [4], [], [], [False, False, False, False, False], [-500000, -250000, -125000, 125000, 250000, 10, 1000000], [-4]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "remove_odd"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert remove_odd([1,2,3]) == [2]', 'assert remove_odd([2,4,6]) == [2,4,6]', 'assert remove_odd([10,20,3]) == [10,20]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
