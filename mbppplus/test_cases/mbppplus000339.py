import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[(1, 5, 3, 19, 18, 25), 6], [(4, 3, 2, 6), 4], [(30, 5, 20, 9), 4], [(15, 12, 20, 30, 8, 4, 19, 37, 22, 28, 11, 25), 12], [(15, 12, 20, 29, 8, 4, 19, 37, 22, 28, 11, 25), 12], [(15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 11, 25), 12], [(15, 12, 20, 30, 8, 4, 19, 37, 22, 28, 11, 37), 12], [(15, 12, 20, 29, 11, 4, 18, 37, 22, 28, 11, 25), 12], [(15, 12, 20, 30, 8, 4, 19, 30, 22, 28, 11, 25), 12], [(15, 12, 20, 30, 8, 4, 30, 22, 28, 11, 25, 22), 12], [(15, 12, 20, 29, 11, 4, 18, 37, 22, 28, 11, 26), 12], [(15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 11, 25, 22), 13], [(15, 12, 31, 30, 8, 4, 19, 37, 22, 28, 11, 37), 12], [(15, 12, 20, 29, 8, 4, 18, 37, 22, 31, 11, 25, 22), 13], [(15, 12, 20, 30, 8, 20, 19, 37, 22, 28, 11, 37), 12], [(15, 12, 20, 29, 11, 4, 19, 37, 22, 28, 11, 25), 12], [(15, 12, 20, 30, 8, 4, 30, 22, 28, 11, 26, 22), 12], [(15, 12, 20, 29, 8, 4, 18, 38, 22, 31, 11, 25, 22), 13], [(15, 12, 20, 18, 8, 20, 19, 37, 22, 28, 11, 37), 12], [(15, 30, 20, 30, 8, 4, 19, 37, 22, 28, 11, 37), 12], [(15, 12, 20, 30, 8, 4, 19, 36, 22, 28, 11, 25), 12], [(15, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 25), 12], [(15, 12, 30, 8, 4, 19, 37, 22, 3, 28, 11, 37), 12], [(15, 12, 12, 20, 29, 11, 4, 18, 37, 22, 28, 25), 12], [(15, 26, 20, 30, 8, 4, 30, 22, 28, 11, 25, 22), 12], [(15, 30, 20, 30, 8, 4, 29, 37, 22, 28, 11, 37), 12], [(15, 12, 20, 30, 11, 5, 18, 37, 22, 28, 11, 26), 12], [(15, 30, 20, 30, 8, 4, 19, 37, 22, 36, 11, 37), 12], [(15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 20, 25), 12], [(15, 12, 20, 30, 8, 20, 19, 37, 22, 28, 11, 37, 8), 13], [(15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 9, 11, 25), 13], [(9, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 25), 12], [(15, 12, 20, 13, 11, 4, 18, 37, 22, 28, 11, 26), 12], [(15, 12, 31, 20, 8, 4, 19, 37, 22, 28, 11, 37), 12], [(15, 12, 20, 29, 8, 4, 18, 37, 21, 31, 11, 25, 22), 13], [(15, 12, 21, 18, 8, 20, 19, 37, 22, 28, 11, 37), 12], [(15, 12, 20, 11, 4, 19, 37, 22, 28, 11, 25), 11], [(28, 12, 20, 29, 8, 4, 18, 37, 22, 28, 20, 25), 12], [(15, 12, 20, 29, 12, 4, 18, 37, 22, 31, 11, 25, 22), 13], [(15, 12, 20, 29, 12, 4, 18, 37, 22, 4, 11, 25, 22), 13], [(15, 12, 20, 18, 8, 20, 19, 37, 22, 28, 11, 20), 12], [(15, 12, 20, 30, 8, 4, 19, 36, 22, 11, 11, 25), 12], [(15, 23, 12, 20, 29, 8, 4, 18, 37, 22, 28, 11, 25, 22), 14], [(15, 12, 20, 30, 8, 4, 19, 38, 22, 28, 11, 37), 12], [(15, 12, 20, 30, 8, 4, 19, 36, 22, 11, 11, 23), 12], [(15, 12, 20, 30, 8, 4, 19, 36, 22, 28, 11, 37), 12], [(15, 12, 20, 30, 8, 4, 12, 36, 22, 11, 11, 23), 12], [(14, 12, 20, 29, 11, 4, 18, 37, 22, 28, 11, 25), 12], [(15, 12, 30, 8, 4, 19, 38, 22, 3, 28, 11, 37), 12], [(15, 12, 20, 30, 8, 4, 18, 30, 22, 28, 11, 25), 12], [(9, 30, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 25), 13], [(15, 12, 29, 8, 4, 19, 38, 22, 3, 28, 11, 37), 12], [(15, 23, 12, 20, 29, 8, 4, 18, 37, 4, 22, 28, 11, 25, 22), 15], [(15, 12, 20, 30, 8, 4, 30, 22, 28, 14, 25, 22), 12], [(15, 12, 20, 30, 11, 5, 18, 37, 22, 28, 29, 11, 26), 13], [(15, 12, 14, 30, 8, 4, 19, 38, 22, 28, 11, 37), 12], [(15, 12, 20, 29, 11, 4, 18, 37, 22, 29, 11, 26), 12], [(15, 12, 20, 30, 8, 4, 18, 30, 22, 28, 11, 26), 12], [(15, 12, 20, 28, 11, 4, 18, 37, 22, 29, 11, 26), 12], [(15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 11, 25, 37), 13], [(15, 12, 20, 30, 8, 4, 30, 5, 28, 11, 26, 22), 12], [(37, 12, 12, 20, 29, 11, 4, 18, 37, 22, 28, 25), 12], [(28, 12, 20, 29, 8, 4, 18, 37, 22, 27, 20, 25), 12], [(15, 12, 20, 3, 8, 4, 30, 22, 28, 11, 26, 22), 12], [(15, 12, 20, 28, 11, 4, 18, 37, 22, 29, 11, 25), 12], [(15, 12, 20, 29, 8, 4, 18, 37, 22, 5, 11, 25, 37), 13], [(15, 12, 29, 8, 5, 19, 38, 22, 3, 28, 11, 37), 12], [(15, 12, 20, 29, 10, 4, 19, 37, 22, 28, 11, 25), 12], [(37, 12, 12, 20, 29, 37, 4, 18, 37, 22, 28, 25), 12], [(15, 12, 20, 30, 8, 4, 19, 30, 25, 28, 11, 25), 12], [(15, 20, 29, 12, 4, 18, 37, 22, 4, 11, 25, 22), 12], [(15, 12, 12, 20, 29, 11, 5, 18, 37, 22, 28, 25), 12], [(15, 3, 20, 30, 11, 5, 18, 37, 22, 28, 11, 26), 12], [(15, 15, 20, 29, 11, 4, 18, 37, 22, 28, 11, 25), 12], [(15, 12, 20, 30, 20, 19, 37, 22, 28, 11, 37, 11), 12], [(25, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 25), 12], [(28, 12, 20, 29, 8, 4, 18, 30, 22, 28, 20, 25), 12], [(15, 12, 20, 29, 9, 4, 18, 37, 22, 28, 9, 11, 25), 13], [(5, 12, 20, 30, 8, 20, 19, 37, 22, 28, 11, 37), 12], [(15, 12, 20, 29, 8, 4, 18, 37, 22, 28, 5, 25, 22, 22), 14], [(15, 12, 20, 29, 8, 18, 18, 37, 22, 28, 11, 25, 22), 13], [(15, 15, 20, 29, 11, 4, 18, 18, 22, 28, 11, 25), 12], [(28, 29, 20, 29, 8, 4, 18, 37, 22, 27, 20, 25), 12], [(15, 12, 20, 29, 12, 4, 18, 37, 22, 30, 11, 25, 26), 13], [(11, 12, 20, 30, 8, 4, 18, 30, 22, 28, 11, 25), 12], [(37, 12, 12, 20, 29, 10, 4, 18, 37, 22, 28, 25), 12], [(15, 15, 20, 29, 11, 4, 18, 37, 22, 28, 14, 25), 12], [(15, 12, 31, 20, 8, 4, 19, 37, 22, 28, 12, 37), 12], [(9, 30, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 24), 13], [(37, 12, 12, 20, 29, 10, 4, 18, 38, 22, 28, 25), 12], [(15, 30, 30, 8, 4, 29, 37, 22, 28, 11, 37, 37), 12], [(37, 12, 12, 20, 29, 37, 4, 13, 37, 22, 28, 25), 12], [(26, 12, 20, 29, 8, 4, 19, 37, 22, 28, 11, 25), 12], [(37, 12, 12, 20, 29, 25, 10, 4, 18, 37, 22, 28, 25), 13], [(15, 12, 20, 29, 9, 4, 18, 38, 22, 28, 9, 11, 25), 13], [(9, 30, 15, 20, 29, 11, 4, 19, 37, 22, 28, 11, 24, 11), 14], [(15, 12, 29, 9, 4, 19, 38, 22, 3, 28, 11, 37), 12], [(15, 12, 20, 4, 8, 4, 30, 22, 28, 11, 26, 22), 12], [(15, 12, 36, 30, 11, 5, 18, 37, 22, 28, 29, 11, 26), 13], [(15, 37, 12, 20, 30, 8, 20, 19, 37, 22, 28, 11, 37, 8), 14], [(37, 22, 12, 20, 29, 10, 4, 18, 37, 22, 28, 25), 12], [(15, 23, 27, 20, 29, 8, 4, 18, 37, 4, 22, 28, 11, 25, 22), 15], [(37, 12, 12, 20, 29, 37, 9, 18, 37, 22, 28, 25), 12], [(15, 12, 29, 12, 4, 19, 38, 22, 3, 28, 11, 37), 12]]
results = [1, 1, 4, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "find_min_diff"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert find_min_diff((1,5,3,19,18,25),6) == 1', 'assert find_min_diff((4,3,2,6),4) == 1', 'assert find_min_diff((30,5,20,9),4) == 4']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
