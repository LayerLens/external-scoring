import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[10, 8, 6], [3, 2, 2], [1, 2, 1], [100, 50, 10], [0.5, 0.2, 0.1], [123456789, 987654321, 12345], [15, 12, 18], [7.5, 3.5, 5.2], [50, 25, 35.5], [6.7, 4.9, 3.2], [2.3, 5.6, 4.1], [987654320, 12, 18], [12, 987654320, 987654320], [0.5, 0.4312792507522603, 0.5], [987654321, 14, 51], [0.8922229171130629, 0.2, 0.1], [10, 12, 12345], [12345, 12, 12346], [15, 12, 987654321], [12, 50, 987654320], [0.5307408226774875, 0.4312792507522603, 0.5], [0.5307408226774875, 0.6321031729360945, 0.5], [6.7, 1.2712163559940908, 0.37719260113270303], [50, 13, 15], [11, 12, 18], [987654320, 15, 987654320], [12, 15, 987654320], [1.2712163559940908, 3.5, 0.37719260113270303], [2.3, 7.5, 4.1], [0.1, 0.2, 0.2], [50, 10, 50], [25, 35.5, 35.5], [10, 12, 13], [0.8922229171130629, 0.24784643921729696, 0.1], [6.7, 7.093315941766064, 0.37719260113270303], [11, 12, 987654321], [12, 987654322, 15], [0.8922229171130629, 0.2, 0.2], [11, 12, 987654320], [25, 12346, 35.53719707762832], [0.5307408226774875, 4.9, 3.2], [5.8654364659053835, 4.9, 3.2], [12, 12346, 987654320], [12345, 25, 35.5], [6.7, 0.1, 4.9], [6.7, 7.114857913414879, 0.33367901527186616], [0.8922229171130629, 0.24784643921729696, 0.8922229171130629], [12, 18, 987654320], [987654322, 10, 987654322], [12345, 25, 12346], [50, 25, 50], [0.5, 0.5, 0.5], [1.8063834584596086, 1.2712163559940908, 0.1], [6.7, 6.958640279396424, 0.30093484569499246], [1.8063834584596086, 0.6356356838493147, 0.1], [7.5, 4.737243560970565, 5.2], [11, 15, 987654321], [35.5, 6.958640279396424, 6.958640279396424], [987654321, 15, 51], [0.5307408226774875, 0.2246713952032357, 0.4312792507522603], [6.7, 7.114857913414879, 0.6721959532506382], [7.5, 1.2712163559940908, 5.2], [2.3, 7.0513497877662985, 4.1], [50, 987654322, 10], [0.1, 4.9, 4.9], [987654321, 12346, 14], [123456789, 12345, 12345], [12345, 11, 12345], [2.3, 0.4312792507522603, 2.3], [10, 12, 12], [50, 100, 50], [2.3, 0.24784643921729696, 0.8922229171130629], [51, 100, 50], [12345, 25, 18], [26, 25, 12346], [25, 10, 35.5], [100, 26, 50], [12345, 25, 11], [0.4267076249145146, 0.4312792507522603, 7.093315941766064], [0.6721959532506382, 6.958640279396424, 6.958640279396424], [0.8922229171130629, 0.6356356838493147, 0.1], [123456789, 12345, 123456789], [50, 10, 12346], [35.5, 35.5, 35.5], [0.2, 35.5, 0.2], [26, 25, 12345], [0.6721959532506382, 0.6356356838493147, 0.1], [2.3, 0.1, 5.6], [0.2, 4.1, 4.1], [12345, 12345, 12345], [12, 12, 987654320], [0.5, 0.2, 0.30093484569499246], [50, 12345, 12345], [0.4267076249145146, 0.2804796558775843, 7.093315941766064], [987654321, 14, 987654321], [2.3, 0.16891917418428634, 0.8922229171130629], [51, 12, 50], [10, 12345, 11], [0.5, 0.2, 0.41099804295162595], [987654320, 14, 51], [1.2712163559940908, 7.5, 0.1], [0.41099804295162595, 0.33505200659362044, 0.6356356838493147], [10, 11, 11], [12346, 15, 51], [987654319, 987654320, 987654320], [2.3, 5.6, 0.5050561846753878], [4.748972607227519, 0.2, 0.1], [0.2, 0.1, 0.2], [7.058489893691628, 7.0513497877662985, 7.058489893691628], [7.058489893691628, 7.058489893691628, 2.3], [25, 12347, 987654320]]
results = [240.0, 6.0, 1.0, 25000.0, 0.005000000000000001, 7.526291655427412e+20, 1620.0, 68.25, 22187.5, 52.52800000000001, 26.403999999999996, 106666666560.0, 5.852766334887975e+18, 0.05390990634403254, 352592592597.0, 0.00892222917113063, 740700.0, 914468220.0, 88888888890.0, 296296296000.0, 0.05722437608699626, 0.08387073950528823, 1.6063029031314886, 4875.0, 1188.0, 7.315957918609968e+18, 88888888800.0, 0.8391134568597328, 35.3625, 0.0020000000000000005, 12500.0, 15753.125, 780.0, 0.011056713649727108, 8.963080073948216, 65185185186.0, 88888888980.0, 0.01784445834226126, 65185185120.0, 5484277.93900499, 4.161008049791502, 45.985021892698214, 73161481408320.0, 5478093.75, 1.6415000000000002, 7.953163920864196, 0.09865053306243339, 106666666560.0, 4.877305298826399e+18, 1905142125.0, 31250.0, 0.0625, 0.11481520987955135, 7.0152260847358585, 0.057410089245603174, 92.37624943892602, 81481481482.5, 859.5024730501806, 377777777782.5, 0.025713360830200257, 16.02163863612505, 24.78871894188477, 33.247114249318095, 246913580500.0, 1.2005000000000001, 85355061729462.0, 9407347136615362.0, 838194637.5, 1.1407336182397283, 720.0, 125000.0, 0.25430441394372344, 127500.0, 2777625.0, 4012450.0, 4437.5, 65000.0, 1697437.5, 0.6526919798079005, 16.274762935021045, 0.028356436203259606, 9.407864483555099e+19, 3086500.0, 22369.4375, 0.7100000000000001, 4012125.0, 0.02136358672126057, 0.6439999999999999, 1.6809999999999998, 940682981812.5, 71111111040.0, 0.015046742284749623, 3809975625.0, 0.4244739842486375, 6.828227404529797e+18, 0.17332059209908857, 15300.0, 678975.0, 0.0205499021475813, 352592592240.0, 0.476706133497784, 0.04376533443230769, 605.0, 4722345.0, 4.817091623958257e+26, 3.252561829309497, 0.047489726072275196, 0.0020000000000000005, 175.6571602689303, 57.29562151624887, 152432098613000.0]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "find_Volume"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
