import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]], [[24, 22, 39, 34, 87, 73, 68]], [[32, 30, 16, 96, 82, 83, 74]], [[90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]], [[12, 12, 15, 15, 32, 32, 32, 45, 45, 70]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 12, 21, 32, 45, 54, 64, 78, 87, 90]], [[]], [[11, 21, 32, 45, 54, 64, 78, 87, 87, 90]], [[12, 12, 15, 15, 32, 32, 32, 45, 70]], [[1, 2, 3, 4, 5, 6, 7, 9, 10]], [[8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 90]], [[90, 91, 92, 93, 93, 93, 94, 95, 96, 97, 98, 99, 100]], [[1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]], [[90, 91, 92, 93, 93, 94, 95, 96, 97, 98, 99, 99, 100]], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 10, 100]], [[1, 2, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10]], [[1, 2, 3, 3, 4, 5, 7, 8, 9, 10]], [[False, True]], [[12, 12, 15, 15, 15, 32, 32, 32, 45, 45, 70]], [[1, 2, 4, 5, 6, 7, 9, 10]], [[12, 21, 21, 32, 45, 54, 64, 78, 87, 90]], [[11, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100]], [[True, True]], [[12, 12, 14, 15, 15, 32, 32, 32, 45, 45, 70]], [[12, 12, 15, 15, 32, 32, 32, 45, 45, 45, 70]], [[90, 91, 92, 92, 94, 95, 96, 97, 98, 99, 99, 100]], [[78, 90, 91, 92, 92, 94, 95, 97, 97, 98, 99, 99, 100]], [[91, 92, 93, 93, 94, 95, 95, 96, 98, 99, 99, 100]], [[False, False, True]], [[1, 2, 3, 4, 4, 5, 6, 7, 9, 10, 10, 100]], [[11, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]], [[False, 1, 2, 3, 4, 4, 6, 9, 10, 10, 100]], [[8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 88, 90]], [[1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]], [[2, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[8, 11, 12, 21, 32, 45, 54, 64, 64, 78, 87, 88, 90]], [[1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10]], [[1, 2, 2, 2, 3, 3, 5, 6, 7, 8, 9, 10]], [[21, 90, 91, 92, 92, 94, 95, 96, 97, 99, 99]], [[1, 2, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 10]], [[12, 12, 15, 15, 15, 31, 32, 32, 32, 45, 45, 70]], [[False, 1, True, 2, 3, 4, 4, 6, 9, 10, 100]], [[4, 8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 90]], [[1, 91, 92, 94, 95, 96, 97, 98, 99, 100]], [[90, 91, 92, 93, 93, 94, 95, 96, 97, 99, 99, 99, 100]], [[12, 12, 15, 15, 32, 32, 32, 45, 45, 45, 45, 70]], [[12, 21, 21, 32, 45, 54, 78, 90]], [[12, 12, 15, 15, 32, 32, 45, 45, 45, 45, 70]], [[91, 93, 93, 94, 95, 95, 96, 98, 99, 99, 100]], [[90, 90, 91, 92, 93, 93, 94, 95, 95, 96, 97, 98, 99, 99, 100]], [[2, 3, 4, 4, 5, 6, 7, 9, 10, 15]], [[90, 91, 92, 93, 95, 95, 96, 97, 98, 99, 100]], [[1, 1, 2, 3, 3, 5, 6, 7, 8, 9, 9, 10]], [[2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]], [[78, 90, 91, 92, 92, 92, 94, 95, 97, 97, 98, 98, 99, 99, 100]], [[12, 12, 12, 14, 14, 14, 15, 31, 32, 32, 32, 45, 45, 70]], [[12, 12, 15, 15, 32, 32, 45, 45, 45, 45, 45, 70]], [[12, 12, 15, 15, 32, 45, 45, 45, 45, 45, 70]], [[1, 2, 3, 4, 5, 6, 7, 7, 9, 10, 10, 100]], [[90, 91, 92, 93, 95, 95, 95, 97, 98, 99, 100]], [[False, False, 1, 2, 3, 4, 4, 6, 9, 10, 10, 99, 100]], [[11, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100]], [[12, 12, 15, 15, 32, 32, 45, 45, 45, 45]], [[2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99]], [[2, 2, 3, 4, 5, 6, 6, 8, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 7, 10, 10, 31, 100]], [[1, 2, 3, 4, 4, 5, 6, 6, 7, 10, 10, 31, 100]], [[78, 90, 91, 91, 92, 92, 94, 95, 97, 97, 98, 99, 99, 100]], [[4, 90, 91, 92, 93, 95, 95, 96, 97, 98, 99, 100]], [[90, 91, 92, 92, 94, 95, 95, 96, 97, 98, 99, 99, 100]], [[90, 90, 91, 92, 93, 93, 94, 95, 95, 96, 97, 98, 99, 99, 99, 100]], [[90, 91, 92, 93, 93, 94, 95, 96, 97, 98, 99, 100]], [[True, True, True]], [[90, 91, 92, 93, 93, 93, 94, 96, 96, 97, 98, 99, 100]], [[12, 12, 15, 15, 45, 45, 45, 45, 45, 70]], [[1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10, 12]], [[90, 91, 92, 93, 93, 95, 95, 95, 97, 98, 99, 100]], [[12, 12, 15, 15, 32, 32, 45, 45, 45, 45, 45]], [[4, 90, 91, 92, 92, 94, 95, 97, 97, 98, 99, 99, 100]], [[11, 88, 90, 91, 92, 93, 94, 95, 96, 98, 100]], [[78, 90, 91, 91, 92, 92, 94, 95, 95, 97, 97, 98, 99, 99, 100]], [[90, 91, 92, 93, 94, 95, 96, 97, 97, 98, 99, 100]], [[False, 1, True, True, 2, 3, 4, 4, 4, 6, 9, 10, 100, 100]], [[90, 91, 92, 92, 94, 95, 96, 98, 99, 99, 100]], [[1, 2, 2, 2, 3, 3, 3, 5, 6, 7, 8, 9, 10]], [[1, 2, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 9]], [[12, 12, 15, 15, 15, 32, 32, 32, 45, 45, 70, 87]], [[90, 91, 91, 92, 93, 95, 95, 96, 97, 98, 99, 100]], [[True, True, True, True]], [[2, 3, 3, 4, 5, 7, 8, 9, 10]], [[8, 8, 11, 12, 21, 32, 45, 54, 64, 64, 78, 87, 88, 90]], [[90, 91, 92, 93, 93, 93, 94, 95, 96, 97, 99, 99, 99, 100]], [[4, 8, 11, 12, 21, 32, 45, 45, 54, 64, 78, 87, 90]], [[4, 5, 90, 91, 92, 94, 95, 97, 98, 99, 99, 100]], [[12, 21, 21, 21, 32, 45, 54, 78, 90]], [[21, 90, 91, 92, 92, 94, 95, 96, 97, 97, 99, 99]], [[3, 90, 91, 92, 93, 93, 94, 96, 97, 98, 98, 100]], [[8, 8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 88, 90]], [[3, 91, 92, 92, 93, 93, 94, 96, 97, 97, 98, 98, 100]], [[11, 88, 90, 91, 92, 93, 93, 94, 95, 96, 98, 100]], [[11, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 99, 100]], [[12, 12, 21, 21, 32, 45, 45, 45, 54, 64, 78, 87, 90]], [[2, 3, 4, 5, 6, 7, 7, 7, 10, 10, 12, 31, 100]], [[90, 91, 92, 93, 95, 95, 95, 97, 99, 100]]]
results = [[2, 3, 4, 5, 12, 12, 23, 56, 81, 95], [22, 24, 34, 39, 68, 73, 87], [16, 30, 32, 74, 82, 83, 96], [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [12, 12, 15, 15, 32, 32, 32, 45, 45, 70], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 21, 32, 45, 54, 64, 78, 87, 90], [], [11, 21, 32, 45, 54, 64, 78, 87, 87, 90], [12, 12, 15, 15, 32, 32, 32, 45, 70], [1, 2, 3, 4, 5, 6, 7, 9, 10], [8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 90], [90, 91, 92, 93, 93, 93, 94, 95, 96, 97, 98, 99, 100], [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], [90, 91, 92, 93, 93, 94, 95, 96, 97, 98, 99, 99, 100], [1, 2, 3, 4, 5, 6, 7, 9, 10, 10, 100], [1, 2, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 10], [1, 2, 3, 3, 4, 5, 7, 8, 9, 10], [False, True], [12, 12, 15, 15, 15, 32, 32, 32, 45, 45, 70], [1, 2, 4, 5, 6, 7, 9, 10], [12, 21, 21, 32, 45, 54, 64, 78, 87, 90], [11, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100], [True, True], [12, 12, 14, 15, 15, 32, 32, 32, 45, 45, 70], [12, 12, 15, 15, 32, 32, 32, 45, 45, 45, 70], [90, 91, 92, 92, 94, 95, 96, 97, 98, 99, 99, 100], [78, 90, 91, 92, 92, 94, 95, 97, 97, 98, 99, 99, 100], [91, 92, 93, 93, 94, 95, 95, 96, 98, 99, 99, 100], [False, False, True], [1, 2, 3, 4, 4, 5, 6, 7, 9, 10, 10, 100], [11, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [False, 1, 2, 3, 4, 4, 6, 9, 10, 10, 100], [8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 88, 90], [1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], [2, 2, 3, 4, 5, 6, 7, 8, 9, 10], [8, 11, 12, 21, 32, 45, 54, 64, 64, 78, 87, 88, 90], [1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10], [1, 2, 2, 2, 3, 3, 5, 6, 7, 8, 9, 10], [21, 90, 91, 92, 92, 94, 95, 96, 97, 99, 99], [1, 2, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 10], [12, 12, 15, 15, 15, 31, 32, 32, 32, 45, 45, 70], [False, 1, True, 2, 3, 4, 4, 6, 9, 10, 100], [4, 8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 90], [1, 91, 92, 94, 95, 96, 97, 98, 99, 100], [90, 91, 92, 93, 93, 94, 95, 96, 97, 99, 99, 99, 100], [12, 12, 15, 15, 32, 32, 32, 45, 45, 45, 45, 70], [12, 21, 21, 32, 45, 54, 78, 90], [12, 12, 15, 15, 32, 32, 45, 45, 45, 45, 70], [91, 93, 93, 94, 95, 95, 96, 98, 99, 99, 100], [90, 90, 91, 92, 93, 93, 94, 95, 95, 96, 97, 98, 99, 99, 100], [2, 3, 4, 4, 5, 6, 7, 9, 10, 15], [90, 91, 92, 93, 95, 95, 96, 97, 98, 99, 100], [1, 1, 2, 3, 3, 5, 6, 7, 8, 9, 9, 10], [2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10], [78, 90, 91, 92, 92, 92, 94, 95, 97, 97, 98, 98, 99, 99, 100], [12, 12, 12, 14, 14, 14, 15, 31, 32, 32, 32, 45, 45, 70], [12, 12, 15, 15, 32, 32, 45, 45, 45, 45, 45, 70], [12, 12, 15, 15, 32, 45, 45, 45, 45, 45, 70], [1, 2, 3, 4, 5, 6, 7, 7, 9, 10, 10, 100], [90, 91, 92, 93, 95, 95, 95, 97, 98, 99, 100], [False, False, 1, 2, 3, 4, 4, 6, 9, 10, 10, 99, 100], [11, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], [12, 12, 15, 15, 32, 32, 45, 45, 45, 45], [2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99], [2, 2, 3, 4, 5, 6, 6, 8, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 7, 10, 10, 31, 100], [1, 2, 3, 4, 4, 5, 6, 6, 7, 10, 10, 31, 100], [78, 90, 91, 91, 92, 92, 94, 95, 97, 97, 98, 99, 99, 100], [4, 90, 91, 92, 93, 95, 95, 96, 97, 98, 99, 100], [90, 91, 92, 92, 94, 95, 95, 96, 97, 98, 99, 99, 100], [90, 90, 91, 92, 93, 93, 94, 95, 95, 96, 97, 98, 99, 99, 99, 100], [90, 91, 92, 93, 93, 94, 95, 96, 97, 98, 99, 100], [True, True, True], [90, 91, 92, 93, 93, 93, 94, 96, 96, 97, 98, 99, 100], [12, 12, 15, 15, 45, 45, 45, 45, 45, 70], [1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10, 12], [90, 91, 92, 93, 93, 95, 95, 95, 97, 98, 99, 100], [12, 12, 15, 15, 32, 32, 45, 45, 45, 45, 45], [4, 90, 91, 92, 92, 94, 95, 97, 97, 98, 99, 99, 100], [11, 88, 90, 91, 92, 93, 94, 95, 96, 98, 100], [78, 90, 91, 91, 92, 92, 94, 95, 95, 97, 97, 98, 99, 99, 100], [90, 91, 92, 93, 94, 95, 96, 97, 97, 98, 99, 100], [False, 1, True, True, 2, 3, 4, 4, 4, 6, 9, 10, 100, 100], [90, 91, 92, 92, 94, 95, 96, 98, 99, 99, 100], [1, 2, 2, 2, 3, 3, 3, 5, 6, 7, 8, 9, 10], [1, 2, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 9], [12, 12, 15, 15, 15, 32, 32, 32, 45, 45, 70, 87], [90, 91, 91, 92, 93, 95, 95, 96, 97, 98, 99, 100], [True, True, True, True], [2, 3, 3, 4, 5, 7, 8, 9, 10], [8, 8, 11, 12, 21, 32, 45, 54, 64, 64, 78, 87, 88, 90], [90, 91, 92, 93, 93, 93, 94, 95, 96, 97, 99, 99, 99, 100], [4, 8, 11, 12, 21, 32, 45, 45, 54, 64, 78, 87, 90], [4, 5, 90, 91, 92, 94, 95, 97, 98, 99, 99, 100], [12, 21, 21, 21, 32, 45, 54, 78, 90], [21, 90, 91, 92, 92, 94, 95, 96, 97, 97, 99, 99], [3, 90, 91, 92, 93, 93, 94, 96, 97, 98, 98, 100], [8, 8, 11, 12, 21, 32, 45, 54, 64, 78, 87, 88, 90], [3, 91, 92, 92, 93, 93, 94, 96, 97, 97, 98, 98, 100], [11, 88, 90, 91, 92, 93, 93, 94, 95, 96, 98, 100], [11, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 99, 100], [12, 12, 21, 21, 32, 45, 45, 45, 54, 64, 78, 87, 90], [2, 3, 4, 5, 6, 7, 7, 7, 10, 10, 12, 31, 100], [90, 91, 92, 93, 95, 95, 95, 97, 99, 100]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "shell_sort"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]', 'assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]', 'assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
