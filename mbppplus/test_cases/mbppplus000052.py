import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[8], [18], [7], [0], [-5], [999999999999999999999999999999999999999999], [-1000000000000000000000000000000000000000000], [-33], [False], [-1], [-1000000000000000000000000000000000000000001], [999999999999999999999999999999999999999998], [-999999999999999999999999999999999999999999], [True], [-6], [-68], [-34], [-1000000000000000000000000000000000000000002], [1000000000000000000000000000000000000000000], [2], [26], [1], [-69], [80], [-87], [-2], [-3], [79], [-7], [-1000000000000000000000000000000000000000003], [-999999999999999999999999999999999999999998], [3], [-999999999999999999999999999999999999999997], [-999999999999999999999999999999999999999996], [4], [1000000000000000000000000000000000000000001], [1000000000000000000000000000000000000000002], [25], [-97], [-35], [27], [999999999999999999999999999999999999999997], [28], [81], [-70], [-32], [55], [78], [77], [-999999999999999999999999999999999999999993], [-24], [-96], [-71], [-86], [-23], [-25], [24], [29], [-72], [86], [82], [46], [-98], [-26], [-95], [30], [23], [56], [999999999999999999999999999999999999999996], [-999999999999999999999999999999999999999995], [-4], [85], [-36], [57], [87], [58], [83], [-1000000000000000000000000000000000000000004], [999999999999999999999999999999999999999995], [84], [54], [20], [31], [-999999999999999999999999999999999999999994], [-73], [-37], [-22], [45], [13], [-74], [75], [88], [71], [-31], [-99], [-100], [22], [76], [14], [59], [-88], [74], [-1000000000000000000000000000000000000000005], [-94], [-49], [1000000000000000000000000000000000000000003], [-93]]
results = ['1000', '10010', '111', '0', '-101', '10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111111', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111001000000000000000000000000000000000000000000', '-100001', '0', '-1', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111001000000000000000000000000000000000000000001', '10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111110', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111111', '1', '-110', '-1000100', '-100010', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111001000000000000000000000000000000000000000010', '10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111001000000000000000000000000000000000000000000', '10', '11010', '1', '-1000101', '1010000', '-1010111', '-10', '-11', '1001111', '-111', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111001000000000000000000000000000000000000000011', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111110', '11', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111101', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111100', '100', '10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111001000000000000000000000000000000000000000001', '10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111001000000000000000000000000000000000000000010', '11001', '-1100001', '-100011', '11011', '10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111101', '11100', '1010001', '-1000110', '-100000', '110111', '1001110', '1001101', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111001', '-11000', '-1100000', '-1000111', '-1010110', '-10111', '-11001', '11000', '11101', '-1001000', '1010110', '1010010', '101110', '-1100010', '-11010', '-1011111', '11110', '10111', '111000', '10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111100', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111011', '-100', '1010101', '-100100', '111001', '1010111', '111010', '1010011', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111001000000000000000000000000000000000000000100', '10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111011', '1010100', '110110', '10100', '11111', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111000111111111111111111111111111111111111111010', '-1001001', '-100101', '-10110', '101101', '1101', '-1001010', '1001011', '1011000', '1000111', '-11111', '-1100011', '-1100100', '10110', '1001100', '1110', '111011', '-1011000', '1001010', '-10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111001000000000000000000000000000000000000000101', '-1011110', '-110001', '10110111101010111100011000100111000001010000001100000101101011011111000101001010001111011001111001000000000000000000000000000000000000000011', '-1011101']

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "decimal_to_binary"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ["assert decimal_to_binary(8) == '1000'", "assert decimal_to_binary(18) == '10010'", "assert decimal_to_binary(7) == '111'"]:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
