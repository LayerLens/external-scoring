import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[['A'], ['A', 'B'], ['A', 'B', 'C']]], [[[1], [1, 2], [1, 2, 3]]], [[[1, 1], [1, 2, 3], [1, 5, 6, 1]]], [[[], [], []]], [[[1, 2, 3], [4, 5, 6], []]], [[[1, 1, 1], [2, 2, 2], [3, 3, 3]]], [[[[1, 2], [3, 4, 5]], [[6, 7], [8], [9, 10, 11, 12]], [[13, 14, 15], [16, 17, 18]]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [4, 5, 6]]], [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]], [[10, 11, 12], [13], [14, 15, 16]], [[17, 18, 19, 20, 21], [22, 23, 24]]]], [[[[[[1]]]], [[[[2]]]], [[[[3]]]]]], [[[[1, [2, [3, [4, [5]]]]]], [[[[6, [7, [8, [9]]]]]]]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26]]], [[[[1, 2, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[20, 21, 22], [23, 24, 25]]]], [[[1, 2, 3], [5, 6, 6], [5, 6, 6], [5, 6, 6], [7, 8, 9], [4, 5, 6]]], [[[[[[1]]]], [[[[2]]]], [[[[3]]]], [[[[3]]]]]], [[[], [[1, [2, [3, [4, [5]]]]]], []]], [[[[3, 4, 5], [6, 7, 8, 9]], [[10, 11, 12], [13], [14, 15, 16]], [[3, 4, 5], [6, 7, 8, 9]], [[22, 23, 24]]]], [[[[[[1]]]], [[[[3]]]], [[[[3]]]]]], [[[[1, [2, [3, [4, [5]]]]]]]], [[[[[[2]]]], [[[[3]]]]]], [[[1, 2, 3], [5, 6], [5, 6], [5, 6], [5, 6], [7, 8, 9], [4, 5, 6]]], [[[], [[1, [2, [3, [4, [5]]]]]], ['emZAcCGw']]], [[[[1, 2, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[20, 21, 22], [23, 24, 25], [23, 24, 25]], [[20, 21, 22], [23, 24, 25], [23, 24, 25]]]], [[[[1, 2], [3, 4, 5]], [[6, 7], [8], [9, 10, 11, 12], [8], [8]], [[6, 7], [8], [9, 10, 11, 12], [8], [8]], [[13, 14, 15], [16, 17, 18]]]], [[[12, 5, 6, 6], [1, 2, 3], [12, 5, 6, 6], [12, 5, 6, 6], [12, 5, 6, 6], [12, 5, 6, 6], [7, 8, 9], [4, 5, 6]]], [[[12, 5, 6, 6], [1, 2, 3], [12, 5, 6, 6], [12, 5, 6, 6], [12, 5, 6, 6], [12, 5, 6, 6], [7, 8, 9], [4, 5, 6], [12, 5, 6, 6]]], [[[[1, [2], [2]], [1, [2], [2]]]]], [[[[1, 2], [3, 4, 5], [3, 4, 5]], [[6, 7], [8], [8], [8]], [[6, 7], [8], [8], [8]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]]], [[[[1, [2], [2], [2]], [1, [2], [2], [2]]], [[1, [2], [2], [2]], [1, [2], [2], [2]]]]], [[[], [[[[6, [7, [8, [9]]]]]]]]], [[[1, 2, 3], [6, 6], [6, 6], [6, 6], [6, 6], [7, 8, 9], [4, 5, 6]]], [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]], [[17, 18, 19, 20, 21], [22, 23, 24]]]], [[[1, 2, 3]]], [[[1, 2, 3], [4, 5, 6], [20.740277818565374, 'hCZBB', True]]], [[[], [[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]], []]], [[[], [], [[[[3]]]], [[[[3]]]]]], [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]], [[17, 18, 19, 20, 21], [22, 23, 24]], [[1, 2], [3, 4, 5], [6, 7, 8, 9]]]], [[[12, 5, 6, 6, 12], [1, 2, 3], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [7, 8, 9], [4, 5, 6], [12, 5, 6, 6, 12]]], [[[[[[1]]]], [[[[2]]]], [[], []], [[], []]]], [[[], [], [], []]], [[[5, 6], [5, 6], [5, 6], [5, 6], [7, 8, 9], [4, 5, 6], [7, 8, 9]]], [[[], [[1, [2, [3, [4, [5]]]]]], [], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14]]], [[[1, 2, 3], [-7, 6], [-7, 6], [-7, 6], [-7, 6], [7, 8, 9], [4, 5, 6]]], [[[1, 2, 3], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [7, 8, 9], [4, 5, 6]]], [[[], [], [[[[3]]]], [[[[3]]]], [[[[3]]]]]], [[[[1, [2, [3, [4, [5]]]]]], ['emZAcCGw'], ['emZAcCGw']]], [[[[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[20, 21, 22], [23, 24, 25]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]]]], [[[5, 6], [5, 6], [5, 6], [7, 8, 9], [4, 5, 6], [7, 8, 9]]], [[[1, 2, 3], [4, 5, 6], [20.740277818565374, 'hCZBB', True], [4, 5, 6]]], [[[2, 3]]], [[[], [[1, [2, [3, [4, [5]]]]]], [], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14], [[1, [2, [3, [4, [5]]]]]]]], [[[5], [1, 2, 3], [5], [5], [5], [5], [7, 8, 9], [4, 5, 6]]], [[[6], [6], [6], [6], [6], [7, 8, 9], [4, 5, 6], [7, 8, 9]]], [[[18, 2, 3], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [7, 8, 9], [4, 5, 6, 5], [7, 8, 9]]], [[[1, 2, 3], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [7, 8, 9], [4, 5, 6]]], [[[], [9, -67, 55, 18, -67], [], []]], [[[5], [2, 3], [5], [5], [5], [5], [7, 8, 9], [4, 5, 6]]], [[[2, 3], [2, 3]]], [[[6], [6], [6], [6], [6], [4, 5, 6], [7, 8, 9]]], [[[12, 5, 6, 6, 12], [12, 2, 3], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [12, 5, 6, 6, 12], [7, 8, 9], [4, 5, 6], [12, 5, 6, 6, 12]]], [[[[14, 15], [16, 17, 18, 19]], [[14, 15], [16, 17, 18, 19]]]], [[[[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[20, 21, 22], [23, 24, 25]]]], [[[[1, [2, [3, [4, [5]]]]]], ['hCZBB', 'emZAcCGw'], ['hCZBB', 'emZAcCGw']]], [[[], [], [], [False, 2], []]], [[[[1, [2, [3, [4, [5]]]]]], ['emZAcCGw'], ['emZAcCGw'], ['emZAcCGw']]], [[[], []]], [[[], [[1, [2, [3, [4, [5]]]]]], [False, True, False, False, True, False, True, True, False, False], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14], [[1, [2, [3, [4, [5]]]]]]]], [[[], [], [], [], [], [], []]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26], [11, 12, 13, 14, 15]]], [[[[14, 15], [16, 17, 18, 19], [16, 17, 18, 19]], [[1, 2, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19], [16, 17, 18, 19]], [[20, 21, 22], [23, 24, 25], [23, 24, 25]]]], [[[], [True, True, False, True, False, False], [9, -67, 55, 18, -67], []]], [[[[1, [4], [4], [4]], [1, [4], [4], [4]], [1, [4], [4], [4]]]]], [[[2, 3, 2]]], [[['VGFKYtM', 'jYImzalw', 'K', 'hssnGSPRt', 'lGtBwSKKld', 'hCZBB'], [[1, [[3, [4, [5]]]], [[3, [4, [5]]]]], [1, [[3, [4, [5]]]], [[3, [4, [5]]]]]], [[1, [[3, [4, [5]]]], [[3, [4, [5]]]]], [1, [[3, [4, [5]]]], [[3, [4, [5]]]]]], [], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14]]], [[[5, 6, 5], [5, 6, 5], [5, 6, 5], [4, 5, 6], [7, 8, 9], [4, 5, 6]]], [[[[[[3]], [[3]]], [[[3]], [[3]]]], [[[[1]]]], [[[[2]]]], [[[[3]], [[3]]], [[[3]], [[3]]]], [[[[3]], [[3]]], [[[3]], [[3]]]]]], [[[18, 2, 3], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [-7, 6, -7, -7], [7, 8, 9], [4, 5, 6, 5], [7, 8, 9], [-7, 6, -7, -7]]], [[[[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]], ['hCZBB', 'emZAcCGw']]], [[[[1, [2, [3, [4, [5]]]]]], ['hssnGSPRt'], ['hssnGSPRt'], ['hssnGSPRt'], ['hssnGSPRt']]], [[[2, 26, 7], [2, 26, 7]]], [[[[[[2]]]], [[[[3]]]], [[[[3]]]]]], [[[[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]], []]], [[[[[[1]]]], [[[[3]]]], [[[[3]]]], [[[[3]]]]]], [[['jYImzalw'], ['jYImzalw'], ['jYImzalw']]], [[[]]], [[['LLhHY', 'K'], []]], [[[[20, 21, 22], [23, 24], [23, 24]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[20, 21, 22], [23, 24], [23, 24]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]]]], [[[[1, [2, [3, [4, [5]]]]]], ['emZAcCGw']]], [[[5, 6, 5, 5], [5, 6, 5, 5], [5, 6, 5, 5], [4, 5, 6], [7, 8, 9], [4, 5, 6]]], [[[[3, 4, 5], [6, 7, 8, 9]], [[10, 11, 12], [13], [14, 15, 16]], [[3, 4, 5], [6, 7, 8, 9]], [[22, 23, 24]], [[3, 4, 5], [6, 7, 8, 9]], [[3, 4, 5], [6, 7, 8, 9]]]], [[[[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]]]], [[[[1, 2, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19], [14, 15]], [[14, 15], [16, 17, 18, 19], [14, 15]], [[20, 21, 22], [23, 24, 25]]]], [[[1, 2, 3], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [-7, 6, -7], [7, 8, 9], [4, 5, 6], [-7, 6, -7]]], [[[], [[1, [2, [3, [4, [5]]]]]], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14]]], [[[], [[[[6, [7, [8, [9]]]]]]], []]], [[[[1, 2], [3, 4, 5]], [[6, 7], [8], [9, 10, 11, 12]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]]], [[[6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [7, 9], [4, 5, 6], [7, 9]]], [[[[1, [2, [3, [4, [5]]]]]], []]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26]]], [[[1, 2, 3], [6, 6], [6, 6], [6, 6], [7, 8, 9], [4, 5, 6], [6, 6]]], [[[6], [6], [6], [6], [7, 8, 9, 9], [4, 5, 6], [7, 8, 9, 9]]], [[[[[[2]]]], [[[]], [[]]], [[[]], [[]]]]], [[[[1, 2, 3], [4, 5, 9, 6, 7, 8, 9], [10, 11, 12, 13]], [[1, 2, 3], [4, 5, 9, 6, 7, 8, 9], [10, 11, 12, 13]], [[14, 15], [16, 17, 18, 19], [14, 15]], [[14, 15], [16, 17, 18, 19], [14, 15]], [[20, 21, 22], [23, 24, 25], [20, 21, 22]]]], [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]], [[10, 11, 12], [13], [14, 15, 16], [10, 11, 12]], [[10, 11, 12], [13], [14, 15, 16], [10, 11, 12]], [[17, 18, 19, 20, 21], [22, 23, 24]]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [4, 6], [4, 6]]], [[[[1, 2, 3, 18], [1, 2, 3, 18], [4, 5, 6, 7, 8, 9], [10, 14, 11, 12, 13]], [[1, 2, 3, 18], [1, 2, 3, 18], [4, 5, 6, 7, 8, 9], [10, 14, 11, 12, 13]], [[14, 15], [16, 17, 18, 19]], [[1, 2, 3, 18], [1, 2, 3, 18], [4, 5, 6, 7, 8, 9], [10, 14, 11, 12, 13]], [[20, 21, 22], [23, 24, 25]], [[1, 2, 3, 18], [1, 2, 3, 18], [4, 5, 6, 7, 8, 9], [10, 14, 11, 12, 13]], [[1, 2, 3, 18], [1, 2, 3, 18], [4, 5, 6, 7, 8, 9], [10, 14, 11, 12, 13]]]], [[[False, False, False, False, True, True], [[1, [2, [3, [4, [5]]]]]], []]], [[[[6, 7], [8], [8], [8]], [[6, 7], [8], [8], [8]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]]], [[[[[[1]]]], [[[[2]]]], [[[[3]], [[3]]], [[[3]], [[3]]]], [[[[3]], [[3]]], [[[3]], [[3]]]]]], [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]], [[10, 11, 12], [13], [14, 15, 16], [10, 11, 12]], [[10, 11, 12], [13], [14, 15, 16], [10, 11, 12]], [[17, 18, 19, 20, 21], [22, 23, 24]], [[17, 18, 19, 20, 21], [22, 23, 24]]]], [[[4, 5, 6], [20.740277818565374, 'hCZBB', True], [4, 5, 6]]], [[[[[[3]], [[3]]]], [[[[1]]]], [[[[2]]]], [[[[3]], [[3]]]], [[[[3]], [[3]]]]]], [[[], [[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]]]]]
results = [['A', 'B', 'C'], [1, 2, 3], [1, 5, 6, 1], [], [1, 2, 3], [1, 1, 1], [[6, 7], [8], [9, 10, 11, 12]], [1, 2, 3], [[1, 2], [3, 4, 5], [6, 7, 8, 9]], [[[[1]]]], [[1, [2, [3, [4, [5]]]]]], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [[1, 2, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [1, 2, 3], [[[[1]]]], [[1, [2, [3, [4, [5]]]]]], [[10, 11, 12], [13], [14, 15, 16]], [[[[1]]]], [[1, [2, [3, [4, [5]]]]]], [[[[2]]]], [1, 2, 3], [[1, [2, [3, [4, [5]]]]]], [[1, 2, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[6, 7], [8], [9, 10, 11, 12], [8], [8]], [12, 5, 6, 6], [12, 5, 6, 6], [[1, [2], [2]], [1, [2], [2]]], [[6, 7], [8], [8], [8]], [[1, [2], [2], [2]], [1, [2], [2], [2]]], [[[[6, [7, [8, [9]]]]]]], [1, 2, 3], [[1, 2], [3, 4, 5], [6, 7, 8, 9]], [1, 2, 3], [1, 2, 3], [[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]], [[[[3]]]], [[1, 2], [3, 4, 5], [6, 7, 8, 9]], [12, 5, 6, 6, 12], [[], []], [], [7, 8, 9], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14], [1, 2, 3], [1, 2, 3], [[[[3]]]], [[1, [2, [3, [4, [5]]]]]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [7, 8, 9], [1, 2, 3], [2, 3], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14], [1, 2, 3], [7, 8, 9], [-7, 6, -7, -7], [1, 2, 3], [9, -67, 55, 18, -67], [7, 8, 9], [2, 3], [4, 5, 6], [12, 5, 6, 6, 12], [[14, 15], [16, 17, 18, 19]], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], ['hCZBB', 'emZAcCGw'], [False, 2], [[1, [2, [3, [4, [5]]]]]], [], [False, True, False, False, True, False, True, True, False, False], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [[14, 15], [16, 17, 18, 19], [16, 17, 18, 19]], [True, True, False, True, False, False], [[1, [4], [4], [4]], [1, [4], [4], [4]], [1, [4], [4], [4]]], [2, 3, 2], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14], [5, 6, 5], [[[[3]], [[3]]], [[[3]], [[3]]]], [-7, 6, -7, -7], [[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]], [[1, [2, [3, [4, [5]]]]]], [2, 26, 7], [[[[2]]]], [[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]], [[[[1]]]], ['jYImzalw'], [], ['LLhHY', 'K'], [[1, 2, 3, 3], [1, 2, 3, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [[1, [2, [3, [4, [5]]]]]], [5, 6, 5, 5], [[10, 11, 12], [13], [14, 15, 16]], [[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]], [[1, 2, 3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13]], [1, 2, 3], [75.7484253220882, 74, -57, [89, 22, 23, 17, 2, 5, -83, -7, 15, 6], [20.740277818565374, -12.394884179461044, 57.01753938329165, 8.350285441437407], 21, 14], [[[[6, [7, [8, [9]]]]]]], [[6, 7], [8], [9, 10, 11, 12]], [4, 5, 6], [[1, [2, [3, [4, [5]]]]]], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3], [7, 8, 9, 9], [[[]], [[]]], [[1, 2, 3], [4, 5, 9, 6, 7, 8, 9], [10, 11, 12, 13]], [[10, 11, 12], [13], [14, 15, 16], [10, 11, 12]], [1, 2, 3], [[1, 2, 3, 18], [1, 2, 3, 18], [4, 5, 6, 7, 8, 9], [10, 14, 11, 12, 13]], [False, False, False, False, True, True], [[6, 7], [8], [8], [8]], [[[[3]], [[3]]], [[[3]], [[3]]]], [[10, 11, 12], [13], [14, 15, 16], [10, 11, 12]], [4, 5, 6], [[[[3]], [[3]]]], [[1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]], [1, [2, [3, [4, [5]]]], [2, [3, [4, [5]]]]]]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "Find_Max"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ["assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", 'assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]', 'assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
