import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[(3, 5), (1, 7), (10, 3), (1, 2)]], [[(4, 6), (2, 17), (9, 13), (11, 12)]], [[(12, 35), (21, 27), (13, 23), (41, 22)]], [[(1000000, 999999), (10000000, 9999999), (100000000, 99999999), (1000000000, 999999999)]], [[(1, 2), (4, 5), (7, 8), (10, 11)]], [[(100, -100), (0, 200), (-50, 50), (300, 100)]], [[(0, 1), (2, 4), (3, 6), (5, 7)]], [[(-10, -5), (-3, 0), (2, 6), (9, 15)]], [[(1, 1000), (500, 700), (300, 900), (200, 800)]], [[(-3, -2), (-8, -7), (-5, -1), (-10, -9)]], [[(50000000, 100000000), (60000000, 110000000), (70000000, 120000000), (80000000, 130000000)]], [[(-10, 10), (-100, 100), (0, 1000), (-1000, 500)]], [[(100, -50), (-200, 200), (300, -300), (-400, 400)]], [[(1000000, -1000000), (999999, -999999), (-100000000, 100000000), (-5000000, 5000000)]], [[(1, -1), (100, -100), (1000, -1000), (10000, -10000)]], [[(0, -100), (100, -200), (1000, -300), (10000, -400)]], [[(1, 1), (2, 2), (3, 3), (4, 4)]], [[(5, 10), (15, 20), (25, 30), (35, 40)]], [[(100, 100), (200, 200), (300, 300), (400, 400)]], [[(500, 600), (700, 800), (900, 1000), (1100, 1200)]], [[(1000, 900), (800, 700), (600, 500), (400, 300)]], [[(10, 20), (30, 40), (50, 60), (70, 80)]], [[(101, 105), (200, 210), (300, 320), (400, 420)]], [[(1000, 1001), (2000, 2004), (3000, 3010), (4000, 4005)]], [[(500, 600), (700, 800), (1100, 1200)]], [[(999999, -999999), (70, 100000000), (-5000000, 5000000)]], [[(-10, -5), (-3, 0), (9, 15)]], [[(1, -1), (100, -100), (10000, -10000)]], [[(-10, -5), (-3, 70), (-3, 0), (-3, 0)]], [[(100, -100), (7, 200), (-50, 50), (300, 100)]], [[(100, -100), (0, 200), (-50, 50), (300, 100), (100, -100)]], [[(1, -1), (100, -100), (1000, -1000), (30, -1), (10000, -10000)]], [[(1000, 15), (-10, -5), (-3, 0), (2, 6), (9, 15)]], [[(0, -100), (100, -200), (1000, -300), (10000, -400), (10000, -400)]], [[(-200, 200), (100, -50), (-200, 200), (300, -300), (-400, 400), (100, -50)]], [[(-10, -5), (9, 15)]], [[(-10, -5), (2, 6), (9, 15)]], [[(-10, 5000000), (-3, 0), (2, 6), (9, 15)]], [[(999999, -999999), (999999, -999999), (70, 100000000), (-5000000, 5000000)]], [[(5, 10), (15, 20), (25, 30), (35, 40), (5, 10)]], [[(500, 600), (500, 80), (700, 800), (1100, 1200)]], [[(1, 2), (4, 5), (7, 8), (10, 11), (10, 11)]], [[(100, -50), (-200, 200), (300, -100000000), (-400, 400)]], [[(-300, -1), (100, -100), (10000, -10000)]], [[(-10, -5), (-3, 70), (-3, 0), (-3, 0), (-3, 0)]], [[(101, 105), (300, 320), (400, 420)]], [[(10, 20), (30, 40), (50, 60), (70, 80), (30, 40)]], [[(100, 100), (200, 200), (300, 300), (300, 300), (400, 400)]], [[(100, -100), (7, 200), (-50, 50), (300, 100), (100, -100)]], [[(100, -50), (-200, 200), (300, -100000000), (-400, 400), (300, -100000000)]], [[(1, 2), (4, 5), (7, 9), (10, 11)]], [[(-10, -5), (2, 6), (3010, 15), (9, 15)]], [[(300, 320), (400, 420)]], [[(-3, -2), (-8, -7), (-5, -1), (-8, -7), (-5, -1)]], [[(1, -1), (10000, 4), (100, -100), (30, -1), (10000, -10000)]], [[(100, 100), (200, 200), (300, 300), (400, 400), (400, 400)]], [[(2000, 2004), (2004, 2004), (3000, 3010), (4000, 4005)]], [[(100, 100), (200, 200), (400, 400)]], [[(50000000, 100000000), (70000000, 120000000), (80000000, 130000000)]], [[(1, 2), (4, 5), (10, 11), (4, 5)]], [[(1000, 900), (400, 100000000), (800, 700), (600, 500), (400, 300)]], [[(0, 1), (2, 4), (3, 6), (5, 7), (5, 7)]], [[(-10, 5000000), (-3, 0), (2, 6)]], [[(100, 100), (200, 200), (300, 300), (400, 400), (400, 400), (200, 200)]], [[(4005, 100000000), (999999, -999999), (70, 100000000), (-5000000, 5000000)]], [[(1000, 15), (-10, -5), (2, 6), (9, 15)]], [[(999999, -999999), (69, 100000000), (-5000000, 5000000)]], [[(100, -100), (7, 200), (-50, 50), (300, 100), (100, -100), (100, -100)]], [[(4, 9), (1, 1), (2, 2), (3, 3), (4, 4)]], [[(999999, 1000), (70, 100000000), (-5000000, 5000000)]], [[(50000000, 100000000), (60000000, 110000000), (70000000, 120000000), (80000000, 130000000), (50000000, 100000000)]], [[(10, 20), (30, 40), (50, 60), (1, 80)]], [[(100, 100), (200, 200), (300, 300), (400, 400), (400, 400), (-3, 100), (200, 200)]], [[(100, 100), (300, 300), (400, 400)]], [[(500, 600), (700, 800), (900, 1000), (1100, 1200), (500, 600)]], [[(0, -100), (100, -200), (1000, -300), (10000, -400), (0, -100)]], [[(4, 5), (7, 8), (10, 11)]], [[(100, 100), (200, 200), (300, 300), (400, 400), (400, 400), (100, 100)]], [[(100, -100), (7, 200), (-50, 50), (300, 100), (7, 200)]], [[(2000, 2004), (2004, 2004), (3000, 3010), (4000, 4005), (2004, 2004)]], [[(15, 20), (35, 40)]], [[(-10, 5000000), (-3, 0), (2, 6), (2, 6), (2, 6)]], [[(1000, 1001), (2000, 2004), (3000, 3010), (4000, 4005), (4000, 4005)]], [[(4, 9), (1, 1), (2, 2), (3, 3), (4, 4), (4, 4), (3, 3)]], [[(1, 1000), (500, 700), (300, 900), (200, 800), (300, 900)]], [[(500, 600), (500, 80), (700, 800), (1100, -8)]], [[(-8, -7), (-8, -7), (-5, -1)]], [[(1, -1), (10000, 4), (100, -100), (30, -1), (10000, -10000), (10000, -10000)]], [[(4, 9), (1, 1), (2, 2), (3, 3), (4, 4), (4, 4), (3, 3), (1, 1)]], [[(200, 200), (300, 300), (400, 400), (400, 400), (400, 400), (400, 400)]], [[(1000000, -1000000), (999999, -999999), (-100000000, 100000000)]], [[(1, 1), (3, 3), (4, 4), (3, 3)]], [[(500, 600), (700, 800), (900, 1000), (1100, 1200), (700, 800), (500, 600)]], [[(-10, 10), (-100, 100), (0, 1000), (-1000, 500), (-100, 100)]], [[(100, 15), (100, -100), (-50, 50), (300, 100), (100, -100), (-50, 50)]], [[(4, 9), (1, 1), (2, 2), (3, 3), (4, 4), (4, 4), (3, 3), (1, 1), (1, 1), (4, 4)]], [[(7, 8), (10, 11)]], [[(10, 20), (30, 40), (50, 60), (70, 80), (50, 60)]], [[(1000, 900), (400, 100000000), (800, 700), (400, 300)]], [[(1000, 15), (-10, -5), (-3, 0), (9, 15)]], [[(500, 600), (700, 800), (900, 1000), (1100, 1200), (700, 800), (500, 600), (900, 1000)]], [[(1, 2), (4, 5), (7, 9), (10, 11), (10, 11)]], [[(100, 100), (200, 200), (300, 300), (400, 400), (400, 400), (-3, 100), (200, 200), (200, 200)]], [[(-201, 200), (100, -50), (-200, 200), (300, -300), (-400, 400), (100, -50), (100, -50)]], [[(3, 6), (1000, 15), (-10, -5), (2, 6), (9, 15)]], [[(-10, -5), (2, 6), (3010, 15), (9, 15), (-10, -5)]], [[(50000000, 100000000), (60000000, 110000000), (70000000, 120000000), (80000000, 130000000), (50000000, 100000000), (50000000, 100000000)]], [[(4, 9), (1, 1), (2, 2), (4, 4), (4, 4), (3, 3), (4, 4), (1, 1)]], [[(50000000, 100000000), (60000000, 110000000), (80000000, 130000000)]], [[(1, 1), (3, 3), (4, 4), (3, 3), (4, 4)]], [[(100, 100), (200, 200), (300, 300), (400, 400), (100, 100), (300, 300), (400, 400)]], [[(4, 5), (7, 8), (10, 11), (4, 5)]], [[(1000000, -1000000), (999999, -999999), (-100000000, 100000000), (-300, 5000000)]], [[(1000000, -1000000), (999999, -999999), (-100000000, 100000000), (-5000000, 5000000), (-100000000, 100000000)]], [[(4, 9), (1, 1), (2, 2), (3, 3), (4, 4), (1, 1)]], [[(1000, -7), (-3, -2), (-8, -7), (-5, -1), (-8, -7), (-5, -1)]], [[(200, 200), (300, 300), (400, 400), (100, 100), (300, 300), (400, 400)]], [[(1000000, 999999), (10000000, 9999999), (100000000, 99999999)]], [[(1, -1), (10000, 4), (10000, 3), (100, -100), (30, -1), (10000, -10000), (10000, -10000)]], [[(1000000, -1000000), (999999, -999999), (-100000000, 100000000), (999999, -999999)]], [[(99, -50), (-200, 200), (300, -100000000), (-400, 400)]], [[(1, -1), (10000, 4), (100, -100), (10000, -10000), (10000, -10000)]], [[(100, -100), (300, 100)]], [[(100, 100), (200, 200), (300, 300), (400, 400), (400, 400), (100, 100), (300, 300)]]]
results = [7, 15, 23, 1, 1, 200, 3, 6, 999, 4, 50000000, 1500, 800, 200000000, 20000, 10400, 0, 5, 0, 100, 100, 10, 20, 10, 100, 99999930, 6, 20000, 73, 200, 200, 20000, 985, 10400, 800, 6, 6, 5000010, 99999930, 5, 420, 1, 100000300, 20000, 73, 20, 10, 0, 200, 100000300, 2, 2995, 20, 4, 20000, 0, 10, 0, 50000000, 1, 99999600, 3, 5000010, 0, 99999930, 985, 99999931, 200, 5, 99999930, 50000000, 79, 103, 0, 100, 10400, 1, 0, 200, 10, 5, 5000010, 10, 5, 999, 1108, 4, 20000, 5, 0, 200000000, 0, 100, 1500, 200, 5, 1, 10, 99999600, 985, 100, 2, 103, 800, 985, 2995, 50000000, 5, 50000000, 0, 0, 1, 200000000, 200000000, 5, 1007, 0, 1, 20000, 200000000, 100000300, 20000, 200, 0]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "max_difference"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7', 'assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15', 'assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
