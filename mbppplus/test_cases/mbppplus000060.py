import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]], [[1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], [[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]], [[1000, 999, 998, 997, 996], [1001, 1002, 1003, 1004], [1000, 999, 998, 997, 996]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]], [[100, 200, 300, 400, 500, 600], [25, 50, 75, 200, 225, 250, 275], [350, 400, 450, 500, 550, 600, 650, 700]], [[5, 10, 15, 20, 25, 30, 35], [1, 2, 3, 4, 5, 6, 7], [50, 45, 40, 35, 30, 25, 20, 15, 10]], [[], [], []], [[-10, -9, -8, -7, -6, -5], [1000, 2000, 3000], [-100, -200, -300, -400, -500]], [[1.5, 2.5, 3.5, 4.5, 5.5], [0.5, 1.5, 2.5, 3.5, 4.5], [-5.5, -4.5, -3.5, -2.5, -1.5]], [[10, 20, 30, 40, 50], [5, 15, 25, 35, 45], [1, 2, 3, 4, 5]], [[100, 200, 300, 400, 500], [-100, -200, -300, -400, -500], [0.1, 0.2, 0.3, 0.4, 0.5]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3]], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 3, 5, 2, 4]], [[10, 20, 30, 40, 50, 60, 70], [5, 15, 25, 35, 45, 55, 65, 75], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[10, 15, 20, 25, 30], [5, 10, 15, 20, 25], [1, 2, 3, 4, 5]], [[100, 200], [50, 150, 250], [80, 160, 240]], [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55], [10, 20, 30, 40, 50]], [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9]], [[100, 200, 300, 400, 500], [250, 350, 450, 550, 650], [100, 200, 300, 400, 500]], [[1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]], [[12, 80, 160, 240], [650, 200], [12, 80, 160, 240]], [[650, 38], [650, 38], [12, 80, 160, 240]], [[10, 20, 30, 50, 60, 70], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 2, 3]], [[1, 2, 3, 4, 5], [1, 3, 5, 3, 2, 4], [1, 3, 5, 3, 2, 4]], [[999, 998, 997, 996], [1001, 1002, 1003, 1004], [1000, 999, 998, 997, 996]], [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55, 25], [15, 25, 35, 45, 55, 25]], [[11, 239, 80, 41, 240], [650, 38, 650], [11, 239, 80, 41, 240]], [[1, 2, 3, 60, 4, 5], [5, 4, 3, 2, 24], [1, 2, 3, 60, 4, 5]], [[650, 37], [650, 37], [12, 80, 160, 240]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[100, 300, 400, 500, 600], [25, 50, 75, 200, 225, 250, 275], [350, 400, 450, 500, 550, 600, 650, 700]], [[], [], [50, 150, 250]], [[12, 80, 160, 240], [200], [12, 80, 160, 240]], [[1, 3, 5, 7, 9], [2, 6, 8, 10], [1, 3, 5, 7, 9]], [[1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [2, 4, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], [3, 5, 7, 9, 11, 13, 15, 17, 19, 15, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]], [[10, 15, 20, 25, 30], [5, 10, 15, 20], [1, 1, 3, 4, 5]], [[2, 3, 3, 3, 3, 2, 2, 4, 3], [1, 1, 1, 1, 1, 1, 1], [2, 3, 3, 3, 3, 2, 2, 4, 3]], [[12, 81, 160, 240], [12, 81, 160, 240], [201, 200]], [[12, 81, 160, 240], [201], [201]], [[1, 2, 3, 60, 4, 5], [5, 4, 3, 3, 2, 24], [1, 2, 3, 60, 4, 5]], [[1, 3, 5, 7, 9], [1, 3, 5, 9], [1, 3, 5, 9]], [[650, 37], [12, 80, 160, 240], [650, 37]], [[-10, -9, -8, -7, -6, -5], [-100, -200, -300, -400, -500], [-100, -200, -300, -400, -500]], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 3, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]], [[11, 239, 81, 41, 240], [650, 38, 650], [650, 38, 650]], [[23, 650], [23, 650], [12, 80, 160, 39]], [[5, 10, 15, 20, 25, 30, 35], [1, 2, 3, 4, 1, 6, 7], [50, 45, 40, 35, 30, 25, 20, 15, 10]], [[650, 36], [650, 36], [12, 80, 160, 240]], [[12, 3, 160, 240], [12, 3, 160, 240], [12, 3, 160, 240]], [[10, 20, 30, 40, 50, 60, 70], [10, 20, 30, 40, 50, 60, 70], [10, 20, 30, 40, 50, 60, 70]], [[100, 200], [50, 250], [50, 250]], [[1000, 999, 998, 997, 996], [1000, 999, 998, 997, 996], [1001, 1002, 1003, 1004]], [[1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [3, 3, 3, 3, 3, 2, 3]], [[81, 160, 240], [81, 160, 240], [81, 160, 240]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 4, 2, 3]], [[200, 200], [200, 200], [50, 250, 50]], [[1, 1, -6, 1, 1, 1, 1, 1], [1, 1, -6, 1, 1, 1, 1, 1], [3, 3, 3, 3, 3, 2, 3]], [[1, 3, 5, 7, 27, 9], [1, 3, 5, 7, 27, 9], [3, 5, 9]], [[650, 38, 38], [650, 38, 38], [650, 38, 38]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 7]], [[12, 160, 240], [12, 160, 240], [201, 200]], [[11, 239, 80, 41, 240], [650, 38, 649, 650], [650, 38, 649, 650]], [[1, 18, 3, 5, 9], [1, 18, 3, 5, 9], [1, 18, 3, 5, 9]], [[50, 150], [50, 150], [80, 160, 240]], [[651, 23, 650, 23], [651, 23, 650, 23], [12, 80, 160, 39]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3]], [[10, 20, 30, 50, 60, 70], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9]], [[650, 38, 37], [650, 38, 37], [650, 38, 37]], [[200], [12, 80, 240], [12, 80, 240]], [[650, 38, 650, 649, 650, 650], [650, 38, 650, 649, 650, 650], [650, 38, 650, 649, 650, 650]], [[0.5, 1.5, 2.5, 3.5, 4.5], [-5.5, -4.5, -3.5, -1.5], [0.5, 1.5, 2.5, 3.5, 4.5]], [[200], [12, 80, 160, 240], [12, 80, 160, 240]], [[1, 2, 3, 4, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 4, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 4, 5, 6, 8, 9, 6, 7, 6]], [[1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [2, 4, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], [3, 5, 7, 9, 11, 13, 15, 19, 15, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]], [[650, 37], [650, 37], [650, 37]], [[50, 13, 150, 13], [50, 13, 150, 13], [50, 13, 150, 13]], [[12, 81, 160, 240, 81], [], [12, 81, 160, 240, 81]], [[1, 1, -6, 1, 1, 1, 1, 1], [4, 3, 3, 3, 3, 2, 3], [4, 3, 3, 3, 3, 2, 3]], [[160, 240], [160, 240], [-100, 200]], [[1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3]], [[10, 20, 30, 400, 40, 50], [5, 15, 25, 35, 45], [1, 2, 3, 4, 5]], [[1, 2, 100, 3, 4, 5, 6, 7, 9, 10, 3, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]], [[650, 38, 650, 650, 650], [650, 38, 650, 650, 650], [650, 38, 650, 650, 650]], [[1, 2, 3, 4, 1, 6, 29], [50, 45, 40, 35, 30, 25, 20, 15, 10], [1, 2, 3, 4, 1, 6, 29]], [[12, 160, 240, 81], [], [12, 160, 240, 81]], [[651, 23], [651, 23], [651, 23]], [[650, 38, 650], [650, 38, 650], [11, 239, 81, 41, 240]], [[10, 20, 30, 40, 50, 10], [15, 25, 35, 45, 55, 25, 15, 25], [15, 25, 35, 45, 55, 25, 15, 25]], [[1, 3, 4, 5], [10, 20, 30, 40], [1, 3, 4, 5]], [[1, 2, 3, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 5, 6, 8, 9, 6, 7, 6]], [[2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2]], [[1, 1, -6, 1, 1, 1, 1, 1], [4, 3, 3, 3, 2, 3], [4, 3, 3, 3, 2, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9, 2]], [[1, 3, 5, 9], [1, 3, 5, 9], [1, 3, 5, 9]], [[1, 2, 3, 4, 5, 6, 7, 9, 3, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 13]], [[1, 3, 5, 7, 9], [2, 6, 8, 10], [1, 60, 5, 7, 9]], [[10, 20, 30, 400, 40, 50, 10], [10, 20, 30, 400, 40, 50, 10], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 1, 6, -9], [1, 2, 3, 4, 1, 6, -9], [50, 45, 40, 35, 30, 25, 20, 15, 10]], [[-100, -200, -300, -400, -500], [-100, -200, -300, -400, -500], [-100, -200, -300, -400, -500]], [[10, 20, 30, 40, 50], [10, 20, 30, 40], [10, 20, 30, 40]], [[0.5, 1.5, 2.5, 3.5, 4.5], [-4.5, -3.5, -1.5], [0.5, 1.5, 2.5, 3.5, 4.5]], [[12, 27, 240, 15, 81], [12, 27, 240, 15, 81], [12, 27, 240, 15, 81]], [[40, 27, 240, 15, 81], [40, 27, 240, 15, 81], [40, 27, 240, 15, 81]], [[10, 20, 30, 50], [10, 20, 30, 40], [10, 20, 30, 40]], [[1, 1, 1, 1, 38, 1, 1, 1], [1, 1, 1, 1, 38, 1, 1, 1], [3, 3, 3, 3, 3, 2, 3]], [[11, 239, 80, 41, 240], [650, 651, -5, 38, 649, 650], [650, 651, -5, 38, 649, 650]], [[81, 240], [81, 240], [81, 240]], [[200], [12, 80, 160, 12, 240], [12, 80, 160, 12, 240]], [[-7, 12, 160, 37, 81], [-7, 12, 160, 37, 81], [-7, 12, 160, 37, 81]], [[1, 2, 3, 4, 1, 6, 29], [50, 45, 40, 35, 30, 25, 20, 15, 10, 10], [1, 2, 3, 4, 1, 6, 29]], [[1, 3, 3, 60, 4, 5], [5, 4, 3, 3, 2, 24], [1, 3, 3, 60, 4, 5]], [[200, 100, 200, 300, 400, 500], [-100, -200, -300, -400, -500], [0.1, 0.2, 0.3, 0.4, 0.5, 0.3]], [[81, 160, 159, 240], [81, 160, 159, 240], [81, 160, 159, 240]], [[-6, 81, 160, 240], [-6, 81, 160, 240], [-6, 81, 160, 240]], [[38, 650, 649, 650, 650], [38, 650, 649, 650, 650], [38, 650, 649, 650, 650]], [[10, 20, 40, -500, 50], [10, 20, 40, -500, 50], [10, 20, 40, -500, 50]], [[651, -7, 652, 23], [651, -7, 652, 23], [651, -7, 652, 23]], [[1, 1, 1, 1, 38, 1, 1, 1], [4, 3, 3, 3, 3, 3, 2, 3], [4, 3, 3, 3, 3, 3, 2, 3]], [[-100, -100, -200, -300, -400, -500], [-100, -100, -200, -300, -400, -500], [-100, -100, -200, -300, -400, -500]]]
results = [[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233], [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12], [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85], [996, 996, 997, 997, 998, 998, 999, 999, 1000, 1000, 1001, 1002, 1003, 1004], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [25, 50, 75, 100, 200, 200, 225, 250, 275, 300, 350, 400, 400, 450, 500, 500, 550, 600, 600, 650, 700], [1, 2, 3, 4, 5, 5, 6, 7, 10, 10, 15, 15, 20, 20, 25, 25, 30, 30, 35, 35, 40, 45, 50], [], [-500, -400, -300, -200, -100, -10, -9, -8, -7, -6, -5, 1000, 2000, 3000], [-5.5, -4.5, -3.5, -2.5, -1.5, 0.5, 1.5, 1.5, 2.5, 2.5, 3.5, 3.5, 4.5, 4.5, 5.5], [1, 2, 3, 4, 5, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [-500, -400, -300, -200, -100, 0.1, 0.2, 0.3, 0.4, 0.5, 100, 200, 300, 400, 500], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3], [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5], [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75], [1, 2, 3, 4, 5, 5, 10, 10, 15, 15, 20, 20, 25, 25, 30], [50, 80, 100, 150, 160, 200, 240, 250], [10, 10, 15, 20, 20, 25, 30, 30, 35, 40, 40, 45, 50, 50, 55], [1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10], [100, 100, 200, 200, 250, 300, 300, 350, 400, 400, 450, 500, 500, 550, 650], [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 40, 40, 41, 42, 43, 44, 45, 45, 46, 47, 48, 49, 50, 50], [12, 12, 80, 80, 160, 160, 200, 240, 240, 650], [12, 38, 38, 80, 160, 240, 650, 650], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 20, 30, 50, 60, 70], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3], [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5], [996, 996, 997, 997, 998, 998, 999, 999, 1000, 1001, 1002, 1003, 1004], [10, 15, 15, 20, 25, 25, 25, 25, 30, 35, 35, 40, 45, 45, 50, 55, 55], [11, 11, 38, 41, 41, 80, 80, 239, 239, 240, 240, 650, 650], [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 24, 60, 60], [12, 37, 37, 80, 160, 240, 650, 650], [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9], [25, 50, 75, 100, 200, 225, 250, 275, 300, 350, 400, 400, 450, 500, 500, 550, 600, 600, 650, 700], [50, 150, 250], [12, 12, 80, 80, 160, 160, 200, 240, 240], [1, 1, 2, 3, 3, 5, 5, 6, 7, 7, 8, 9, 9, 10], [1, 2, 3, 4, 5, 5, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 40, 40, 41, 42, 43, 44, 45, 45, 46, 47, 48, 49, 50, 50], [1, 1, 3, 4, 5, 5, 10, 10, 15, 15, 20, 20, 25, 30], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4], [12, 12, 81, 81, 160, 160, 200, 201, 240, 240], [12, 81, 160, 201, 201, 240], [1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 24, 60, 60], [1, 1, 1, 3, 3, 3, 5, 5, 5, 7, 9, 9, 9], [12, 37, 37, 80, 160, 240, 650, 650], [-500, -500, -400, -400, -300, -300, -200, -200, -100, -100, -10, -9, -8, -7, -6, -5], [1, 2, 3, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [11, 38, 38, 41, 81, 239, 240, 650, 650, 650, 650], [12, 23, 23, 39, 80, 160, 650, 650], [1, 1, 2, 3, 4, 5, 6, 7, 10, 10, 15, 15, 20, 20, 25, 25, 30, 30, 35, 35, 40, 45, 50], [12, 36, 36, 80, 160, 240, 650, 650], [3, 3, 3, 12, 12, 12, 160, 160, 160, 240, 240, 240], [10, 10, 10, 20, 20, 20, 30, 30, 30, 40, 40, 40, 50, 50, 50, 60, 60, 60, 70, 70, 70], [50, 50, 100, 200, 250, 250], [996, 996, 997, 997, 998, 998, 999, 999, 1000, 1000, 1001, 1002, 1003, 1004], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3], [81, 81, 81, 160, 160, 160, 240, 240, 240], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4], [50, 50, 200, 200, 200, 200, 250], [-6, -6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3], [1, 1, 3, 3, 3, 5, 5, 5, 7, 7, 9, 9, 9, 27, 27], [38, 38, 38, 38, 38, 38, 650, 650, 650], [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9], [12, 12, 160, 160, 200, 201, 240, 240], [11, 38, 38, 41, 80, 239, 240, 649, 649, 650, 650, 650, 650], [1, 1, 1, 3, 3, 3, 5, 5, 5, 9, 9, 9, 18, 18, 18], [50, 50, 80, 150, 150, 160, 240], [12, 23, 23, 23, 23, 39, 80, 160, 650, 650, 651, 651], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 8, 8, 9, 9, 10, 20, 30, 50, 60, 70], [37, 37, 37, 38, 38, 38, 650, 650, 650], [12, 12, 80, 80, 200, 240, 240], [38, 38, 38, 649, 649, 649, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650], [-5.5, -4.5, -3.5, -1.5, 0.5, 0.5, 1.5, 1.5, 2.5, 2.5, 3.5, 3.5, 4.5, 4.5], [12, 12, 80, 80, 160, 160, 200, 240, 240], [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9], [1, 2, 3, 4, 5, 5, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 15, 15, 16, 18, 19, 20, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 40, 40, 41, 42, 43, 44, 45, 45, 46, 47, 48, 49, 50, 50], [37, 37, 37, 650, 650, 650], [13, 13, 13, 13, 13, 13, 50, 50, 50, 150, 150, 150], [12, 12, 81, 81, 81, 81, 160, 160, 240, 240], [-6, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4], [-100, 160, 160, 200, 240, 240], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3], [1, 2, 3, 4, 5, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 400], [1, 2, 3, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 100], [38, 38, 38, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650], [1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 6, 6, 10, 15, 20, 25, 29, 29, 30, 35, 40, 45, 50], [12, 12, 81, 81, 160, 160, 240, 240], [23, 23, 23, 651, 651, 651], [11, 38, 38, 41, 81, 239, 240, 650, 650, 650, 650], [10, 10, 15, 15, 15, 15, 20, 25, 25, 25, 25, 25, 25, 30, 35, 35, 40, 45, 45, 50, 55, 55], [1, 1, 3, 3, 4, 4, 5, 5, 10, 20, 30, 40], [1, 1, 1, 2, 2, 2, 3, 3, 3, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [-6, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4], [1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9], [1, 1, 1, 3, 3, 3, 5, 5, 5, 9, 9, 9], [1, 2, 3, 3, 4, 5, 6, 7, 9, 11, 12, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [1, 1, 2, 3, 5, 5, 6, 7, 7, 8, 9, 9, 10, 60], [1, 2, 3, 4, 5, 10, 10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 400, 400], [-9, -9, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 6, 6, 10, 15, 20, 25, 30, 35, 40, 45, 50], [-500, -500, -500, -400, -400, -400, -300, -300, -300, -200, -200, -200, -100, -100, -100], [10, 10, 10, 20, 20, 20, 30, 30, 30, 40, 40, 40, 50], [-4.5, -3.5, -1.5, 0.5, 0.5, 1.5, 1.5, 2.5, 2.5, 3.5, 3.5, 4.5, 4.5], [12, 12, 12, 15, 15, 15, 27, 27, 27, 81, 81, 81, 240, 240, 240], [15, 15, 15, 27, 27, 27, 40, 40, 40, 81, 81, 81, 240, 240, 240], [10, 10, 10, 20, 20, 20, 30, 30, 30, 40, 40, 50], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 38, 38], [-5, -5, 11, 38, 38, 41, 80, 239, 240, 649, 649, 650, 650, 650, 650, 651, 651], [81, 81, 81, 240, 240, 240], [12, 12, 12, 12, 80, 80, 160, 160, 200, 240, 240], [-7, -7, -7, 12, 12, 12, 37, 37, 37, 81, 81, 81, 160, 160, 160], [1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 6, 6, 10, 10, 15, 20, 25, 29, 29, 30, 35, 40, 45, 50], [1, 1, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 24, 60, 60], [-500, -400, -300, -200, -100, 0.1, 0.2, 0.3, 0.3, 0.4, 0.5, 100, 200, 200, 300, 400, 500], [81, 81, 81, 159, 159, 159, 160, 160, 160, 240, 240, 240], [-6, -6, -6, 81, 81, 81, 160, 160, 160, 240, 240, 240], [38, 38, 38, 649, 649, 649, 650, 650, 650, 650, 650, 650, 650, 650, 650], [-500, -500, -500, 10, 10, 10, 20, 20, 20, 40, 40, 40, 50, 50, 50], [-7, -7, -7, 23, 23, 23, 651, 651, 651, 652, 652, 652], [1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 38], [-500, -500, -500, -400, -400, -400, -300, -300, -300, -200, -200, -200, -100, -100, -100, -100, -100, -100]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "merge_sorted_list"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]', 'assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]', 'assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
