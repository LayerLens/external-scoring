import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[3], [7], [10], [1000000], [987654], [123456789], [987654321], [1], [3141592653589793238462643383279], [987654321012345678901234567890], [1000000000000000000000000000000], [123456789876543212345678987654], [9999999999999999999999999999999], [10000000000000000000000000000000], [3141592653589793238462643383280], [1000001], [2], [999999999999999999999999999999], [3141592653589793238462643383281], [1000000000000000000000000000001], [36], [999999999999999999999999999997], [987654321012345678901234567891], [123456789876543212345678987653], [987654322], [True], [35], [9999999999999999999999999999998], [123456790], [987655], [123456791], [73], [999999999999999999999999999996], [987654321012345678901234567892], [10000000000000000000000000000001], [4], [999999999999999999999999999995], [999999999999999999999999999998], [987654323], [37], [123456792], [987654324], [1000000000000000000000000000002], [3141592653589793238462643383278], [3141592653589793238462643383277], [38], [9999999999999999999999999999997], [987654325], [123456789876543212345678987656], [89], [1000000000000000000000000000003], [72], [123456789876543212345678987657], [123456789876543212345678987655], [9999999999999999999999999999996], [9999999999999999999999999999995], [123456789876543212345678987658], [3141592653589793238462643383283], [999999999999999999999999999994], [3141592653589793238462643383284], [123456788], [88], [12], [987654321012345678901234567893], [90], [123456789876543212345678987652], [3141592653589793238462643383282], [999999999999999999999999999993], [1000000000000000000000000000004], [999999999999999999999999999992], [999999999999999999999999999991], [987653], [1000002], [987652], [987654321012345678901234567894], [45], [123456789876543212345678987651], [123456793], [91], [3141592653589793238462643383276], [56], [1000003], [123456789876543212345678987650], [987654321012345678901234567896], [987654321012345678901234567889], [13], [987654321012345678901234567897], [3141592653589793238462643383275], [14], [1000004], [5], [987654327], [57], [987654326], [987654320], [987654321012345678901234567895], [71], [33], [10000000000000000000000000000002], [987654321012345678901234567898], [1000000000000000000000000000005], [3141592653589793238462643383285], [58], [999999], [987654328], [3141592653589793238462643383274], [34], [15], [46], [987656], [987654329], [47], [32]]
results = [27, 175, 370, 3999997000000, 3901838731902, 60966314630391717, 3901844228196921201, 1, 39478417604357434475337963999482540904898557959867970857017527, 3901844231257430268900472488836177412026970583762796372504730, 3999999999999999999999999999997000000000000000000000000000000, 60966315866483770400853499161025831429510257568940100731902, 399999999999999999999999999999890000000000000000000000000000007, 399999999999999999999999999999970000000000000000000000000000000, 39478417604357434475337963999507673646127276305775672004083760, 4000005000001, 10, 3999999999999999999999999999989000000000000000000000000000007, 39478417604357434475337963999532806387355994651683373151150001, 4000000000000000000000000000005000000000000000000000000000001, 5076, 3999999999999999999999999999973000000000000000000000000000045, 3901844231257430268900472488844078646595069349194006249047851, 60966315866483770400853499160038177110497911870174668830677, 3901844236098155770, 1, 4795, 399999999999999999999999999999810000000000000000000000000000022, 60966315618046030, 3901846633135, 60966316605700351, 21097, 3999999999999999999999999999965000000000000000000000000000076, 3901844231257430268900472488851979881163168114625216125590980, 400000000000000000000000000000050000000000000000000000000000001, 52, 3999999999999999999999999999957000000000000000000000000000115, 3999999999999999999999999999981000000000000000000000000000022, 3901844243999390347, 5365, 60966317593354680, 3901844251900624932, 4000000000000000000000000000013000000000000000000000000000010, 39478417604357434475337963999457408163669839613960269709951302, 39478417604357434475337963999432275422441121268052568562885085, 5662, 399999999999999999999999999999730000000000000000000000000000045, 3901844259801859525, 60966315866483770400853499163001140067534948966470964534376, 31417, 4000000000000000000000000000021000000000000000000000000000027, 20520, 60966315866483770400853499163988794386547294665236396435625, 60966315866483770400853499162013485748522603267705532633135, 399999999999999999999999999999650000000000000000000000000000076, 399999999999999999999999999999570000000000000000000000000000115, 60966315866483770400853499164976448705559640364001828336882, 39478417604357434475337963999583071869813431343498775445282507, 3999999999999999999999999999949000000000000000000000000000162, 39478417604357434475337963999608204611042149689406476592348772, 60966313642737412, 30712, 540, 3901844231257430268900472488859881115731266880056426002134117, 32130, 60966315866483770400853499159050522791485566171409236929460, 39478417604357434475337963999557939128584712997591074298216250, 3999999999999999999999999999941000000000000000000000000000217, 4000000000000000000000000000029000000000000000000000000000052, 3999999999999999999999999999933000000000000000000000000000280, 3999999999999999999999999999925000000000000000000000000000351, 3901830830677, 4000013000010, 3901822929460, 3901844231257430268900472488867782350299365645487635878677262, 7965, 60966315866483770400853499158062868472473220472643805028251, 60966318581009017, 32851, 39478417604357434475337963999407142681212402922144867415818876, 12376, 4000021000027, 60966315866483770400853499157075214153460874773878373127050, 3901844231257430268900472488883584819435563176350055631763576, 3901844231257430268900472488828276177458871818331586495961617, 637, 3901844231257430268900472488891486054003661941781265508306745, 39478417604357434475337963999382009939983684576237166268752675, 742, 4000029000052, 85, 3901844275604328735, 12825, 3901844267703094126, 3901844220295686640, 3901844231257430268900472488875683584867464410918845755220415, 19951, 4257, 400000000000000000000000000000130000000000000000000000000000010, 3901844231257430268900472488899387288571760707212475384849922, 4000000000000000000000000000037000000000000000000000000000085, 39478417604357434475337963999633337352270868035314177739415045, 13282, 3999989000007, 3901844283505563352, 39478417604357434475337963999356877198754966230329465121686482, 4522, 855, 8326, 3901854534376, 3901844291406797977, 8695, 4000]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "is_num_decagonal"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert is_num_decagonal(3) == 27', 'assert is_num_decagonal(7) == 175', 'assert is_num_decagonal(10) == 370']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
