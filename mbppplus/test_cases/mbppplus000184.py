import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]], [[5, 2, 9, 24.3, 29]], [[25.0, 56.7, 89.2]], [[]], [[1, 2, 3, 4, 5]], [[999999999999999, 888888888888888, 777777777777777]], [[1234.56789, 9876.54321, 1111.22222, 3333.44444]], [[1234.56789, 9876.54321, -1111.22222, -3333.44444]], [[-9999999999.998, 8888888888.887, -10000000000.43, 7777777777.4, -99999999999.999, 5555555555.5432]], [[12.345, -6.789, 9.876, -3.21, 1.234]], [[True, True, False, True, True, False, False, False, True, True]], [[1234.56789, -1111.22222, -3333.44444]], [[True, True, False, True, True, False, False, False, True, True, False]], [[12.345, -6.789, 9.876, 1.234]], [[12.345, -6.789, -1.8925412084393396, 1.234]], [[-9999999999.998, -10000000000.43, 7777777777.4, -99999999999.999, 5555555555.5432]], [[12.345, 9.876, 1.234]], [[1.234, 9876.54321, 1111.22222, 3333.44444]], [[1233.577044983001, 9876.54321, -1111.22222, -3333.44444]], [[1, 2, 3, 3, 4, 5]], [[12.345, -6.789, 1.234, -6.789]], [[-9999999999.998, -10000000000.43, 7777777776.487441, -99999999999.999, 5555555555.5432]], [[12.345, 9.876, 1.234, 13.039304120445887, 12.345]], [[-10000000000.43, 1234.56789, 9876.54321, 1111.22222, 9876.595139749, 3333.44444]], [[-9999999999.046753, 8888888888.887, -10000000000.43, 7777777777.4, -99999999999.999, 5555555555.5432, 8888888888.887]], [[12.345, -2.3815343652904044, -6.789, 1.234, -3.21, 1.234]], [[True, True, False, True, True, False, False, False, True, True, False, True]], [[12.345, -2.3815343652904044, -6.323863532860684, 1.234, -3.21, 1.234]], [[-9999999999.998, -10000000000.43, 7777777776.487441, -99999999999.999, 5555555555.5432, -10000000000.43]], [[-9999999999.998, -3333.44444, 5555555555.5432, -9999999999.998]], [[-3333.44444, 5555555555.5432, -9999999999.998]], [[1, 2, 3, 3, 4]], [[12.345, 1234.56789, 9.876, 1.234]], [[1234.56789, 9876.54321, -1111.22222]], [[1, 2, 3, 999999999999999, 5]], [[12.345, 1234.56789, 12.345]], [[True, True, False, True, True, False, False, False, True, True, False, True, True, True]], [[12.345, -2.3815343652904044, -6.323863532860684, 1.234, 1.234, 12.345]], [[12.345, 1.234, 13.039304120445887, 12.345]], [[12.345, 1.0234087299417132, -6.789, 1.234, -6.789]], [[1.234, 9876.54321, 1111.22222]], [[1.234, 9876.54321]], [[True, True, False, True, False, True, False, False, False, True, True]], [[12.345, 1234.56789, 12.345, 1234.56789]], [[1235.513119491916, 9875.64860469328, 9875.902825290452, 9876.54321, 1111.22222, 3333.44444, 9876.54321]], [[1.234, 1235.513119491916]], [[1, 2, 3, 5]], [[-9999999999.998, -10000000000.43, 8888888888.887, -10000000000.43, 7777777777.4, -99999999999.999, 5555555554.949068]], [[12.345, 1234.9868070521075, 12.345]], [[5, 1, 2, 3, 4, 5]], [[-9999999999.998, -10000000000.43, 7777777777.4, -99999999999.999, 5555555556.229488, 5555555556.229488]], [[True, True, False, True, True, True, False, False, True, True, False, True]], [[1.234, 1235.513119491916, 1235.513119491916]], [[-9999999999.998, -10000000000.43, 8888888888.887, -10000000000.43, 7777777777.4, 7777777777.281848, -99999999999.999, 5555555554.949068, 7777777777.4, -10000000000.43]], [[-9999999999.998, -10000000000.43, 7777777777.4, -99999999999.999, 5555555556.229488, 5555555556.229488, -9999999999.998]], [[1234.56789, -1111.22222, -3333.44444, -3333.44444]], [[1, 2, 3]], [[False, True, True, False, True, True, True, False, False, True, True, True, True, False]], [[-9999999999.998, -10000000000.43, 7777777777.4, 5555555554.949068, -99999999999.999, 5555555555.5432]], [[-9999999999.998, 7777777776.487441, -99999999999.999, 5555555555.5432]], [[9875.64860469328, 1.234, 1235.513119491916]], [[12.345, -6.789, -1.8925412084393396, 12.175109362539212, 1.234]], [[-9999999999.998, -5984060847.287674, 7777777776.487441, -99999999999.999, 5555555555.5432, -10000000000.43]], [[-6.789, 1234.56789, 9876.54321, -1111.22222]], [[5, 1, 2, 3, 4, 5, 5]], [[-9999999999.998, -3333.44444, 5555555555.5432, -9999999999.998, -3333.44444]], [[12.345, -6.789, 9.876, 7777777777.281848, 1.234]], [[-9999999999.998, -10000000000.43, 5555555554.949068, -99999999999.999, 5555555555.5432]], [[9875.55054044343, 1234.56789, 9876.54321, -1111.22222, -3333.44444]], [[1234.56789, -3333.22999419903, -3332.447053089045, -1111.22222, -3333.44444, -3333.44444, -3333.44444]], [[7777777777.4, -3333.22999419903, -2003.815194513465, 12.345, -1111.22222, -3333.44444, -3333.44444, -3333.44444]], [[False, True, True, False, False, True, True, True, False, False, True, True, True, True, False]], [[12.345, 9.876, 1235.513119491916, 1.234]], [[True, True, False, True, True, False, False, False, True]], [[9875.64860469328, 1.234, 1204.5558674183492]], [[1234.56789, -9999999999.998, -3333.44444, 5555555555.5432, 7216273895.0863905, -9999999999.998]], [[-9999999999.998, -10000000000.43, 7777777777.4, -99999999999.999, 1204.5558674183492]], [[1.234, 13.039304120445887, 12.345]], [[12.345, 1.0234087299417132, -6.789, 1.234, -6.789, 1.0234087299417132]], [[-1111.22222, 12.345, -6.789, -1.8925412084393396, 12.175109362539212, 1.234]], [[12.345, -2003.815194513465, -6.789, 9.876, -3.21, 1.234, 0.7325595045021591]], [[9.876, 12.345, -6.789, 9.876, 7777777777.281848, 1.234]], [[-9999999999.998, -10000000000.43, 7777777776.487441, -99999999999.999, 5555555555.3888855]], [[1111.22222, -1111.22222, -3333.44444, -3333.44444]], [[True, True, False, True, False, True, False, False, True, True]], [[12.345, -6.789, -1.8925412084393396, 1.234, -1.8925412084393396]], [[-9999999999.998, 1111.22222, -10000000000.43, 7777777777.4, 5555555554.949068, -99999999999.999, 5555555555.5432, -99999999999.999]], [[False, True, False, True, True, False, False, False, True, True, True, True, False, False]], [[True, False, False, True, True, True, False, False, True, True, False, True]], [[-9999999999.998, -3333.44444, -9999999999.998]], [[True, True, False, False, False, True, False, False, False, True, True]], [[2, 3, 4, 2, 5]], [[12.345, -2.3815343652904044, -6.789, 1.234, -3.2950216498422646, -3.21, 1.234]], [[-9999999999.998, -8911921504.74599, 7777777776.487441, -99999999999.999, 5555555555.3888855, -9999999999.998]], [[1.234, 7777777776.487441, -10000000000.43]], [[False, True, False, True, True, True, False, False, False, True, True, True, True, False, False, False]], [[8888888888.887, 1111.22222, 9876.54321, 1111.22222, 1.234]], [[12.345, -6.789, -1.8925412084393396, 9.876, 1.234]], [[1.234, 9876.54321, 1111.22222, 1111.22222]], [[-8304365886.95686, -3333.44444, 5555555555.5432, -9999999999.998]], [[-2003.815194513465, 8888888888.887, 1111.22222, 9876.54321, 1111.22222, 1.234]], [[1234.56789, -3333.22999419903, -3332.447053089045, -1111.22222, -3333.44444, -3333.44444]], [[1234.56789, -3333.22999419903, -3332.447053089045, -1111.22222, -3333.44444, -3333.44444, -3333.44444, 1234.56789]], [[-9999999999.998, 7777777777.4, -99999999999.999, 5555555556.229488, 5555555556.229488, -9999999999.998]], [[13.039304120445887, 12.345]], [[1234.56789, -3.2950216498422646, -3333.44444]], [[12.345, 1.0234087299417132, -9.234536526623243, 1.234, -6.789]], [[12.345, -6.789, 9.876, 7777777777.281848, -6.323863532860684, 1.234]], [[1.234, 13.039304120445887]], [[1, 2, 2]]]
results = [243, 345, 513, 0, 75, 7999999999999992, 62224, 26672, -586666666668, 65, 60, -9627, 66, 64, 16, -533333333335, 69, 57288, 26668, 108, -4, -533333333340, 240, -59999847402, -622222222216, 12, 84, 18, -700000000008, -57777791108, -13333343331, 65, 5032, 30003, 5000000000000050, 3777, 126, 108, 152, 0, 32967, 19756, 66, 9976, 316302, 2474, 44, -754444444453, 3777, 120, -606666666666, 96, 7419, -1022222222250, -777777777777, -26168, 18, 126, -606666666672, -386666666672, 33339, 80, -675904365090, 39976, 175, -72222255550, 38888888965, -544444444445, 82720, -115780, 62222090736, 135, 5036, 45, 33246, -43369035882, -561111105090, 78, 6, -6570, -13930, 46666666818, -533333333345, -26664, 60, 10, -1608888880008, 98, 84, -60000009999, 55, 80, -7, -693471529044, -6666666669, 128, 44444504945, 70, 48400, -50995254656, 53333393910, -79242, -122440, -606666666666, 50, -6303, -10, 46666666722, 28, 15]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "round_and_sum"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243', 'assert round_and_sum([5,2,9,24.3,29])==345', 'assert round_and_sum([25.0,56.7,89.2])==513']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
