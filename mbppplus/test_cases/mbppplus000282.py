import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[(10, 4, 5, 6), (5, 6, 7, 5)], [(11, 5, 6, 7), (6, 7, 8, 6)], [(12, 6, 7, 8), (7, 8, 9, 7)], [(), ()], [(0, 0, 0), (1, 1, 1)], [(1000000000, 1000000000), (999999999, 999999999)], [(2, 5, 8, 11), (2, 3, 4, 5)], [(10, 20, 30, 40, 50), (5, 10, 15, 20, 25)], [(2, 5, 8, 11), (2, 5, 8, 11)], [(10, 20, 30, 40, 50), (10, 20, 30, 40, 50)], [(5, 10, 15, 20, 25), (5, 10, 15, 20, 25)], [(10, 20, 30, 40, 49), (10, 20, 30, 40, 50)], [(5, 10, 15, 20, 25), (5, 11, 15, 20, 25)], [(6, 11, 5, 20, 25), (5, 11, 15, 20, 25)], [(1000000001, 1000000000, 1000000000), (1000000000, 1000000000, 1000000000)], [(0, 0, 0), (1, 4, 1)], [(5, 10, 15, 20, 24), (5, 11, 15, 20, 25)], [(5, 10, 15, 20, 24), (5, 11, 15, 20, 50)], [(2, 5, 8, 20), (2, 5, 8, 11)], [(5, 11, 10, 20, 25), (5, 11, 10, 20, 25)], [(5, 10, 15, 20, 24), (5, 11, 50, 20, 50)], [(1000000001, 1000000000, 1000000000), (1000000001, 1000000000, 1000000000)], [(2, 3, 1000000001, 4, 5), (2, 3, 1000000001, 4, 5)], [(5, 10, 15, 20, 24), (5, 10, 15, 20, 24)], [(1, 0, 1), (1, 1, 1)], [(11, 5, 20, 25, 25), (5, 11, 15, 20, 25)], [(5, 11, 10, 1000000001, 25), (5, 11, 10, 20, 25)], [(1, 4, 1), (1, 4, 1)], [(10, 20, 30, 40), (10, 20, 30, 40)], [(11, 5, 20, 25, 25, 5), (5, 11, 15, 2, 20, 25)], [(2, 5, 8, 11), (1000000001, 5, 8, 11)], [(10, 30, 30, 40, 49), (10, 20, 30, 40, 50)], [(2, 8, 11, 5), (2, 3, 4, 5)], [(5, 11, 15, 20, 50), (5, 11, 15, 20, 50)], [(11, 5, 20, 25, 25, 5), (5, 12, 11, 15, 2, 20)], [(6, 11, 5, 20, 25), (6, 11, 5, 20, 25)], [(5, 11, 15, 2, 20, 25, 11), (5, 11, 15, 2, 20, 25, 11)], [(0, 0, 0, 0), (1, 4, 2, 1)], [(10, 20, 30, 40, 50), (5, 10, 15, 12, 25)], [(5, 10, 15, 20, 24), (5, 10, 15, 20, 30)], [(5, 10, 15, 20, 25), (10, 20, 30, 40, 50)], [(5, 1, 4, 4, 1), (5, 1, 4, 4, 1)], [(2, 3, 4, 5, 3), (2, 3, 4, 5, 3)], [(1000000001, 1000000000, 1000000000, 1000000000), (1000000001, 1000000000, 1000000000, 1000000000)], [(10, 30, 30, 40, 49), (10, 30, 30, 40, 49)], [(5, 11, 50, 20, 50), (5, 11, 50, 20, 50)], [(11, 5, 20, 25, 25, 5, 5), (11, 5, 20, 25, 25, 5, 5)], [(1000000001, 1000000001, 1000000000, 1000000000), (1000000001, 1000000000, 1000000000, 1000000000)], [(10, 2, 19, 30, 40, 50), (10, 2, 20, 30, 40, 50)], [(6, 5, 11, 15, 5, 2, 20, 25, 11), (6, 5, 11, 15, 5, 2, 20, 25, 11)], [(10, 2, 19, 30, 40, 50), (10, 2, 19, 30, 40, 50)], [(5, 11, 10, 1000000001, 25), (5, 11, 9, 20, 25)], [(8, 5, 8, 11), (2, 5, 8, 11)], [(10, 20, 31, 40), (10, 20, 30, 40)], [(9, 5, 8, 11), (2, 5, 8, 11)], [(2, 8, 11, 5, 8), (2, 3, 3, 4, 5)], [(10, 50, 2, 18, 40, 50), (10, 2, 20, 30, 40, 50)], [(10, 20, 30, 40), (9, 20, 30, 40)], [(6, 5, 20, 25, 20), (5, 11, 15, 20, 25)], [(5, 11, 15, 20, 25), (5, 11, 15, 20, 25)], [(5, 11, 10, 1000000001, 25), (11, 10, 20, 25, 20)], [(1, 4, 1), (1, 5, 30)], [(10, 2, 20, 30, 40, 50), (10, 50, 2, 18, 40, 50)], [(0, 1, 0, 0), (1, 1, 20, 1)], [(1, 3, 1), (1, 5, 30)], [(11, 5, 20, 25, 25, 5, 5), (11, 5, 20, 25, 9, 5, 5)], [(2, 11, 5), (2, 11, 5)], [(10, 40, 10), (10, 30, 40)], [(5, 10, 15, 12, 25), (5, 10, 15, 12, 25)], [(5, 11, 15, 11, 50), (5, 11, 15, 20, 50)], [(10, 20, 30, 50), (10, 20, 31, 40)], [(2, 3, 4, 5), (2, 5, 8, 11)], [(2, 5, 8, 20), (2, 5, 8, 20)], [(1000000000, 1000000000), (1000000000, 1000000000)], [(5, 11, 15, 20, 50, 11), (5, 11, 15, 20, 50, 11)], [(1, 5, 30), (1, 5, 30)], [(10, 2, 19, 30, 40, 50, 2), (10, 2, 20, 30, 50, 40, 40)], [(10, 20, 30, 40, 20), (10, 20, 30, 40, 50)], [(5, 11, 15, 20, 25, 20), (5, 11, 15, 20, 25, 20)], [(9, 2, 3, 4, 5), (2, 5, 8, 11, 5)], [(2, 3, 4, 24), (2, 3, 4, 5)], [(2, 3, 4, 5, 3), (1, 3, 4, 5, 3)], [(2, 3, 4, 5), (2, 3, 4, 5)], [(2, 3, 1000000001, 18, 5), (2, 3, 1000000001, 4, 5)], [(10, 20, 30, 40, 49), (10, 20, 30, 40, 49)], [(9, 20, 30, 40), (9, 20, 30, 40)], [(5, 11, 15, 20, 50, 11), (6, 11, 15, 20, 50, 11)], [(5, 11, 10, 1000000002, 25), (5, 11, 10, 1000000002, 25)], [(11,), (10,)], [(6, 5, 11, 15, 5, 2, 20, 11), (6, 5, 11, 15, 5, 2, 20, 11)], [(1000000000, 1000000000), (1000000000, 40)], [(2, 3, 4, 5, 4), (2, 3, 4, 5, 4)], [(10, 2, 19, 30, 40, 2, 50), (10, 2, 20, 30, 50, 40, 40)], [(10, 20, 8, 40), (10, 20, 31, 40)], [(11, 5, 20, 25, 25), (3, 11, 15, 20, 25)], [(1000000002, 1000000000, 1000000000), (1000000001, 1000000000, 1000000000)], [(11, 15, 5, 20, 25, 25), (11, 15, 5, 20, 25, 25)], [(5, 11, 10, 20, 25), (5, 10, 10, 20, 25)], [(5, 11, 15, 20, 25, 25), (5, 11, 15, 20, 25, 25)], [(9, 2, 4, 4, 5), (9, 2, 3, 4, 5)], [(10, 2, 19, 25, 40, 50), (10, 2, 20, 30, 40, 50)], [(5, 11, 15, 20, 25, 20), (5, 11, 15, 31, 25, 20)], [(1, 5, 30), (1, 6, 30)], [(2, 3, 4, 24), (31, 3, 4, 5)], [(10, 2, 19, 25, 40, 50), (10, 2, 19, 25, 40, 50)], [(10, 30, 40), (10, 40, 10)], [(2, 1000000001, 4, 5), (2, 1000000001, 4, 5)], [(1000000000, 1000000000, 1000000000), (1000000000, 1000000000, 1000000000)]]
results = [(0, 4, 5, 1), (5, 5, 6, 1), (5, 6, 7, 1), (), (0, 0, 0), (1, 1), (0, 2, 0, 1), (0, 0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 49), (0, 10, 0, 0, 0), (1, 0, 5, 0, 0), (1, 0, 0), (0, 0, 0), (0, 10, 0, 0, 24), (0, 10, 0, 0, 24), (0, 0, 0, 9), (0, 0, 0, 0, 0), (0, 10, 15, 0, 24), (0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0), (1, 5, 5, 5, 0), (0, 0, 0, 1, 0), (0, 0, 0), (0, 0, 0, 0), (1, 5, 5, 1, 5, 5), (2, 0, 0, 0), (0, 10, 0, 0, 49), (0, 2, 3, 0), (0, 0, 0, 0, 0), (1, 5, 9, 10, 1, 5), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 4, 0), (0, 0, 0, 0, 24), (5, 10, 15, 20, 25), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 19, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 0, 0), (0, 0, 1, 0), (1, 0, 0, 0), (0, 2, 2, 1, 3), (0, 0, 2, 18, 0, 0), (1, 0, 0, 0), (1, 5, 5, 5, 20), (0, 0, 0, 0, 0), (5, 1, 10, 1, 5), (0, 4, 1), (0, 2, 0, 12, 0, 0), (0, 0, 0, 0), (0, 3, 1), (0, 0, 0, 0, 7, 0, 0), (0, 0, 0), (0, 10, 10), (0, 0, 0, 0, 0), (0, 0, 0, 11, 0), (0, 0, 30, 10), (0, 3, 4, 5), (0, 0, 0, 0), (0, 0), (0, 0, 0, 0, 0, 0), (0, 0, 0), (0, 0, 19, 0, 40, 10, 2), (0, 0, 0, 0, 20), (0, 0, 0, 0, 0, 0), (1, 2, 3, 4, 0), (0, 0, 0, 4), (0, 0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 2, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0), (5, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (1,), (0, 0, 0, 0, 0, 0, 0, 0), (0, 0), (0, 0, 0, 0, 0), (0, 0, 19, 0, 40, 2, 10), (0, 0, 8, 0), (2, 5, 5, 5, 0), (1, 0, 0), (0, 0, 0, 0, 0, 0), (0, 1, 0, 0, 0), (0, 0, 0, 0, 0, 0), (0, 0, 1, 0, 0), (0, 0, 19, 25, 0, 0), (0, 0, 0, 20, 0, 0), (0, 5, 0), (2, 0, 0, 4), (0, 0, 0, 0, 0, 0), (0, 30, 0), (0, 0, 0, 0), (0, 0, 0)]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "tuple_modulo"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)', 'assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)', 'assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
