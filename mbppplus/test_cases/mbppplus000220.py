import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[3, 100, 4, 5, 150, 6]], [[4, 42, 55, 68, 80]], [[10, 22, 9, 33, 21, 50, 41, 60]], [[-3, -100, -4, -5, -150, -6]], [[3, -5, 2, 6, -1, 4, -3]], [[2, 3, 3, 4, 5, 3, 6]], [[2, -3, 3, 4, -5, 3, -6]], [[50, 100, 200, 150, 300, 250, 400]], [[-5, -4, -3, -2, -1, 0, 1]], [[10, 9, 8, 7, 6, 5, 4, 3]], [[1, -2, 3, -4, 5, -6, 7]], [[10, 8, 6, 5, 1, 9, 7, 4, 3, 2]], [[-3, -4, 5, -2, 6, -1, 7, -8, 9, -10, 11]], [[50, 100, 200, 100, 150, 300, 250, 400, 100]], [[-3, -4, 5, -2, 5, 6, 200, 10, -1, 7, -8, 9, -10, 11]], [[10, 9, 7, 6, 4]], [[50, 250, 150, 300, 250, 400]], [[50, 250, 6, 150, 300, 250, 400]], [[-2, 3, -5, 2, 6, -1, 4, -3]], [[10, 9, 7, 6, 5, 4, 3]], [[50, 100, -3, 150, 300, 250, 400]], [[10, 9, 8, 8, 5, 4, 3, 4]], [[10, 9, 8, 7, 6, 5, -8, 3]], [[3, -5, 2, 6, 4, -3]], [[50, 250, 150, 300, 250, 1, 400]], [[2, 50, 100, 200, 100, 150, 300, 250, 400, 100]], [[2, 50, 100, 200, 100, 150, 300, 400, 100]], [[10, 9, 8, 7, 6, 5, 5, 4, 3, 9]], [[-6, 249, 6, 150, 250, 400]], [[50, 250, 150, 250, 400]], [[10, 9, 7, 7, 6, 5, 5, 4, 3, 9]], [[50, 100, -3, 150, 300, 250, 400, 100]], [[50, 100, -3, 150, 300, 250, 400, 300]], [[10, 9, 8, 7, 6, 5, 5, 4, 9]], [[3, -5, 2, -1, -6, 4, -3]], [[50, 100, -3, 150, 250, 400]], [[10, 8, 5, 1, 9, 7, 4, 3, 2, 6, 6]], [[10, 9, 8, 7, 6, 5, 4, 10]], [[50, 100, 150, 250, 400]], [[-3, -100, -4, -5, -150, -6, -4]], [[50, 100, 200, 150, 300, 250, 400, 100]], [[10, 9, 8, 7, 6, 5, 5, 4, 9, 9]], [[-2, -2, 3, -4, 5, -6, 7]], [[2, 300, 50, 100, 200, 100, 150, 250, 300, 250, 400, 100]], [[50, 100, 150, 200, 100, 150, 300, 250, 400, 100]], [[2, 50, -8, 200, 100, 150, 300, 250, 400, 100]], [[-2, 3, -4, -6, 7]], [[-4, 2, 3, 3, 4, 5, 3, 6]], [[-3, -101, -4, -5, -150, -6, -150]], [[-6, 249, 150, 250, 400]], [[-2, 4, -5, 2, 6, -1, 4, -3]], [[-3, -101, -4, -5, 6, -6, -150, -4]], [[2, -3, 3, 4, 3, -6]], [[50, 100, 200, 150, 300, 1, 400]], [[-2, -2, 3, -4, 5, 7]], [[2, 3, -5, 2, 300, 6, -1, 4, -3]], [[10, 9, 8, 7, 6, 5, -8, 4]], [[-3, -100, -5, -150, -6]], [[2, 300, 50, 100, 200, 100, 150, 250, 300, 250, 400, 100, 400]], [[-3, -100, -4, -5, 5, -6, -5]], [[3, -5, 2, 4, -3]], [[-2, -2, -6, -8, 5, -6, 7]], [[-2, -2, -4, 5, -6, 7]], [[-5, -4, -3, 9, 8, -1, 0, -1, 1]], [[10, 9, 6, 4]], [[251, 50, 100, 200, 150, 300, 250, 400, 100]], [[1, -2, 3, -4, -6, 7]], [[-3, -100, -4, -6, -150, -6, -4]], [[-2, 3, -5, 2, -1, 4, -3]], [[10, 9, 7, 6, 5, 5, 4, 3, 9]], [[-2, -2, -6, -8, -6, 7]], [[-3, 50, 100, -2, 150, 300, 250, 400]], [[10, 1, 9, 8, 7, 6, 5, 5, 4, 3, 9]], [[1, -1, -2, 3, -4, 5, -6, 7, -2]], [[10, 9, 8, 7, 6, 5, -8]], [[10, 9, -8, 7, 7, 6, 5, 5, 4, 3, 9]], [[10, 7, 9, 7, 6, 4]], [[10, 9, 1, 8, 3, 7, 6, 5, 4, 3]], [[-4, 2, 3, 3, 4, 5, 3]], [[50, 100, 200, 150, 300, 1, 3]], [[2, 2, 50, -8, 299, 200, 100, 151, 300, 250, 400, -150]], [[50, 100, 200, 100, 150, 300, 250, 400, -5, 100, 300]], [[-3, -101, -4, -5, -150, -6, -150, -4]], [[2, 300, 50, 100, 200, 100, 150, 250, 300, 250, 400, 100, 400, 2, 150]], [[-5, -3, -2, -1, 0, 1]], [[50, 250, 6, 150, -8, 300, 250, 400]], [[10, 9, 7, 6, 4, 5, 4, 3, 9]], [[10, 8, 7, 6, 5, 5, 251, 9]], [[-3, -100, -4, -5, -150, -6, -6]], [[100, 200, 150, 300, 1, 3]], [[2, 2, -3, 3, 4, -5, 3]], [[50, 100, 150, 250]], [[-5, 2, 6, 4, 250, -3]], [[2, 249, 3, 4, 3, -6, -6, -6, 3]], [[-4, 2, 3, 3, 4, 5, 5, 3, 6]], [[100, 200, 151, 150, 300, 1, 3, 200]], [[9, 8, 7, 6, 5, 4, 3]], [[2, 300, 50, 100, 200, 100, 150, 250, 300, 250, 400, 100, 400, 250]], [[3, -5, 7, 6, 4, -3]], [[2, -3, 3, 4, -5, 251, 7]], [[4, 50, 250, -4, 150, 300, 250, 400]], [[200, 151, 300, 3, 200]], [[9, 8, 7, 6, 5, 4, 3, 5]], [[2, 2, 50, -8, 299, 200, 100, 151, 300, 250, 400, -150, 2]], [[-101, -101, 10, 9, 7, 6, 4]], [[10, 9, 7, 4, 4]], [[50, 100, 100, 0, 300, 250, 400, 100, 100, 50]], [[2, 300, 50, 100, 200, 100, 150, 250, 300, 250, 100, 400, 250]], [[2, -3, 3, 4, -5, -6]], [[50, -3, 150, 300, 250, 400, 300]], [[-2, -2, -7, 5, -6, 7]], [[10, 9, 8, 7, 6, 5, 4, 2]], [[10, 9, -8, 7, 7, 6, 2, 5, 4, 50, 9]]]
results = [3000, 50265600, 2460, 900, 20, 60, 2, 1000000, 20, 10, 1, 10, 48, 4500000, 48000, 10, 100000, 270000, 20, 10, 5000, 12, 10, 15, 45000, 4500000, 1800000000, 27, 6, 15000000, 27, 5000, 5000, 36, 18, 5000, 12, 40, 75000000000, 900, 1000000, 36, -2, 1125000000, 150000000, 100, -2, 3, 900, 150, 20, 600, 3, 1000000, -2, 20, 10, 900, 1125000000, 400, 15, 336, -2, 180, 10, 1000000, 1, 900, 20, 27, 336, 270000, 27, 12, 10, 10, 63, 21, 3, 1000000, 200, 4500000, 900, 1125000000, 15, 12500, 27, 1255, 900, 45000, 2, 187500000, 15, 498, 3, 45000, 9, 1125000000, 15, 7, 50000, 45300, 15, 200, 9, 10, 100000, 1125000000, 2, 250, 294, 10, 10]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "max_product"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert max_product([3, 100, 4, 5, 150, 6]) == 3000', 'assert max_product([4, 42, 55, 68, 80]) == 50265600', 'assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
