import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[15, 25, 35], [10, 20, 30], [6, 9, 4], [2.3, 4.7, 3.9], [9.8, 7.1, 5.6], [6.2, 3.5, 8.9], [999999, 1000000, 1000000], [10000000, 5000000, 1000000000], [0, 0, 0], [999999, 1000000, 10000001], [10.351335245743993, 7.1, 5.4977102681459025], [2.76692487581672, 8.9, 8.9], [6.2, 3.5, 5.6], [10000000, 1000000000, 10000000], [0, 999999, 1000000], [7.1, 5.6, 7.1], [2.3, 4.7, 2.3], [1000000, 1000000000, 10000000], [1000001, 0, 1000000], [6.022223408955435, 7.1, 5.530370540982478], [1000000, 1000000000, 10000001], [1000001, 1000000, 0], [12.228674915981982, 7.1, 5.4977102681459025], [6.022223408955435, 2.76692487581672, 8.9], [1000000, 10000000, 1000000], [0, 10000001, 1000000], [10000000, 10000001, 1000000], [3.5, 8.9, 3.5], [7.1, 10.351335245743993, 5.6], [6.2, 3.5, 7.1], [3.9, 5.6, 7.1], [1000000, 0, 1000000], [1000000, 999999, 1000000], [1000000000, 10000000, 1000000], [1000000, 999999, 10000001], [-88, 999999, 10000001], [10000001, 1000001, 10000001], [6.2, 4.854251964633547, 8.9], [10000001, 10000001, 10000001], [3.5, 5.6, 5.715398378080888], [4.7, 3.9, 3.9], [1000000, 1000000000, 1000000000], [0, 1000000, 999998], [4.850138598783948, 5.6, 7.1], [2.76692487581672, 8.9, 9.893908979364358], [9999999, 10000000, 1000001], [5.6, 8.9, 2.76692487581672], [999999, 1000001, 1000000], [0, 10000002, 10000002], [9999999, 10000001, 0], [0, 10000001, 10000001], [1000001, 10000000, 999998], [-88, 0, 0], [-88, 0, -88], [3.5, 8.9, 2.8209769415973507], [10000002, 1000001, 10000001], [9999999, 10000000, 999998], [1000000, 1000000, 1000000000], [2.7014656823764467, 2.3, 10.351335245743993], [2.3, 5.6, 4.7], [1000001, 999997, 999998], [1000000001, 1000000000, 1000000000], [-88, 10000000, 1000000], [12.228674915981982, 3.5, 8.9], [1000001, 999998, 10000001], [9.893908979364358, 8.93173150209581, 9.893908979364358], [4.522479161912187, 5.6, 2.7775010956134483], [999997, 1000001, 1000001], [2.9887311136415176, 2.538621128154383, 8.9], [7.1, 7.1, 7.1], [1000000, 1000000, 10000001], [3.5, 2.538621128154383, 3.5], [2.76692487581672, 8.9, 5.705802537957529], [999999, 1000000, 10000002], [4.850138598783948, 5.8060581662192785, 2.76692487581672], [999999, 10000002, 10000002], [5.6, 6.2, 12.228674915981982], [6.2, 8.9, 6.2], [2.538621128154383, 5.4977102681459025, 12.228674915981982], [2.3, 8.9, 2.8209769415973507], [10000001, 1000001, 1000001], [6.2, 3.5393547718834983, 6.2], [5.4977102681459025, 2.7014656823764467, 10.351335245743993], [9999999, 10000002, 10000002], [4.7, 5.4977102681459025, 9.893908979364358], [6.022223408955435, 5.530370540982478, 8.9], [1, 0, 1000000], [12.228674915981982, 2.9793130653024416, 8.9], [2.3, 5.8060581662192785, 8.9], [10000000, 1000001, 1], [10.351335245743993, 4.522479161912187, 3.5], [6.2299590099438475, 5.068507205133304, 6.2299590099438475], [-88, 1000000, 1000000], [10000000, 999999, 999999], [5.715398378080888, 8.9, 8.9], [8.871527604619072, 8.011219353977074, 9.893908979364358], [2.9887311136415176, 5.4977102681459025, 2.8209769415973507], [2.7014656823764467, 11.989047929768356, 9.96018534975334], [999997, 999998, 10000000], [10000002, 9999999, 999998], [8.93173150209581, 9.893908979364358, 8.93173150209581], [1000000, 1000000000, 1000000002], [10000002, 999998, 10000001], [9.893908979364358, 8.93173150209581, 4.854251964633547], [7.1, 14.507707595032242, 5.6], [2.3, 2.8209769415973507, 1.6758070525843425], [1000000000, 1000000000, 1000000000], [999997, 999998, 999997], [999998, 1000001, 10000002]]
results = [20.0, 15.0, 7.5, 3.5, 8.45, 4.85, 999999.5, 7500000.0, 0.0, 999999.5, 8.725667622871995, 5.83346243790836, 4.85, 505000000.0, 499999.5, 6.35, 3.5, 500500000.0, 500000.5, 6.561111704477717, 500500000.0, 1000000.5, 9.66433745799099, 4.394574142386078, 5500000.0, 5000000.5, 10000000.5, 6.2, 8.725667622871995, 4.85, 4.75, 500000.0, 999999.5, 505000000.0, 999999.5, 499955.5, 5500001.0, 5.5271259823167735, 10000001.0, 4.55, 4.3, 500500000.0, 500000.0, 5.225069299391974, 5.83346243790836, 9999999.5, 7.25, 1000000.0, 5000001.0, 10000000.0, 5000000.5, 5500000.5, -44.0, -44.0, 6.2, 5500001.5, 9999999.5, 1000000.0, 2.5007328411882233, 3.9499999999999997, 999999.0, 1000000000.5, 4999956.0, 7.864337457990991, 999999.5, 9.412820240730085, 5.0612395809560935, 999999.0, 2.7636761208979506, 7.1, 1000000.0, 3.0193105640771916, 5.83346243790836, 999999.5, 5.328098382501613, 5500000.5, 5.9, 7.550000000000001, 4.018165698150143, 5.6, 5500001.0, 4.869677385941749, 4.099587975261175, 10000000.5, 5.098855134072951, 5.7762969749689566, 0.5, 7.603993990642212, 4.053029083109639, 5500000.5, 7.43690720382809, 5.649233107538576, 499956.0, 5499999.5, 7.307699189040444, 8.441373479298072, 4.24322069089371, 7.345256806072401, 999997.5, 10000000.5, 9.412820240730085, 500500000.0, 5500000.0, 9.412820240730085, 10.80385379751612, 2.560488470798675, 1000000000.0, 999997.5, 999999.5]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "median_trapezium"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert median_trapezium(15,25,35)==20', 'assert median_trapezium(10,20,30)==15', 'assert median_trapezium(6,9,4)==7.5']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
