import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2], [[[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1], [[[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 2], [[[-5, -2, -10], [-8, -3, -7]], 2], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 1], [[[-5, -2, -10], [-6, -9, -4], [-6, -9, -4]], 1], [[[-5, -2, -10], [-8, -3, -7]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4]], 1], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10]], 1], [[[-6, -8, -4], [-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -8, -4]], 1], [[[-6, -8, -4], [-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -8, -4], [-8, -3, -7]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 0], [[[-5, -2, -10], [-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 2], [[[-5, -2, -10], [-5, -2, -10], [-6, -9, -4]], 1], [[[-5, -2, -10], [-6, -9, -4]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-5, -2, -10]], 2], [[[-5, -2, -10], [-8, -3, -7]], 0], [[[-6, -9, -4]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10], [-5, -2, -10]], 0], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10]], 1], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10], [-5, -2, -10]], 1], [[[-4, -2, -10], [-4, -2, -10], [-4, -2, -10], [-8, -3, -7], [-4, -2, -10], [-4, -2, -10]], 1], [[[-5, -1, -10], [-5, -1, -10], [-8, -3, -6], [-6, -9, -4], [-5, -1, -10]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10]], 1], [[[-5, -2, -10], [-5, -2, -10], [-6, -9, -4], [-5, -2, -10]], 1], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10]], 2], [[[-5, -2, -10], [-6, -9, -4], [-5, -2, -10]], 0], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4]], 0], [[[-5, -2, -10], [-6, -9, -4], [-5, -2, -10]], -1], [[[-5, -2, -10], [-6, -9, -4]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10]], 0], [[[-5, -2, -10]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10]], 0], [[[-8, -3, -7], [-5, -2, -10]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4]], 2], [[[-6, -8, -4], [0, -2, -10], [0, -2, -10], [-8, -3, -7], [-6, -8, -4], [-8, -3, -7]], 1], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -2], [[[-5, -2, -10], [-8, -3, -7]], -2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7]], -1], [[[-6, -9, -4], [-5, -2, -10]], -1], [[[-5, -2, -10], [-5, -2, -10]], -3], [[[-6, -8, -4], [0, -2, -10], [0, -2, -10], [-8, -3, -7], [-6, -8, -4], [-8, -3, -7]], 0], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1], [[[-5, -1, -10], [-5, -1, -10], [-8, -3, -6], [-6, -9, -4], [-5, -1, -10]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10]], 1], [[[-3, -7, -7], [-3, -7, -7], [-3, -7, -7], [-5, -2, -10]], 2], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10]], 0], [[[-4, -2, -10], [-4, -2, -10], [-4, -2, -10], [-8, -3, -7], [-4, -2, -10], [-4, -2, -10]], -1], [[[-3, -6, -7], [-3, -6, -7], [-3, -6, -7], [-3, -6, -7], [-3, -6, -7], [-5, -2, -10]], 2], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10], [-5, -2, -10]], 2], [[[-5, -2, -10], [-5, -2, -10], [-6, -9, -4], [-5, -2, -10]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-8, -3, -7]], 0], [[[-5, -1, -10], [-5, -1, -10], [-8, -3, -6], [-6, -9, -4], [-5, -1, -10], [-6, -9, -4]], 2], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10]], 2], [[[-5, -2, -10, -2, -2], [-5, -2, -10, -2, -2], [-5, -2, -10, -2, -2], [-5, -2, -10, -2, -2]], -1], [[[-5, -2, -10], [-5, -2, -10]], 1], [[[-5, -2, -10], [-8, -3, -7], [-8, -3, -7]], 1], [[[-5, -2, -1, -10, -2, -2], [-5, -2, -1, -10, -2, -2], [-5, -2, -1, -10, -2, -2], [-5, -2, -1, -10, -2, -2]], -1], [[[-6, -9, -4]], 1], [[[-5, -2, -10], [-6, -9, -4], [-5, -2, -10]], 2], [[[-8, -3, -7]], -2], [[[-5, -8, -10], [-6, -9, -4]], 1], [[[-5, -8, -10]], 1], [[[-6, -8, -4], [-5, -3, -10], [-5, -3, -10], [-6, -8, -4], [-8, -3, -7], [-5, -3, -10]], 1], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -10], [-6, -9, -10]], 1], [[[-6, -9, -4, -4], [-6, -9, -4, -4]], 2], [[[-5, -2, -10]], 1], [[[-5, -1, -10], [-5, -1, -10], [-8, -3, -6], [-5, -1, -10]], 1], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-5, -2, -10], [-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-5, -2, -10]], 0], [[[-8, -3, -7]], -3], [[[-5, -2, -10, -2], [-5, -2, -10, -2], [-5, -2, -10, -2]], -3], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10]], 2], [[[-5, -2, -10, -2, -2], [-5, -2, -10, -2, -2], [-5, -2, -10, -2, -2]], -3], [[[-5, -1, -10], [-5, -1, -10], [-6, -9, -4], [-6, -9, -4]], 0], [[[-6, -8, -4], [-5, -3, -10], [-5, -3, -10], [-6, -8, -4], [-8, -3, -7]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10]], -1], [[[-5, -1, -10], [-8, -3, -6], [-5, -1, -10]], 1], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-6, -9, -4], [-5, -2, -10], [-8, -3, -7]], 0], [[[-4, -2, -9], [-4, -2, -9], [-4, -2, -9], [-8, -3, -7], [-4, -2, -9], [-4, -2, -9], [-4, -2, -9]], -1], [[[-5, -2, -10], [-8, -3, 1], [-6, -9, -4]], -2], [[[-4, -2, -10], [-4, -2, -10], [-4, -2, -10], [-6, -9, -4]], 1], [[[-8, -3, -5]], 2], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -7, -4], [-6, -7, -4], [-5, -2, -10], [-5, -2, -10]], 1], [[[-8, -3, -7]], 2], [[[-5, -1, -10], [-5, -1, -10], [-6, -9, -4], [-5, -1, -10], [-6, -9, -4]], 2], [[[-5, -2, -10], [-8, -3, -7], [-5, -2, -10], [-5, -2, -10]], -1], [[[-5, -1, -10], [-5, -1, -10], [-6, -9, -4], [-5, -1, -10], [-6, -9, -4]], 1], [[[-4, -2, -10], [-8, -3, -7], [-6, -9, -4], [-4, -2, -10], [-4, -2, -10], [-4, -2, -10], [-8, -3, -7], [-4, -2, -10]], 0], [[[-5, -2, -10]], -2], [[[-2, -2, -10], [-8, -3, -7], [-6, -9, -4], [-2, -2, -10], [-2, -2, -10], [-2, -2, -10]], 0], [[[-5, -2, -10], [-5, -2, -10]], -1], [[[-8, -8, -7], [-6, -9, -4], [-4, -2, -10], [-4, -2, -10], [-8, -8, -7], [-4, -2, -10]], 0], [[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4], [-8, -3, -7]], -1], [[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 0], [[[-8, -8, -5]], 2], [[[-5, -8, -10]], 0], [[[-5, -2, -10, -2, -2, -10], [-5, -2, -10, -2, -2, -10], [-5, -2, -10, -2, -2, -10], [-5, -2, -10, -2, -2, -10]], -1]]
results = [19, 10, 11, -4, -7, -2, -2, -2, -2, -2, -2, -2, -2, -2, -4, -5, -4, -2, -2, -4, -5, -4, -4, -5, -2, -2, -2, -4, -2, -2, -2, -7, -5, -5, -4, -4, -5, -10, -5, -7, -4, -2, -2, -2, -7, -4, -5, 0, -4, -1, -2, -7, -5, -7, -7, -7, -4, -5, -4, -2, -4, -2, -2, -2, -2, -9, -4, -3, -8, -8, -3, -2, -4, -2, -1, -5, -8, -2, -4, -10, -5, -3, -4, -1, -5, -7, -2, -2, -5, -2, -7, -4, -7, -1, -4, -2, -2, -10, -4, -4, -5, -5, -5, -10]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "max_of_nth"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19', 'assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10', 'assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
