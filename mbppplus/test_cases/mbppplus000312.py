import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[5, 12], [10, 15], [19, 17], [2.5, 8.3], [3.7, 12.9], [6.2, 15.1], [15.1, 15.1], [5.4641498635818575, 12.9], [6.108468165504471, 5.4641498635818575], [22.446376239642667, 15.1], [3.7, 3.7], [6.108468165504471, 2.5], [14.989253097238434, 15.1], [2.143169966040728, 6.511574251772499], [2.627082370967182, 2.627082370967182], [3.7, 4.023046702194817], [15.1, 11.49988377404092], [2.8826303510762887, 2.96560035285773], [5.2042629714411, 6.2], [3.7, 2.8826303510762887], [2.8826303510762887, 5.2042629714411], [5.2042629714411, 12.9], [6.108468165504471, 15.1], [15.1, 6.511574251772499], [4.407307162865205, 2.8826303510762887], [1.7694488502615817, 15.1], [15.1, 6.249586159065888], [1.7694488502615817, 2.627082370967182], [5.4641498635818575, 12.03724008887459], [2.8826303510762887, 15.1], [5.4641498635818575, 16.102257473745404], [12.9, 16.102257473745404], [6.108468165504471, 5.380851620559562], [1.957071859413805, 5.098894738443001], [11, 11], [12, 12], [5.098894738443001, 6.2], [15.1, 22.446376239642667], [15.3666581306107, 15.1], [4.023046702194817, 12.9], [6.2, 16.102257473745404], [5.2042629714411, 2.8826303510762887], [3.7, 2.202518121053708], [15.1, 5.380851620559562], [3.7, 2.96560035285773], [5.098894738443001, 6.108468165504471], [6.108468165504471, 1.7797866098658295], [3.7, 3.1612397255085782], [4.819824980515893, 2.96560035285773], [1.3204950488261216, 1.7694488502615817], [3.7, 3.169916315777736], [14.262052494292515, 14.262052494292515], [16.102257473745404, 15.1], [1.756275636424042, 2.627082370967182], [6.2, 6.2], [13.54444281783779, 14.262052494292515], [8.930747528442026, 6.2], [9.53872133318414, 9.53872133318414], [9.53872133318414, 13.488930114910085], [1.3204950488261216, 13.454394825202115], [13.454394825202115, 3.7], [1.168485461090314, 1.7797866098658295], [15.1, 13.454394825202115], [11.49988377404092, 11.49988377404092], [4.819824980515893, 3.1612397255085782], [11.49988377404092, 4.819824980515893], [14.989253097238434, 15.964399808348505], [9.53872133318414, 2.8826303510762887], [4.407307162865205, 4.407307162865205], [16.102257473745404, 2.96560035285773], [16.102257473745404, 4.023046702194817], [3.1612397255085782, 3.301313980213199], [15.1, 1.756275636424042], [4.650640443650852, 4.650640443650852], [13.454394825202115, 13.454394825202115], [2.8757653923861417, 1.5442119948798239], [20.732326276101357, 14.262052494292515], [8.930747528442026, 1.756275636424042], [15.3666581306107, 4.407307162865205], [5.488488789359107, 4.023046702194817], [11, 12], [5.4641498635818575, 14.989253097238434], [2.8757653923861417, 5.2042629714411], [15.1, 2.627082370967182], [2.627082370967182, 1.756275636424042], [2.8826303510762887, 4.819824980515893], [4.819824980515893, 2.2212597177766646], [11.49988377404092, 13.454394825202115], [1.756275636424042, 1.756275636424042], [2.627082370967182, 2.4064990340562504], [6.038238072589067, 12.9], [14.989253097238434, 2.143169966040728], [1.5442119948798239, 5.2042629714411], [2.5, 2.202518121053708], [5.098894738443001, 15.1], [6.253045083887592, 13.80797667692187], [6.253045083887592, 2.96560035285773], [5.488488789359107, 3.8770686725864594], [11.49988377404092, 6.777867942699338], [15.1, 14.964415747029287], [15.279843983128266, 11.49988377404092], [7.547824026948591, 5.098894738443001], [5.2042629714411, 5.2042629714411], [6.2511034096749984, 5.4641498635818575], [2.8757653923861417, 0.9095414881896842], [15.34061760559046, 2.8826303510762887]]
results = [204.20352248333654, 566.3586699569488, 1521.8090132193388, 68.0809295387599, 155.99420070499252, 317.9431147269033, 1013.021738729489, 240.48945800506374, 157.2790534227442, 1907.6868759763363, 60.82306742338803, 126.66102213752477, 1001.91116613258, 46.15584028372287, 30.66283109609765, 63.5338043858611, 900.3953242765488, 37.45346725008046, 132.34589552251833, 54.52034205449586, 53.87696261365115, 227.42764464097127, 312.5863079293887, 780.0791590924179, 72.91699718636274, 84.51354750838692, 775.2418334194587, 17.607297742861455, 226.92568494061558, 139.21584259827935, 291.8947506773066, 836.1567156737831, 156.2178550641136, 33.57955658334347, 537.5888355171622, 639.7751430948047, 128.58769077659832, 1283.328387607088, 1040.0536863737361, 170.78482307622136, 336.08376481960687, 97.26876060929975, 50.05174021666605, 760.4358686362261, 55.11831985711407, 127.45865049379712, 122.09782590535241, 56.56840810170566, 85.68979203903392, 9.15922345898093, 56.63397425937572, 903.7096749203456, 1116.6873339864374, 17.435715065192642, 170.7844201428076, 836.9255928022179, 305.03046069244976, 404.24549922858387, 495.0765852966871, 56.08316421337808, 589.8057397007851, 7.815665800200257, 959.4112219862025, 587.5593919298575, 87.2786613830868, 450.4824246750453, 1031.1982817386274, 298.61222143191, 86.30014175797021, 828.260226001213, 839.5989802451269, 45.39400087009304, 721.1433924383036, 96.09270052303177, 804.2539576982947, 29.489828898215578, 1639.0059593186238, 255.36710482137678, 771.7462005469861, 117.33635896159252, 562.5556551319436, 273.870921993916, 53.71863101687285, 727.0746720969775, 26.080792059632685, 50.85943544756208, 80.35885946675464, 639.4423372702871, 13.704090687870748, 29.40371947607972, 270.190055756886, 713.0242821802402, 26.33534907139444, 26.168125645594323, 255.29966130166397, 297.76893875013695, 135.95279664225185, 115.86610245699053, 482.2598572296386, 1008.4839874785516, 918.0021904406065, 215.9871586755461, 120.3326101720307, 163.0500223654617, 27.249554125181522, 752.2646813596003]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "lateralsurface_cone"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert lateralsurface_cone(5,12)==204.20352248333654', 'assert lateralsurface_cone(10,15)==566.3586699569488', 'assert lateralsurface_cone(19,17)==1521.8090132193388']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
