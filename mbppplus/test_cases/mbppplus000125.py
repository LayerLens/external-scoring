import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 1, 2, 3, 4, 4, 5, 1], 3], [['a', 'b', 'c', 'd'], 2], [['p', 'y', 't', 'h', 'o', 'n'], 4], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 0], [[], 0], [[1, 1, 1, 2, 2, 3, 3], 4], [['apple', 'banana', 'cherry', 'date'], 2], [['a', 1, True, [1, 2, 3], ['x', 'y', 'z']], 3], [[-5, -10, -15, -20, -25], 2], [[None, 10, None, 20, None, 30], 3], [['', '', 'apple', 'apple', '', 'banana', ''], 4], [[0.5, 1.23, 4.56, 7.89, 10.1], 3], [[7.89, 1.23, 4.56, 7.89, 10.1], 3], [[0.5, 1.23, 4.56, 7.89, 10.1], 2], [[1, 1, 1, 2, 2, 3, -5], 4], [[None, 10, None, None, 30], 2], [[4, 8, 45, 4, 57, -47, -25], 0], [['a', 1, True, [1, 2, 3], ['x', 'y', 'z'], [1, 2, 3]], 3], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1], 3], [[None, 10, None, 20, 9, None, 30], 2], [[1, 1, 1, 2, 2, 2, 3, 3, 1], 2], [[1.23, 1.23, 1.23, 0.5, -55.23706380927258, 89.6402161175196, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316], 0], [[None, None, 20, 9, None, 30], 2], [['a', 1, True, [1, 2, 3], ['x', 'y', 'z']], 4], [[-5, -10, -15, -20, -20, -25], 1], [[-5, -10, -15, -20, -20, -25, -20], 1], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89], 4], [[1, 1, 1, 2, 2, 3, 2, -5], 4], [[7.89, 1.23, 4.56, 7.89, 10.1, 1.23], 3], [['a', 1, True, [1, 2, 3], ['x', 'y', 'z'], [1, 2, 3], 'a'], 3], [['', '', 'apple', 'apple', '', 'banana', ''], 5], [[7.89, 1.23, 4.56, 7.89, 10.1], 2], [[-5, -10, 8, -15, -20, -20, -25], 1], [[1, True, [1, 2, 3], ['x', 'y', 'z']], 3], [[1, True, ['x', 'y', 'z']], 3], [['', '', 'applee', 'apple', '', 'banana', ''], 4], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89], 2], [[0.5, 11.340237585890215, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89, 10.1], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 7], 0], [['', '', 'applee', '', 'banana', ''], 4], [[1.23, 1.23, 1.23, 0.5, -55.23706380927258, 90.13486538547112, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316], 0], [[None, 10, None, None, 30], 3], [[1, 1, 1, 2, 2, 3, -5], 3], [[9, 2, 3, 4, 5, 6, 7, 8, 9], 4], [['a', 1, True, [1, 2, 3], ['x', 'y'], [1, 2, 3]], 3], [[1, 1, 1, 2, 2, 3, 3, 3], 4], [[None, 20, 9, None, 30], 2], [[0.5, 1.23, 4.56, 7.89, 10.1, 10.1], 2], [[7.89, 1.23, 4.56, 8.010812766922186, 7.89, 10.1], 2], [[0.5, 1.164606856585469, 4.56, 7.89, 10.722160024930544, 10.1, 89.6402161175196, 7.89], 7], [['', '', 'applee', 'apple', '', 'banana', ''], 5], [[30, 'a', 1, True, [1, 2, 3], ['x', 'y', 'z'], [1, 2, 3], 'a', 1], 4], [['a', 1, True, [1, 2, 3], [1, 2, 3], 'a'], 3], [[7.89, 1.23, 4.56, 7.89, 10.1, 1.23], 2], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89], 3], [[4, 8, 45, 4, 57, -47, -25], 3], [[None, 10, None, None, 30, 10], 3], [[1, 1, 1, 2, 2, 3, -5], 2], [[30, 'a', 1, True, [1, 2, 3], ['x', 'y', 'z'], [1, 2, 3], 'a', 1, 1], 4], [[4, 8, 45, 3, 57, -47, -25, 8], 3], [[1, 1, -10, 4, 2, 2, 3, 3, 3], 4], [[8.350167246320567, 1.23, 4.56, 7.89, 10.1, 1.23, 7.89], 3], [['', '', 'apple', 'apple', '', 'banana', '', 'apple'], 5], [[1.23, 1.23, 1.23, 0.5, -55.23706380927258, 90.13486538547112, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316], 2], [['apple', 'a', 1, True, [1, 2, 3], ['x', 'y', 'z'], [1, 2, 3], 'a', 1], 4], [['', '', 'apple', 'apple', '', 'banana', 'date', 'apple'], 6], [[0.5, 1.23, 4.56, 7.89, 10.1, 10.1], 1], [['', '', 'apple', '', 'banana', 'date', 'apple'], 6], [[-5, 8, -15, -20, -20, -25], 1], [[1.23, 4.56, 7.89, 10.1, 4.56], 3], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89], 5], [[1, 1, 2, 2, 3, -5], 4], [[4, 8, 45, 3, 57, -47, -25, 8, -47], 3], [[0.3227382585908316, 1.23, 90.13486538547112, 1.164606856585469], 0], [['a', 1, True, [1, 2, 3], [1, 2, 3], False, 'a'], 3], [[None, 10, None, None, 30, 10], 4], [[0.5, 4.56, 7.89, 10.722160024930544, 10.1, 7.89], 5], [[['x', 'y', 'z', 'z'], 'a', True, 1, True, [1, 2, 3], ['x', 'y', 'z'], [1, 2, 3], 'a'], 3], [[None, None, -25, 20, 9, None, 30], 2], [['', '', 'apple', 'apple', '', 'banayna', ''], 5], [['', 'x', 'applee', '', 'banana', ''], 4], [[None, 10, 20, None, 30], 4], [['', '', 'applee', 'apple', '', 'banana', ''], 6], [[1, 1, 1, 2, 2, 3, 3, 3], 3], [[None, 20, 9, None, 30], 3], [[4, 8, 45, 3, 57, -47, -25, 8, 8], 3], [[-5, -10, -15, -20, -20, -25], 0], [[-5, -10, -15, -20, -25], 3], [[1, True, ['x', 'y', 'z'], True], 3], [[None, 10, None, 20, None, 30], 4], [['', '', 'applee', 'apple', '', 'banana', '', ''], 4], [['', '', 'apple', 'apple', '', 'banana', 'date', 'apple', ''], 6], [[4, 8, 45, 3, 57, -47, -25, 8, 8, 4], 3], [['', '', 'applee', 'apple', '', '', ''], 5], [['a', -47, True, [1, 2, 3], [1, 2, 3], 'a'], 3], [['apple', 'a', 1, True, [2, 3], ['x', 'y', 'z'], [2, 3], 'a', 1], 4], [['a', 1, True, [1, 2, 3], 'aa', ['x', 'y', 'z'], [1, 2, 3], 'a'], 3], [[None, 10, 20, None, 30, None], 4], [[1, True, ['cherry', 'y', 'z'], ['x', 'y', 'z']], 3], [[0.5, 1.164606856585469, 4.56, 7.89, 10.722160024930544, 10.1, 89.6402161175196, 7.89], 8], [[0.5, 1.23, 4.56, 7.89, 0.48611073602407395, 10.722160024930544, 10.1, 7.89], 2], [[0.5, 4.56, 7.89, 10.1, 10.1], 1], [[0.5, 1.23, 5.399620468840612, 7.89, 10.722160024930544, 10.1, 7.89], 4], [[0.5, 1.23, 5.399620468840612, 10.722160024930544, 10.1, 7.89], 4], [[0.5, 1.23, 4.56, 7.89, 10.722160024930544, 10.1, 7.89, 10.1], 5], [[0.5, 1.23, 5.399620468840612, 7.89, 10.722160024930544, 10.1, 7.89, 10.1], 4], [['', '', 'apple', 'apple', '', 'banana', 'date', ''], 6], [[7, 4, 8, 45, 3, 56, -47, -25, 8, 4, 8, 4], 3], [[1, 1, 1, 2, 2, 1, 3, 3, 3], 3], [[45, None, None, 10, None, 30, None], 4], [[0.3227382585908316, 1.23, 90.13486538547112, 1.164606856585469], 1], [[90.13486538547112, 1.23, 1.23, 0.5, -55.23706380927258, 89.6402161175196, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316], 0]]
results = [([1, 1, 2], [3, 4, 4, 5, 1]), (['a', 'b'], ['c', 'd']), (['p', 'y', 't', 'h'], ['o', 'n']), ([], [1, 2, 3, 4, 5, 6, 7, 8, 9]), ([], []), ([1, 1, 1, 2], [2, 3, 3]), (['apple', 'banana'], ['cherry', 'date']), (['a', 1, True], [[1, 2, 3], ['x', 'y', 'z']]), ([-5, -10], [-15, -20, -25]), ([None, 10, None], [20, None, 30]), (['', '', 'apple', 'apple'], ['', 'banana', '']), ([0.5, 1.23, 4.56], [7.89, 10.1]), ([7.89, 1.23, 4.56], [7.89, 10.1]), ([0.5, 1.23], [4.56, 7.89, 10.1]), ([1, 1, 1, 2], [2, 3, -5]), ([None, 10], [None, None, 30]), ([], [4, 8, 45, 4, 57, -47, -25]), (['a', 1, True], [[1, 2, 3], ['x', 'y', 'z'], [1, 2, 3]]), ([0.5, 1.23, 4.56], [7.89, 10.722160024930544, 10.1]), ([None, 10], [None, 20, 9, None, 30]), ([1, 1], [1, 2, 2, 2, 3, 3, 1]), ([], [1.23, 1.23, 1.23, 0.5, -55.23706380927258, 89.6402161175196, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316]), ([None, None], [20, 9, None, 30]), (['a', 1, True, [1, 2, 3]], [['x', 'y', 'z']]), ([-5], [-10, -15, -20, -20, -25]), ([-5], [-10, -15, -20, -20, -25, -20]), ([0.5, 1.23, 4.56, 7.89], [10.722160024930544, 10.1, 7.89]), ([1, 1, 1, 2], [2, 3, 2, -5]), ([7.89, 1.23, 4.56], [7.89, 10.1, 1.23]), (['a', 1, True], [[1, 2, 3], ['x', 'y', 'z'], [1, 2, 3], 'a']), (['', '', 'apple', 'apple', ''], ['banana', '']), ([7.89, 1.23], [4.56, 7.89, 10.1]), ([-5], [-10, 8, -15, -20, -20, -25]), ([1, True, [1, 2, 3]], [['x', 'y', 'z']]), ([1, True, ['x', 'y', 'z']], []), (['', '', 'applee', 'apple'], ['', 'banana', '']), ([0.5, 1.23], [4.56, 7.89, 10.722160024930544, 10.1, 7.89]), ([0.5, 11.340237585890215, 1.23], [4.56, 7.89, 10.722160024930544, 10.1, 7.89, 10.1]), ([], [1, 2, 3, 4, 5, 6, 7, 8, 9, 7]), (['', '', 'applee', ''], ['banana', '']), ([], [1.23, 1.23, 1.23, 0.5, -55.23706380927258, 90.13486538547112, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316]), ([None, 10, None], [None, 30]), ([1, 1, 1], [2, 2, 3, -5]), ([9, 2, 3, 4], [5, 6, 7, 8, 9]), (['a', 1, True], [[1, 2, 3], ['x', 'y'], [1, 2, 3]]), ([1, 1, 1, 2], [2, 3, 3, 3]), ([None, 20], [9, None, 30]), ([0.5, 1.23], [4.56, 7.89, 10.1, 10.1]), ([7.89, 1.23], [4.56, 8.010812766922186, 7.89, 10.1]), ([0.5, 1.164606856585469, 4.56, 7.89, 10.722160024930544, 10.1, 89.6402161175196], [7.89]), (['', '', 'applee', 'apple', ''], ['banana', '']), ([30, 'a', 1, True], [[1, 2, 3], ['x', 'y', 'z'], [1, 2, 3], 'a', 1]), (['a', 1, True], [[1, 2, 3], [1, 2, 3], 'a']), ([7.89, 1.23], [4.56, 7.89, 10.1, 1.23]), ([0.5, 1.23, 4.56], [7.89, 10.722160024930544, 10.1, 7.89]), ([4, 8, 45], [4, 57, -47, -25]), ([None, 10, None], [None, 30, 10]), ([1, 1], [1, 2, 2, 3, -5]), ([30, 'a', 1, True], [[1, 2, 3], ['x', 'y', 'z'], [1, 2, 3], 'a', 1, 1]), ([4, 8, 45], [3, 57, -47, -25, 8]), ([1, 1, -10, 4], [2, 2, 3, 3, 3]), ([8.350167246320567, 1.23, 4.56], [7.89, 10.1, 1.23, 7.89]), (['', '', 'apple', 'apple', ''], ['banana', '', 'apple']), ([1.23, 1.23], [1.23, 0.5, -55.23706380927258, 90.13486538547112, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316]), (['apple', 'a', 1, True], [[1, 2, 3], ['x', 'y', 'z'], [1, 2, 3], 'a', 1]), (['', '', 'apple', 'apple', '', 'banana'], ['date', 'apple']), ([0.5], [1.23, 4.56, 7.89, 10.1, 10.1]), (['', '', 'apple', '', 'banana', 'date'], ['apple']), ([-5], [8, -15, -20, -20, -25]), ([1.23, 4.56, 7.89], [10.1, 4.56]), ([0.5, 1.23, 4.56, 7.89, 10.722160024930544], [10.1, 7.89]), ([1, 1, 2, 2], [3, -5]), ([4, 8, 45], [3, 57, -47, -25, 8, -47]), ([], [0.3227382585908316, 1.23, 90.13486538547112, 1.164606856585469]), (['a', 1, True], [[1, 2, 3], [1, 2, 3], False, 'a']), ([None, 10, None, None], [30, 10]), ([0.5, 4.56, 7.89, 10.722160024930544, 10.1], [7.89]), ([['x', 'y', 'z', 'z'], 'a', True], [1, True, [1, 2, 3], ['x', 'y', 'z'], [1, 2, 3], 'a']), ([None, None], [-25, 20, 9, None, 30]), (['', '', 'apple', 'apple', ''], ['banayna', '']), (['', 'x', 'applee', ''], ['banana', '']), ([None, 10, 20, None], [30]), (['', '', 'applee', 'apple', '', 'banana'], ['']), ([1, 1, 1], [2, 2, 3, 3, 3]), ([None, 20, 9], [None, 30]), ([4, 8, 45], [3, 57, -47, -25, 8, 8]), ([], [-5, -10, -15, -20, -20, -25]), ([-5, -10, -15], [-20, -25]), ([1, True, ['x', 'y', 'z']], [True]), ([None, 10, None, 20], [None, 30]), (['', '', 'applee', 'apple'], ['', 'banana', '', '']), (['', '', 'apple', 'apple', '', 'banana'], ['date', 'apple', '']), ([4, 8, 45], [3, 57, -47, -25, 8, 8, 4]), (['', '', 'applee', 'apple', ''], ['', '']), (['a', -47, True], [[1, 2, 3], [1, 2, 3], 'a']), (['apple', 'a', 1, True], [[2, 3], ['x', 'y', 'z'], [2, 3], 'a', 1]), (['a', 1, True], [[1, 2, 3], 'aa', ['x', 'y', 'z'], [1, 2, 3], 'a']), ([None, 10, 20, None], [30, None]), ([1, True, ['cherry', 'y', 'z']], [['x', 'y', 'z']]), ([0.5, 1.164606856585469, 4.56, 7.89, 10.722160024930544, 10.1, 89.6402161175196, 7.89], []), ([0.5, 1.23], [4.56, 7.89, 0.48611073602407395, 10.722160024930544, 10.1, 7.89]), ([0.5], [4.56, 7.89, 10.1, 10.1]), ([0.5, 1.23, 5.399620468840612, 7.89], [10.722160024930544, 10.1, 7.89]), ([0.5, 1.23, 5.399620468840612, 10.722160024930544], [10.1, 7.89]), ([0.5, 1.23, 4.56, 7.89, 10.722160024930544], [10.1, 7.89, 10.1]), ([0.5, 1.23, 5.399620468840612, 7.89], [10.722160024930544, 10.1, 7.89, 10.1]), (['', '', 'apple', 'apple', '', 'banana'], ['date', '']), ([7, 4, 8], [45, 3, 56, -47, -25, 8, 4, 8, 4]), ([1, 1, 1], [2, 2, 1, 3, 3, 3]), ([45, None, None, 10], [None, 30, None]), ([0.3227382585908316], [1.23, 90.13486538547112, 1.164606856585469]), ([], [90.13486538547112, 1.23, 1.23, 0.5, -55.23706380927258, 89.6402161175196, 10.722160024930544, -86.73696244780378, 63.86224907290719, 0.3227382585908316])]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "split_two_parts"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])', "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"]:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
