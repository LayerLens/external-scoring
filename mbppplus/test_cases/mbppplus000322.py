import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[3], [20], [10], [1000000], [True], [1.5], [1e+30], [999999], [1.59978534789254], [77.8793434560892], [3.074373143508511], [8.346368082095324e+29], [1.6546636717000622], [1.7090994554410526], [1.3964870190521956], [1.6514502037380507], [7.206728093437386e+29], [1.504068222763319], [0.9574615822299601], [1.978952603905947], [1.0821151020776618], [1.8101404959122165], [77.46339000072932], [2.126409359720457], [1.7994080508660149], [2.0863282509978003], [1.9889979847423371], [2.209910516014096], [11.754053944629632], [2.9745432990981775], [1.9380485812956483], [1.8160105066755527], [0.8026534982703593], [1.8582712873153935], [1.3225487947269854], [1.537011943546412], [2.554675341633787], [13.323445662082547], [3.132314634383419], [1.1652257607369096], [2.666480350035669], [2.6211294693074243], [3.3991668350495305], [2.023449428551678], [1.2683788896608637], [2.3611884376247896], [1.296274219216975], [2.559363044750007], [2.4824773240117852], [1.201682902838797], [113.48545597352201], [1.9269574054294052], [1.681792278746306], [1.6929319982301843], [2.2851894516826885], [12.334339561069363], [1.8712664913912918], [0.6826835456742291], [12.243258342886065], [0.9645174112059665], [8], [1.6646082613320383], [1.5258790723960682], [2.135700245152801], [3.009934857892012], [0.6581784338861782], [1.7086474634345323], [1.1705721875789963], [1.1897322292012837], [2.976830484501024], [4.352277478522385], [1.0942496515491111], [1.1655270588910727], [3.0899280257149884], [1.5387265302270916], [2.6495562384732203], [1.1517020192886744], [4.368759672358581], [2.141695712341132], [1.7703961066409695], [2.1969046243392203], [0.6578798509831945], [2.1513106244220426], [2.8679802547813225], [1.5361851820488037], [1.6721539678145565], [35], [0.9597448709941456], [1.5219621039341968], [1.1769819695214068], [3.135708584917471], [1.1678022895032214], [1.6367367339244994], [4.365360907637427], [4.407159357131757], [36], [3.432990255884539], [6.416082503464835], [0.16945715175880016], [3.0151057620514683], [2.9363660031871768], [3.217338125591618], [1.2358067443671152], [3.6139095069895246], [0.06559550507643896], [0.9117300805503203], [1.8815855133951018]]
results = [15.588457268119894, 692.8203230275509, 173.20508075688772, 1732050807568.8772, 1.7320508075688772, 3.8971143170299736, 1.7320508075688773e+60, 1732047343468.9941, 4.4328604244420475, 10505.220939213666, 16.370946252078475, 1.206578811500298e+60, 4.742202459326623, 5.059356692929017, 3.3778039059695466, 4.723800993900108, 8.995740122480381e+59, 3.918282088794527, 1.5878275812238438, 6.783149878847407, 2.028184893354492, 5.675252597596262, 10393.3038757002, 7.831669969520146, 5.608154193928296, 7.539211122255337, 6.852188687574209, 8.45882430373593, 239.29630157994552, 15.325025916466405, 6.505638784466277, 5.71212024372129, 1.1158783024210321, 5.981069658298963, 3.029591233912308, 4.091806725785741, 11.303997675989958, 307.4636209308897, 16.99383457903968, 2.3516938433070482, 12.315084683525253, 11.899742775759098, 20.01269556645122, 7.091618049564568, 2.7864973718561368, 9.656548434277884, 2.9104114799584324, 11.34552029225888, 10.674098537933876, 2.5011537640779973, 22306.993526815557, 6.4313901638100175, 4.898976271061061, 4.964090091539084, 9.044926639441256, 263.50716458710616, 6.065015413812498, 0.8072340975756345, 259.62986916252174, 1.6113161908198788, 110.85125168440814, 4.7993753732619915, 4.032745921889529, 7.90025705460898, 15.691874295771433, 0.7503224194229687, 5.05668103073558, 2.3733239931744685, 2.4516534463333888, 15.34860241061758, 32.809059354282084, 2.0739269795370636, 2.352910178623475, 16.537023906648738, 4.100940903947272, 12.159253464427938, 2.297422573467199, 33.05802749796242, 7.944675475251011, 5.428770958761029, 8.35955257320208, 0.7496418057224785, 8.01616912597487, 14.246656112866566, 4.087405929261355, 4.842985344066082, 2121.7622392718745, 1.595409695906868, 4.0120681836055665, 2.399386699036082, 17.030681120710923, 2.362105397964316, 4.640003268618852, 33.006611187133885, 33.641715671868276, 2244.737846609265, 20.41294986064581, 71.30180219548305, 0.04973709689702005, 15.74583617864418, 14.934166943016582, 17.928916234705348, 2.645219706170513, 22.62117577781835, 0.007452616749053462, 1.4397702471794918, 6.1320904018761375]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "area_tetrahedron"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert area_tetrahedron(3)==15.588457268119894', 'assert area_tetrahedron(20)==692.8203230275509', 'assert area_tetrahedron(10)==173.20508075688772']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
