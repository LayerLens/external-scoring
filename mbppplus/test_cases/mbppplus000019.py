import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [['112112'], ['111'], ['1101112'], ['12233445566778899'], ['12345678987654321'], ['122338445566778899'], ['1252338445566778899'], ['122338412233344556677889945566778899'], ['12523384345566778899'], ['1252899122338445566778899'], ['1223384455667718899'], ['122334475566778899'], ['1258233843778899'], ['12781899'], ['122338412233334455667788994123456789876543215566778899'], ['122833445566778899'], ['1223318445566779'], ['1228334475566778899'], ['1223384122333344554667788994123456789876543215566778899'], ['122334455667788919'], ['12523383445566778899'], ['12528991223638445566778899'], ['12283344512233844556677188399566778899'], ['412233445566778899'], ['12233125823384377889984455667718899'], ['1122338445566778899252338445566778899'], ['12345678987'], ['1252899122363848899'], ['1223311223344556677889925823384377889984455667718899'], ['12523384345122338445566778899566778899'], ['122331122334455667788992582338437788998445566771881234567898799'], ['1223384122333344556677889941234567898765432155668778899'], ['1223381223344556677889941223333445566778899412345678987654321556677889122833445122338445566771883995667788999'], ['122122338412233334455667788994123456789876543215566778899338445566778899'], ['1252899122363848899122334475566778899'], ['122338412233344556677889945566778899122334475566778899'], ['1229833445566778841223344556677889999'], ['1223384122333445566677889945566778899'], ['122331122334455667798799'], ['412523384345122338445566778899566778899'], ['12233445566778'], ['125233843445122338445566778899566778899'], ['122233445566778899'], ['12233841223334245566677889945566778899'], ['12233112212523384455667788993344556677889925823384377889984455667718812233812233445566778899412233334455667788994123456789876543215566778891228334451223384455667718839956677889991234567898799'], ['12528991223318445566778899'], ['12233445566771272338412233334455667788994123456789876543215566778899'], ['41252338412233812233445566778899412233334455667788994123456789876543215566778891228334451223384455667718839956677889995122338445566778899566778899'], ['12233841223333445546677889941231456789876543215566778899'], ['812582338437788989'], ['12233841223333445546677889941231456788987654321556123456789876778899'], ['122335184455667125289912236384889912233447556677889979'], ['1228334455664778899'], ['812582312233445566778891938437788989'], ['122983341228334451223384455667718839956677889989999'], ['122983341212233841223334455667788994556677889928334451223384455667718839956677889989999'], ['125233843455667758899'], ['12233841223334122338122334455667788994122333344556677889941234567898765432155667788912283344512233844556677188399566778899966778899'], ['1221223384112233112233445566778899258233843778899844556677188992233334455667788994123456789876543215566778899338445566778899'], ['122338412233334455667788994123456789876543215566877899'], ['125233843455566778899'], ['81258233843177888989'], ['156748912233447556677889987'], ['1229833412122338412233314455667788994556677889928334451223384455667718839956677889989999'], ['12125289912233844556677889'], ['1223311223344556677889925823384377889984455667718821234567898799'], ['1223366778899'], ['122334455667712723384122333344556677889122122338411223311223344556677889925823384377889984455667718899223333445566778899412345678987654321556677889933844556677889994123456789876543215566778899'], ['122331256823384377889984455667718899'], ['122338412233344556677889945566778899125233843455667758899122334475566778899'], ['1212528991223455667788'], ['122334455667878899'], ['12523384344512781899122338445566778899566778899'], ['12582338431223384112233841223333445566778899412345678987654321556687788992233334455667788994123456789876543215566877899778899'], ['1125289912236384889925233843445127818919122338445566778899566778899'], ['1252338344556671252338434512233844556677889956677889978899'], ['12125289912677889'], ['12233841223334455666778899455667781223366778899899'], ['122334455667788299'], ['12298334455667784841223344556677889999'], ['122982334455667784841223344556677889999'], ['1567489122334125289912233844556677889947556677889987'], ['1223344556673788919'], ['41252338434512212345678987338445566778899566778899'], ['412523384345122123456789873384455667799'], ['4125233843451221234567898733844512528991223318445566778899566778899566778899'], ['125233893445566778899'], ['1125289912236384455667788992781899'], ['4125237384345122123456789873384455667799'], ['122338412233344556677889945566712233841223333445566778899412345678987654321556677889999'], ['125289912236384455667788899'], ['12283344512233844556612233445566787889966778899'], ['122667878899'], ['1122338445566778899252338'], ['124455667788919'], ['122983312233841223334122338122334455667788994122333344556677889941234567898765432155667788912283344512233844556677188399566778899966778899445566778841223344556677889999'], ['12528991223638445566778889'], ['125233812212233841122331122334455667788992582338437788998445566771889922333344556677889941234567898765432155667788993384455667788994344512233812781899445566778899566778899'], ['1223344556679788919'], ['1252338125233843455667788998899'], ['12233445556673788919'], ['122983341212233841223334455667788994556677889928334451223384455667718839912233844556677188997889989999'], ['12528991223638445566778125233893445566778899899'], ['12223312233112212523384455667788993344556677889925823384377889984455667718812233812233445566778899412233334455667788994123456789876543215566778891228334451223384455667718839956677889991234567898799445566778899'], ['41252399566778899']]
results = [6, 6, 12, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 4, 1, 2, 1, 4, 2, 1, 2, 3, 1, 3, 3, 1, 2, 5, 2, 6, 4, 8, 5, 3, 3, 2, 2, 4, 2, 1, 2, 1, 2, 15, 3, 5, 10, 5, 1, 6, 5, 1, 3, 4, 6, 1, 10, 11, 4, 1, 2, 2, 7, 3, 6, 1, 16, 3, 4, 3, 1, 4, 10, 8, 3, 3, 3, 1, 2, 2, 4, 2, 3, 3, 6, 1, 5, 3, 6, 2, 3, 1, 3, 2, 12, 2, 15, 2, 2, 2, 8, 3, 16, 1]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "count_Substrings"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ["assert count_Substrings('112112') == 6", "assert count_Substrings('111') == 6", "assert count_Substrings('1101112') == 12"]:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
