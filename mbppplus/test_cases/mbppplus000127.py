import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3], [['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2], [[], 1], [[], 2], [[], 3], [['a', 'a', 'b', 'b', 'c', 'c', 'd'], 3], [[1, 'abc', True, 2.5, 'def', False, 3, 'ghi'], 4], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 3], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], 3], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10]], 2], [[[1, 2, 3, 4], [], [5, 6, 7], [8, 9]], 3], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13], [14]], 4], [['a', 'b', 'c', 'c', 'd'], 3], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 14], [['a', 'b', 'c', 'd', 'e', 'g', 'h', 'i', 'j'], 14], [[[1, 2, 3, 4], [], [5, 6, 7], [8, 9]], 4], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13], [14]], 5], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10]], 13], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [7, 8, 9]], 2], [['a', 'b', 'c', 'd', 'e', 'g', 'h', 'i', 'j', 'c'], 13], [['dghi', 'a', 'a', 'b', 'b', 'c', 'c', 'd'], 3], [['a', 'dghi', 'c', 'd'], 4], [['a', 'dghi', 'c', 'd', 'd'], 5], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [7, 8, 9], [7, 8, 9]], 1], [['a', 'dghi', 'c', 'd', 'd'], 1], [[None, True, False, True, 'b', 5, [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]], 3], [[None, True, False, True, 'b', 5, [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]], 12], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13], [14], [14]], 11], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 4], [['a', 'b', 'c', 'e', 'f', 'g', 'h', 'i', 'j'], 14], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]], 2], [[-19.284629521995882, -53.96698092094727, -63.59002692746978], 1], [['a', 'b', 'c', 'c', 'd', 'd'], 3], [[[1, 2], [3], [4, 5, 6, 7], [11, 12, 13], [14]], 4], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [14]], 4], [[], 8], [[False, False, False, True], 8], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [7, 8, 9], [7, 8, 9]], 3], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [7, 8, 9], [7, 8, 9]], 2], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 8], [[[1, 2, 3], [6, 7, 8, 9, 10]], 13], [[-19.284629521995882, 1.849713974754394, -53.96698092094727, -80.9136857934034, -63.59002692746978, -63.59002692746978, -84.92256440771797, 34.022656421356885, 2.5], 2], [[[1, 2, 3], [4, 5, 6], [8, 9], [8, 9], [8, 9]], 2], [['a', 'b', 'c', 'def', 'd', 'e', 'g', 'h', 'i', 'j', 'c'], 12], [['a', 'b', 'c', 'c', 'd'], 2], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'hh', 'i', 'j'], 8], [['', 'djM', 'etJiRi', 'i', 'c', 'FjRZCu', 'dghi', 'c', 'f'], 1], [['a', 'b', 'c', 'd', 'e', 'g', 'h', 'i', 'j', 'c'], 3], [['dgabchi', 'a', 'dghi', 'c', 'd'], True], [['a', 'b', 'c', 'e', 'f', 'g', 'h', 'i', 'j'], 13], [[-1.5316450765312055, -53.96698092094727, 97.65103377714536, 1.849713974754394], 1], [['a', 'dghi', 'c', 'c', 'd', 'd'], 1], [[93, 2, 60, 6, 9], 1], [[[1, 3], [1, 3], [4, 5, 6], [7, 8, 9]], 2], [[[1, 2], [3, 3], [4, 5, 6, 7], [8, 9, 10], [14]], 4], [[None, True, False, True, 'b', 5], 12], [[[1, 2, 3, 3], [6, 7, 8, 9, 10]], 13], [['cg', 'a', 'dghi', 'c', 'd', 'd', 'd'], 5], [['etJiRi', 'def', 'h', 'def', 'WwcZ', ''], 1], [[[1, 2], [3], [4, 5, 6, 7], [11, 12, 13], [14]], 10], [[1, 'abc', True, 2.5, 'def', False, 3, 'ghi'], 3], [[[1, 2, 3], [13, 7, 8, 9], [4, 5, 6], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9]], 2], [[[1, 2], [3], [4, 5, 6, 7], [11, 12, 13], [14], [1, 2]], 10], [['a', 'b', 'c', 'e', 'f', 'g', 'h', 'i', 'djMe', 'j'], 13], [['cg', 'a', 'dghi', 'c', 'd', 'd', 'd'], 3], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'hh', 'i', 'j'], 9], [[[1, 2, 3, 4], [], [8, 9, 9], [5, 6, 7], [8, 9, 9]], 4], [['a', 'b', 'c', 'c', 'bb', 'd'], 13], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 2], [[[1, 2, 3], [4, 5, 6], [7, 8, 9, 7]], 2], [['dgabchi', 'a', 'dghi', 'c', 'd', 'dghi'], True], [[None, True, False, True, 'b', 5, [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]], 2], [[False, False, True, False, True, True, False, False, False, True], 1], [['a', 'b', 'c', 'd', 'e', 'h', 'i', 'j'], 14], [[], 14], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13]], 11], [[[1, 2, 3], [13, 7, 8], [13, 7, 8], [4, 5, 6], [13, 7, 8], [13, 7, 8], [13, 7, 8]], 2], [['a', 'b', 'c', 'c', 'g'], 2], [['a', 'b', 'c', 'd', 'e', 'ghi', 'f', 'g', 'h', 'i', 'j'], 8], [[[1, 2, 3], [13, 7, 8, 9], [4, 5, 6], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9]], 3], [[[1, 2, 3], [4, 5, 6], [7, 8, 6], [7, 8, 6], [7, 8, 6], [7, 8, 6]], 1], [[[1, 2, 3, 3], [1, 2, 3, 3], [13, 7, 8, 9], [4, 5, 6], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9]], 2], [[-19.284629521995882, 1.849713974754394, -53.96698092094727, -80.9136857934034, -63.59002692746978, -63.59002692746978, -84.92256440771797, 34.022656421356885, 2.5], 93], [['a', 'b', 'c', 'def', 'd', 'e', 'h', 'i', 'j', 'c', 'a'], 12], [[None, True, False, True, 'b', 5, [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]], 1], [[[1, 2], [3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13]], 12], [[None, True, False, True, 'b', 5, [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5], [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]], 3], [[[1, 2], [3], [8, 9, 10], [11, 12, 13], [11, 12, 13]], 11], [[False, None, True, 'bb', False, True, 'b', 5], 10], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'hh', 'i', 'j'], 10], [[-19.284629521995882, -53.96698092094727, -63.59002692746978, -19.284629521995882], 1], [['dgabchi', 'a', 'dghi', 'c', 'dghi'], True], [['a', 'b', 'c', 'f', 'g', 'h', 'i', 'djMe', 'j'], 13], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'hh', 'i', 'j'], 11], [['dghi', 'c', 'FjRZCud', 'd', 'd'], 5], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'hh', 'i', 'd'], 11], [['cg', 'a', 'dghi', 'c', 'd', 'd', 'd', 'd'], 3], [[28.72990406606783, -53.96698092094727, False, True, -11.801379885851944, -84.92256440771797, -68.8837440787106], 1], [[-19.284629521995882, 1.849713974754394, -53.96698092094727, -80.9136857934034, -63.59002692746978, -84.92256440771797, 34.022656421356885, 2.5], 93], [['a', 'b', 'c', 'c', 'g'], 5], [[[1, 2, 3, 3], [1, 2, 3, 3], [13, 7, 8, 9], [4, 5, 6], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9]], 2], [[-19.284629521995882, 1.849713974754394, -53.96698092094727, -80.9136857934034, -63.59002692746978, -84.92256440771797, 34.022656421356885, 2.5, -19.284629521995882], 93], [['a', 'dghi', 'c', 'd'], 60], [[[1, 2], [3], [4, 5, 6, 7], [11, 12, 13], [14], [14]], 4], [[[7, 8, 9, 8], [1, 2, 3], [4, 5, 6], [7, 8, 9, 8], [7, 8, 9, 8], [7, 8, 9, 8]], 2], [['cg', 'a', 'dghi', 'c', 'd', 'd', 'd'], 4], [[None, True, None, False, True, 'b', 5, [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]], 1], [['a', 'dghi', 'c', 'd', 'd'], 6], [[[1, 2, 3], [4, 5, 6], [8, 9], [8, 9], [8, 9], [8, 9]], 2], [[False, False, True, True, True, False, False, False, True], 3], [['a', 'a', 'c', 'd', 'd', 'd'], 1], [[-19.284629521995882, -53.96698092094727, -1.5316450765312055, -19.284629521995882], 1]]
results = [[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']], [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]], [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']], [[]], [[], []], [[], [], []], [['a', 'b', 'd'], ['a', 'c'], ['b', 'c']], [[1, 'def'], ['abc', False], [True, 3], [2.5, 'ghi']], [['a', 'd', 'g', 'j'], ['b', 'e', 'h'], ['c', 'f', 'i']], [[[1, 2, 3], [7, 8, 9]], [[4, 5, 6]]], [[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], [[[1, 2, 3], [6, 7, 8, 9, 10]], [[4, 5]]], [[[1, 2, 3, 4], [8, 9]], [[]], [[5, 6, 7]]], [[[1, 2], [11, 12, 13]], [[3], [14]], [[4, 5, 6, 7]], [[8, 9, 10]]], [['a', 'c'], ['b', 'd'], ['c']], [['a'], ['b'], ['c'], ['d'], ['e'], ['f'], ['g'], ['h'], ['i'], ['j'], [], [], [], []], [['a'], ['b'], ['c'], ['d'], ['e'], ['g'], ['h'], ['i'], ['j'], [], [], [], [], []], [[[1, 2, 3, 4]], [[]], [[5, 6, 7]], [[8, 9]]], [[[1, 2], [14]], [[3]], [[4, 5, 6, 7]], [[8, 9, 10]], [[11, 12, 13]]], [[[1, 2, 3]], [[4, 5]], [[6, 7, 8, 9, 10]], [], [], [], [], [], [], [], [], [], []], [[[1, 2, 3], [7, 8, 9]], [[4, 5, 6], [7, 8, 9]]], [['a'], ['b'], ['c'], ['d'], ['e'], ['g'], ['h'], ['i'], ['j'], ['c'], [], [], []], [['dghi', 'b', 'c'], ['a', 'b', 'd'], ['a', 'c']], [['a'], ['dghi'], ['c'], ['d']], [['a'], ['dghi'], ['c'], ['d'], ['d']], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [7, 8, 9], [7, 8, 9]]], [['a', 'dghi', 'c', 'd', 'd']], [[None, True, [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]], [True, 'b'], [False, 5]], [[None], [True], [False], [True], ['b'], [5], [[-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]], [], [], [], [], []], [[[1, 2]], [[3]], [[4, 5, 6, 7]], [[8, 9, 10]], [[11, 12, 13]], [[14]], [[14]], [], [], [], []], [['a', 'e', 'i'], ['b', 'f', 'j'], ['c', 'g'], ['d', 'h']], [['a'], ['b'], ['c'], ['e'], ['f'], ['g'], ['h'], ['i'], ['j'], [], [], [], [], []], [[[1, 2, 3], [7, 8, 9]], [[4, 5, 6], [1, 2, 3]]], [[-19.284629521995882, -53.96698092094727, -63.59002692746978]], [['a', 'c'], ['b', 'd'], ['c', 'd']], [[[1, 2], [14]], [[3]], [[4, 5, 6, 7]], [[11, 12, 13]]], [[[1, 2], [14]], [[3]], [[4, 5, 6, 7]], [[8, 9, 10]]], [[], [], [], [], [], [], [], []], [[False], [False], [False], [True], [], [], [], []], [[[1, 2, 3], [7, 8, 9]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9]]], [[[1, 2, 3], [7, 8, 9], [7, 8, 9]], [[4, 5, 6], [7, 8, 9]]], [['a', 'i'], ['b', 'j'], ['c'], ['d'], ['e'], ['f'], ['g'], ['h']], [[[1, 2, 3]], [[6, 7, 8, 9, 10]], [], [], [], [], [], [], [], [], [], [], []], [[-19.284629521995882, -53.96698092094727, -63.59002692746978, -84.92256440771797, 2.5], [1.849713974754394, -80.9136857934034, -63.59002692746978, 34.022656421356885]], [[[1, 2, 3], [8, 9], [8, 9]], [[4, 5, 6], [8, 9]]], [['a'], ['b'], ['c'], ['def'], ['d'], ['e'], ['g'], ['h'], ['i'], ['j'], ['c'], []], [['a', 'c', 'd'], ['b', 'c']], [['a', 'i'], ['b', 'j'], ['c'], ['d'], ['e'], ['f'], ['g'], ['hh']], [['', 'djM', 'etJiRi', 'i', 'c', 'FjRZCu', 'dghi', 'c', 'f']], [['a', 'd', 'h', 'c'], ['b', 'e', 'i'], ['c', 'g', 'j']], [['dgabchi', 'a', 'dghi', 'c', 'd']], [['a'], ['b'], ['c'], ['e'], ['f'], ['g'], ['h'], ['i'], ['j'], [], [], [], []], [[-1.5316450765312055, -53.96698092094727, 97.65103377714536, 1.849713974754394]], [['a', 'dghi', 'c', 'c', 'd', 'd']], [[93, 2, 60, 6, 9]], [[[1, 3], [4, 5, 6]], [[1, 3], [7, 8, 9]]], [[[1, 2], [14]], [[3, 3]], [[4, 5, 6, 7]], [[8, 9, 10]]], [[None], [True], [False], [True], ['b'], [5], [], [], [], [], [], []], [[[1, 2, 3, 3]], [[6, 7, 8, 9, 10]], [], [], [], [], [], [], [], [], [], [], []], [['cg', 'd'], ['a', 'd'], ['dghi'], ['c'], ['d']], [['etJiRi', 'def', 'h', 'def', 'WwcZ', '']], [[[1, 2]], [[3]], [[4, 5, 6, 7]], [[11, 12, 13]], [[14]], [], [], [], [], []], [[1, 2.5, 3], ['abc', 'def', 'ghi'], [True, False]], [[[1, 2, 3], [4, 5, 6], [13, 7, 8, 9]], [[13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9]]], [[[1, 2]], [[3]], [[4, 5, 6, 7]], [[11, 12, 13]], [[14]], [[1, 2]], [], [], [], []], [['a'], ['b'], ['c'], ['e'], ['f'], ['g'], ['h'], ['i'], ['djMe'], ['j'], [], [], []], [['cg', 'c', 'd'], ['a', 'd'], ['dghi', 'd']], [['a', 'j'], ['b'], ['c'], ['d'], ['e'], ['f'], ['g'], ['hh'], ['i']], [[[1, 2, 3, 4], [8, 9, 9]], [[]], [[8, 9, 9]], [[5, 6, 7]]], [['a'], ['b'], ['c'], ['c'], ['bb'], ['d'], [], [], [], [], [], [], []], [['a', 'c', 'e', 'g', 'i'], ['b', 'd', 'f', 'h', 'j']], [[[1, 2, 3], [7, 8, 9, 7]], [[4, 5, 6]]], [['dgabchi', 'a', 'dghi', 'c', 'd', 'dghi']], [[None, False, 'b', [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]], [True, True, 5]], [[False, False, True, False, True, True, False, False, False, True]], [['a'], ['b'], ['c'], ['d'], ['e'], ['h'], ['i'], ['j'], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], []], [[[1, 2]], [[3]], [[4, 5, 6, 7]], [[8, 9, 10]], [[11, 12, 13]], [], [], [], [], [], []], [[[1, 2, 3], [13, 7, 8], [13, 7, 8], [13, 7, 8]], [[13, 7, 8], [4, 5, 6], [13, 7, 8]]], [['a', 'c', 'g'], ['b', 'c']], [['a', 'h'], ['b', 'i'], ['c', 'j'], ['d'], ['e'], ['ghi'], ['f'], ['g']], [[[1, 2, 3], [13, 7, 8, 9]], [[13, 7, 8, 9], [13, 7, 8, 9]], [[4, 5, 6], [13, 7, 8, 9]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 6], [7, 8, 6], [7, 8, 6], [7, 8, 6]]], [[[1, 2, 3, 3], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9]], [[1, 2, 3, 3], [4, 5, 6], [13, 7, 8, 9]]], [[-19.284629521995882], [1.849713974754394], [-53.96698092094727], [-80.9136857934034], [-63.59002692746978], [-63.59002692746978], [-84.92256440771797], [34.022656421356885], [2.5], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [['a'], ['b'], ['c'], ['def'], ['d'], ['e'], ['h'], ['i'], ['j'], ['c'], ['a'], []], [[None, True, False, True, 'b', 5, [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]]], [[[1, 2]], [[3]], [[4, 5, 6, 7]], [[8, 9, 10]], [[11, 12, 13]], [], [], [], [], [], [], []], [[None, True, [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]], [True, 'b', [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]], [False, 5]], [[[1, 2]], [[3]], [[8, 9, 10]], [[11, 12, 13]], [[11, 12, 13]], [], [], [], [], [], []], [[False], [None], [True], ['bb'], [False], [True], ['b'], [5], [], []], [['a'], ['b'], ['c'], ['d'], ['e'], ['f'], ['g'], ['hh'], ['i'], ['j']], [[-19.284629521995882, -53.96698092094727, -63.59002692746978, -19.284629521995882]], [['dgabchi', 'a', 'dghi', 'c', 'dghi']], [['a'], ['b'], ['c'], ['f'], ['g'], ['h'], ['i'], ['djMe'], ['j'], [], [], [], []], [['a'], ['b'], ['c'], ['d'], ['e'], ['f'], ['g'], ['hh'], ['i'], ['j'], []], [['dghi'], ['c'], ['FjRZCud'], ['d'], ['d']], [['a'], ['b'], ['c'], ['d'], ['e'], ['f'], ['g'], ['hh'], ['i'], ['d'], []], [['cg', 'c', 'd'], ['a', 'd', 'd'], ['dghi', 'd']], [[28.72990406606783, -53.96698092094727, False, True, -11.801379885851944, -84.92256440771797, -68.8837440787106]], [[-19.284629521995882], [1.849713974754394], [-53.96698092094727], [-80.9136857934034], [-63.59002692746978], [-84.92256440771797], [34.022656421356885], [2.5], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [['a'], ['b'], ['c'], ['c'], ['g']], [[[1, 2, 3, 3], [13, 7, 8, 9], [13, 7, 8, 9], [13, 7, 8, 9]], [[1, 2, 3, 3], [4, 5, 6], [13, 7, 8, 9], [13, 7, 8, 9]]], [[-19.284629521995882], [1.849713974754394], [-53.96698092094727], [-80.9136857934034], [-63.59002692746978], [-84.92256440771797], [34.022656421356885], [2.5], [-19.284629521995882], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [['a'], ['dghi'], ['c'], ['d'], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[[1, 2], [14]], [[3], [14]], [[4, 5, 6, 7]], [[11, 12, 13]]], [[[7, 8, 9, 8], [4, 5, 6], [7, 8, 9, 8]], [[1, 2, 3], [7, 8, 9, 8], [7, 8, 9, 8]]], [['cg', 'd'], ['a', 'd'], ['dghi', 'd'], ['c']], [[None, True, None, False, True, 'b', 5, [-50, -19.284629521995882, ['h'], 'qgSu', False, True, False, 'g', 2.5]]], [['a'], ['dghi'], ['c'], ['d'], ['d'], []], [[[1, 2, 3], [8, 9], [8, 9]], [[4, 5, 6], [8, 9], [8, 9]]], [[False, True, False], [False, True, False], [True, False, True]], [['a', 'a', 'c', 'd', 'd', 'd']], [[-19.284629521995882, -53.96698092094727, -1.5316450765312055, -19.284629521995882]]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "list_split"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", 'assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]', "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"]:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
