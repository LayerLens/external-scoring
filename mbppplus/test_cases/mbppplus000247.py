import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[10, 20, 30, 40, 20, 50, 60, 40]], [[1, 2, 3, 1]], [[7, 8, 9, 0, 1, 1]], [[1000000, 2000000, 3000000, 2000000, 4000000, 5000000]], [[2000000, 4000000, 2000000, 4000000, 5000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 4000000]], [[4000000, 2000000, 4000000, 5000000, 5000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 5000000]], [[3000000, 4000000, 2000000, 3999999, 2000001, 4000000, 5000000, 3999999]], [[1000000, 2000000, 3000000, 2000000, 3000000, 5000000, 1000000]], [[3999999, 3000000, 4000000, 2000000, 3999999, 5000000, 2000001, 4000000, 5000000, 3999999, 3999999]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 2000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000]], [[1000000, 3000000, 2000000, 3000000, 5000000, 1000001, 1000000, 5000000]], [[1000000, 2000000, 3000000, 2000000, 4000001, 5000000]], [[3000000, 4000000, 2000000, 3999999, 2000001, 4000000, 5000000, 3999999, 3999999]], [[2000000, 4000000, 2000000, 5000000, 4000000, 5000000]], [[1000000, 2000000, 3000000, 1000001, 3000000, 5000000, 1000000]], [[3999999, 3000000, 2000000, 4000000, 2000000, 3999999, 5000000, 3999999, 2000001, 4000000, 5000000, 3999999, 3999999]], [[2000000, 4000000, 2000000, 4000000, 2000001, 5000000, 4000000, 2000000]], [[3999999, 3000000, 2000000, 4000000, 2000000, 3999999, 5000000, 3999999, 2000001, 4000000, 5000000, 3999999, 3999999, 5000000]], [[1000000, 2000000, 3000000, 2000000, 4000001, 5000000, 5000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000000, 5000001]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000000, 1999999, 4000000, 5000001]], [[2000000, 4000000, 2000000, 4000001, 5000000, 4000000, 2000000]], [[1000000, 999999, 2000000, 3000000, 1000001, 3000000, 5000000, 1000000, 5000000]], [[2000000, 4000000, 4000000, 5000000]], [[3999999, 3000000, 2000000, 4000000, 2000000, 3999999, 5000000, 3999999, 2000001, 4000000, 5000000, 3999999, 3999999, 5000000, 3999999]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000, 2000000]], [[2000000, 5000000, 4000000, 2000000, 4000000, 5000000, 4000000, 4000000]], [[2000000, 4000000, 2000000, 5000000, 4000000, 5000000, 4000000]], [[4000000, 999999, 2000000, 4000000, 5000001, 5000000, 5000000, 5000001]], [[2000000, 4000000, 2000000, 5000001, 4000000, 5000000, 5000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 2000000, 2000000]], [[1000000, 2000000, 2000000, 4000000, 5000000]], [[4000000, 4000000, 2000000, 4000000, 5000000]], [[2000000, 4000000, 2000000, 4000000, 4000000]], [[2000000, 4000000, 2000000, 5000001, 4000000, 5000000, 5000000, 4000000, 4000000]], [[2000000, 4000001, 4000000, 2000000, 4000000, 3999999, 4000001, 5000000]], [[1000000, 3000000, 2000000, 3000000, 5000000, 1000000]], [[2000000, 2000000, 2000000, 4000000, 5000000, 5000000, 3999999, 2000000]], [[2000000, 2000000, 2000000, 3999998, 4000000, 5000000, 5000000, 3999999, 2000000]], [[2000000, 4000000, 2000000, 5000001, 4000000, 5000000, 5000000, 4000001, 4000000]], [[1000001, 4000000, 2000000, 4000000, 4000000]], [[1999999, 1000000, 2000000, 3000000, 2000000, 4000001, 5000000]], [[1000000, 2000000, 3000000, 1000001, 5000000, 1000000, 1000000]], [[2000000, 4000000, 2000000, 4000001, 5000000, 4000000, 2000000, 2000000, 4000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000000, 1999999, 4000000, 5000001, 999999, 4000000]], [[1000000, 2000000, 3000000, 2000000, 4000000, 5000000, 4000000]], [[1000000, 2000000, 3000000, 1000001, 5000000, 1000000, 1000000, 1000000]], [[2000000, 3999999, 5000000]], [[2000000, 3999999, 1000001]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000, 2000000, 5000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 1999999, 4000001, 5000001]], [[1000000, 2000000, 3000000, 2000000, 4000001, 5000000, 1000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 2000000, 5000000]], [[1000000, 2000000, 3000000, 1000001, 5000000, 1000000, 1000000, 1000001]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000001, 4000000, 2000000, 5000000]], [[3000000, 4000000, 2000000, 3999999, 2000001, 4000000, 5000000, 4999999, 5000001, 3999999, 5000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000000, 1999999, 4000000, 5000001, 999999, 4000000, 5000000]], [[1000000, 3000000, 2000000, 3000000, 2000000, 4000000, 5000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 5000000, 2000000]], [[1000000, 5000000, 3000000, 1000001, 5000000, 1000000, 1000000, 1000001]], [[2000000, 4000000, 2000001, 5000000, 2000000, 4000000, 5000000, 4000000, 2000000, 4000001]], [[3999999, 3000000, 4000000, 2000000, 4999999, 3999999, 5000000, 2000001, 4000000, 5000000, 3999999, 3999999]], [[2000001, 2000000, 2000000, 3999998, 4000000, 5000000, 5000001, 3999999, 2000000]], [[2000000, 4000000, 2000000, 4000000, 4000000, 4000000]], [[1999999, 2000000, 3999999, 5000000]], [[4000000, 2000000, 999999, 2000000, 4000000, 5000001, 5000000, 5000000, 5000001]], [[3000000, 4000000, 2000000, 3999999, 2000001, 4000000, 5000000, 4999999, 3999999, 5000000]], [[1000000, 2000000, 3000000, 3000000, 2000000, 4000001, 5000000]], [[2000000, 2000000, 4000000, 2000000, 4000000, 5000000, 4000000, 2000000]], [[2000000, 2000000, 5000001, 4000000, 5000000, 5000000, 4000001, 4000000]], [[1000000, 3000000, 1000001, 5000000, 1000000, 1000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 3000000, 5000000, 4000000, 2000000]], [[4000000, 999999, 5000001, 4000000, 5000001, 5000000, 5000000, 5000001]], [[1000000, 2000000, 3000000, 1000001, 1000000]], [[2000000, 4000001, 2000000, 5000000, 4000000, 5000000, 4000000]], [[2000000, 4000000, 999999, 4000000, 2000001, 5000000, 4000000, 2000000, 2000001]], [[2000000, 4000001, 4000000, 2000000, 4000000, 3999999, 4000001, 5000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000, 2000000, 2000000]], [[4000000, 2000000, 4000000, 5000001, 5000000]], [[2000000, 4000000, 5000000, 2000000, 4000000, 5000000, 5000000, 4000000, 2000000, 5000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000, 2000000, 2000000, 4000000, 5000000]], [[3999999, 3000000, 2000000, 4000000, 2000000, 3999999, 5000000, 3999999, 2000001, 4000000, 5000000, 2000001, 3999999, 3999999, 5000000, 3999999]], [[1999999, 1000000, 2000000, 3000000, 2000000, 4000001, 5000000, 5000000]], [[1000000, 2000000, 3000000, 2000000, 4000001, 5000001, 1000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 2000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 1999999, 4000000, 5000001, 999999, 4000000, 5000000]], [[3000000, 4000000, 2000000, 3999999, 4000000, 5000000, 4999999, 3999999, 5000000]], [[2000000, 4000000, 2000000, 5000001, 4000000, 5000000, 4999999, 4000000, 4000000, 2000000]], [[3999999, 2000000, 1999999, 2000000, 5000001, 4000000, 5000000, 5000000, 4000001, 4000000, 4000000, 4000000]], [[2000001, 3999999, 5000000]], [[1000000, 2000000, 4000000, 5000000]], [[2000000, 2000000, 3999998, 4000000, 5000000, 5000000, 3999999, 2000000]], [[2000000, 2000000, 5000000, 5000000]], [[2000000, 4000000, 2000000, 4000001, 5000000, 4000000, 2000000, 2000000, 4000000, 4000000]], [[2000000, 4000000, 2000000, 4000001, 5000000, 4000000, 2000000, 2000000, 1999999, 4000000, 4000000]], [[2000000, 4000001, 2000000, 4000000, 4000000, 3999999, 4000000, 4000000]], [[2000000, 4000000, 2000000, 4000000, 5000000, 5000000, 4000000, 999999, 2000000, 5000000]], [[2000000, 4000000, 2000000, 4000000, 4000000, 4000000, 3999999, 4000000]], [[4000000, 2000000, 4000000, 5000001, 5000000, 5000001]]]
results = [720000000, 6, 0, 120000000000000000000000000000000, 40000000000000000000, 40000000000000000000, 40000000000000000000, 40000000000000000000, 40000000000000000000, 960000239999880000000000000000000000000, 30000000000000000000000000, 960000239999880000000000000000000000000, 40000000000000000000, 40000000000000000000, 30000030000000000000000000000000, 120000030000000000000000000000000, 960000239999880000000000000000000000000, 40000000000000000000, 30000030000000000000000000000000, 960000239999880000000000000000000000000, 80000040000000000000000000, 960000239999880000000000000000000000000, 120000030000000000000000000000000, 200000040000000000000000000, 200000040000000000000000000, 399999879999960000000000000000000, 160000040000000000000000000, 29999999999970000000000000000000000000, 40000000000000000000, 960000239999880000000000000000000000000, 40000000000000000000, 40000000000000000000, 40000000000000000000, 199999839999960000000000000000000, 200000040000000000000000000, 40000000000000000000, 40000000000000000000000000, 40000000000000000000, 8000000000000, 200000040000000000000000000, 639999999999960000000000000000000, 30000000000000000000000000, 159999960000000000000000000, 639999520000080000000000000000000, 800000360000040000000000000000000, 8000008000000000000, 239999939999970000000000000000000000000, 30000030000000000000000000000000, 160000040000000000000000000, 399999480000080000040000000000000000000, 120000000000000000000000000000000, 30000030000000000000000000000000, 39999990000000000000, 8000005999998000000, 40000000000000000000, 1599999919999719999960000000000000000000, 120000030000000000000000000000000, 40000000000000000000, 30000030000000000000000000000000, 200000040000000000000000000, 24000005999996039999760000120000000000000000000000000, 399999480000080000040000000000000000000, 120000000000000000000000000000000, 40000000000000000000, 15000015000000000000000000, 320000240000040000000000000000000, 4800000239999160000120000000000000000000000000, 6399999679998080000080000080000000000000000000, 8000000000000, 79999940000010000000000000, 199999839999960000000000000000000, 4800000239999160000120000000000000000000000000, 120000030000000000000000000000000, 40000000000000000000, 800000360000040000000000000000000, 15000015000000000000000000, 120000000000000000000000000, 99999919999980000000000000, 6000006000000000000000000, 160000040000000000000000000, 79999959999960000000000000000000, 639999999999960000000000000000000, 40000000000000000000, 200000040000000000000000000, 40000000000000000000, 40000000000000000000, 960000239999880000000000000000000000000, 239999939999970000000000000000000000000, 120000054000006000000000000000000, 40000000000000000000, 399999480000080000040000000000000000000, 2399998920000120000000000000000000000000, 999999999999960000000000000000000, 6399998079998960000120000040000000000000000000, 40000009999995000000, 40000000000000000000000000, 639999520000080000000000000000000, 10000000000000, 160000040000000000000000000, 319999919999960000000000000000000, 127999999999992000000000000, 39999960000000000000000000, 31999992000000000000, 200000040000000000000000000]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "unique_product"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000', 'assert unique_product([1, 2, 3, 1,]) == 6', 'assert unique_product([7, 8, 9, 0, 1, 1]) == 0']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
