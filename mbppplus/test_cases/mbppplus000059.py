import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[5, 6, 7], (9, 10)], [[6, 7, 8], (10, 11)], [[7, 8, 9], (11, 12)], [[], (1, 2, 3)], [[1, [2, 3], {'a': 4}], (5, [6, 7], {'b': 8})], [[], ()], [[1, 2, 3], ()], [[0.5, [1, 2], {'x': 3}], (4.5, [5, 6], {'y': 7})], [[[1, 2, [3, 4, {'a': {'b': [5, 6]}}]], [7, 8, {'c': {'d': [9, [10, 11]]}}]], ([[12, 13]],)], [[[], [1, 2], {'a': [3, 4]}], (5, [6, 7], {'b': [8, [9]]})], [[{'x': [1, 2]}, {'y': [{'z': [3]}, 4]}], ([5, 6, [7]], [{'a': 8}])], [[[[1], 2], {'3': [4]}, [5, 6, 7]], (8, [9, [10]], {'a': 11})], [[[], [], []], ([], [], [])], [[[], [[]], [[], []]], ([[], []], [[]], [[], []])], [['hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}], (7, [8, [9]], {'a': 10, 'b': 11})], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], ([[9, 10], [11, 12]], [[13, 14], [15, 16]])], [[[1, 2], [3, 4]], ([5, 6], {'a': [7, [8, 9]]})], [[1, 2, [3, 4, {'a': {'b': [5, 6]}}]], ([7, 8, {'c': {'d': [9, [10, 11]]}}],)], [[[[1], 4, [1]], {'3': [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7]], (8, [9, [10]])], [[[1, 2], [4]], ([5, 6], {'a': [7, [8, 9]]})], [[[], [[]], [[], []]], ([[], [], []], [[]], [[], []])], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[5, 6], [7, 8]]], ([[9, 10], [11, 12]], [[13, 14], [15, 16]])], [[1, 2], ([7, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}])], [[True, True, True, True, True, True, False], (4.5, 44.32264550231051, 0.5, 0.5, -1.6326583229058826, 4.5, 55.52796338743434)], [[[], [1, 2], {'a': [3, 4]}], ([6, 7], {'b': [8, [9]]})], [[2], ([7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}])], [[[3, 4]], ([5, 6], {'a': [7, [8, 9]]})], [[[[1], 2], {'3': [4]}, [5, 6, 7]], (9, [9, [10]], {'a': 11})], [[[1, 2], [4]], ([5, 6], {'a': [7, [8, 9]]}, [5, 6])], [[[[1], 2], {'3': [4]}], (9, [9, [10]], {'a': 11})], [[[1, 2], [3, 4, 4], [3, 4, 4]], ([5, 6], {'a': [7, [8, 9]]})], [[15], ([7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}])], [['hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}], (7, 7, 7, [8, [9]], {'a': 10, 'b': 11})], [[[], [[]], [[], []]], ([[], [], []], [[]], [[], []], [[]])], [[[3, 4]], ([5, 6], {'a': [7, [8, 9]]}, [5, 6])], [[], ({'a': [7, 14, [8, 9]], 'hello': [7, 14, [8, 9]]}, {'a': [7, 14, [8, 9]], 'hello': [7, 14, [8, 9]]})], [[{'3': [4]}, [5, 6, 7]], (9, [9, [10]], {'a': 11})], [[[], [1, 2], {'a': [3, 4]}], (6, [6, 7], {'b': [8, [9]]})], [[], (1, 2)], [[], ([4, 5, 6, 6], [4, 5, 6, 6], {'a': [7, [8, 9]]})], [[[1, 2], [3, 4], [3, 4]], ([5, 6], {'a': [7, [8, 9]]})], [[[], [], []], ([], [True, True, False, False, True])], [[True, True, True, True, True, True, False], (4.5, 44.32264550231051, 0.5, 0.4020733226756738, -1.6326583229058826, 4.5, 55.52796338743434, 0.5)], [[1, 2, [3, 4, {'a': {'b': [5, 6]}}], 1], ([7, 8, {'c': {'d': [9, [10, 11]]}}],)], [[1, 2, 3], (False, True)], [[1, 2, 3], (False, False, True, True)], [[[1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]], ([5, 6], {'a': [7, [8, 9]]})], [[], (False, True, False, False)], [[-96.96084131931524, -94.69555233395306, -95.59861164068568, -1.6326583229058826, 92.24778790461318], (1, 2)], [[69, -68, -26, 99, 9, -10, -55, 65, 13, 64], (1, 2)], [[True, False, False], (False, True, False, False)], [[1, 2], ([7, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 7, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}])], [[[], [], [], []], ([], [], [])], [[['c', 'Tbzkr'], [], [], []], ([], [], [])], [[0, 2, 3], ()], [[[1, 2, [3, 4, {'a': {'b': [5, 6]}}]], [7, 8, {'c': {'d': [9, [10, 11]]}}]], ([[12, 1, 13], [12, 1, 13]],)], [[15], ([7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}])], [['hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}], (7, [8, [9]], {'a': 10, 'b': 11}, 7)], [['hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}], (7, 7, 7, [8, [9]], {'a': 10, 'b': 11}, {'a': 10, 'b': 11})], [[[], [[], []], [[], []], [[], []]], ([[], []], [[]], [[], []])], [[[], [[]], [[], []]], ([], [[], [], []], [], [[], []])], [[[1, 2, [3, 4, {'a': {'b': [5, 6]}}]]], ([[12, 13]],)], [[[7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}]], ([[12, 13], [12, 13]],)], [[[7, 8, {'c': {'d': [9, [10, 11]]}}]], ([[12, 1, 13], [12, 1, 13]],)], [[], ([7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}])], [[{'3': [4]}, [5, 6, 7], [5, 6, 7]], (8, [9, [10]], {'a': 11})], [[[[1], 4, [1]], {'3': [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7], [[1], 4, [1]]], (8, [9, [10], 9], [9, [10], 9])], [[[], [[], []], [[], []], []], ([[], []], [], [[], []])], [[[[1], 4, [1]], {'3': [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7], {'3': [4]}], (8, [9, [10]])], [[[1, 2, [3, 4, {'a': {'b': [5, 6]}}]], [7, 8, {}, {}]], ([[12, 13]], [[12, 13]])], [[[], [], [[], []]], ([[], [], []], [[]], [[], []])], [[[7, 9, {}, {}]], ([[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]])], [['hello', 'z', 'ZJgH'], ({'a': [7, 14, [8, 9]]}, {'a': [7, 14, [8, 9]]})], [[1, 2, 7, 3], (False, False, True, True, True)], [[[], [], [], []], ([], [], [36.685637329178746], [36.685637329178746])], [[1, 2, 2], ([9, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}])], [[[], 12, 'pOEmwo', 0.5, ['z', 'T'], 'Iuy', 7], (1, 2, 2)], [[{'x': [1, 2]}, {'y': [{'z': [3]}, 4]}, {'x': [1, 2]}], ([5, 6, [7]], [{'a': 8}])], [[{'3': []}, [5, 6, 7], [5, 6, 7]], (8, {'a': 11})], [[], (False, True, False, False, False)], [[0.5, [1, 2], {'x': 3, 'ZJgHx': 4}], (4.5, [5, 6], {'y': 7})], [[[2, 3], {'a': 4}], (5, [6, 7], {'b': 8})], [[[], [1, 2], {'a': [3, 4]}], (6, [6, 7], {})], [[15], ([7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}])], [[], (-94.69555233395306, -96.96084131931524, -1.6326583229058826, 79.36778956924633, -42.0626870759427, 4.5, 94.66425529755756, -96.96084131931524)], [[[1, 2, [3, 4, {'a': {'b': [5, 6]}}]], [7, 8, {'c': {'d': [9, [10, 11]]}}]], ([[12, 1, 13], [12, 1, 13], [12, 1, 13]], [[12, 1, 13], [12, 1, 13], [12, 1, 13]])], [[1, -55], ([7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}])], [[[], [[], []], [[], []], [[], []]], ([[], []], [[]], [[]], [[]])], [[1, 1, 2, 3], (False, True)], [['hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}], (7, 7, 7, {'a': 10, 'b': 11}, {'a': 10, 'b': 11})], [[[7, 9, {}, {}]], ([[12, 13], [12, 13]], [[12, 13], [12, 13]])], [[-55], ([7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}])], [[[-5, 13, 99], [], []], ([], [True, True, False, False, True])], [[[1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]], ([5, 6],)], [[[1, 2], [3, 4, 4], [3, 4, 4]], ({'a': [7, [8, 9]]},)], [[[7, 9, {}, {}]], ([[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]])], [[[[1], 4, [1]], {'3': [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7]], ([9, [10]],)], [[], ([7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}])], [[True, False, False], (True, True, False, False)], [[[1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]], ([5, 6], {})], [[[7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}]], ([[12, 13], [12, 13]], [[12, 13], [12, 13]])], [[1, 2, [3, 4, {'a': {'b': [5, 6]}}]], ([7, 8, {'c': {'d': [9], 'ZJgHx': [9]}, 'ZJgH': {'d': [9], 'ZJgHx': [9]}}, {'c': {'d': [9], 'ZJgHx': [9]}, 'ZJgH': {'d': [9], 'ZJgHx': [9]}}], [7, 8, {'c': {'d': [9], 'ZJgHx': [9]}, 'ZJgH': {'d': [9], 'ZJgHx': [9]}}])], [[False, False, False, False, True, True, True], (-94.69555233395306, -96.96084131931524, -1.6326583229058826, 79.36778956924633, -42.0626870759427, 4.5, 94.66425529755756, -96.96084131931524)], [[[1, 2], [], [1, 2]], ([5, 6], {'a': [7, [8, 9]]}, [5, 6])], [[[], [], [], [], []], ([], [True, True, False, False, True])], [[], ({'a': [7, [8, 9]], 'hello': [7, [8, 9]]}, {'a': [7, [8, 9]], 'hello': [7, [8, 9]]})], [[[], [], [], []], ([], [True, True, False, False, True])], [[1, 2, [3, 4, {'a': {'b': [5, 6]}}, 3], 1], ([7, 8, {'c': {'d': [9, [10, 11]]}}],)], [[[7, 9, {}, {}]], ([[12], [12], [12]], [[12], [12], [12]], [[12], [12], [12]], [[12], [12], [12]])], [[[3, 4]], ([5], {'a': [7, [8, 9]]}, [5], [5], [5])], [[[], [1, 2], {'a': [3, 4]}, [1, 2]], (5, [6, 7], {'b': [8, [9]]})], [['hello', 'z', 'ZJgH', 'z', 'hello'], ({'a': [7, 14, [8, 9]]}, {'a': [7, 14, [8, 9]]})], [[[], [1, 2], {'a': [3, 4]}], (6, [6, 7], {'b': [8, [9]]}, 6)], [['hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}], (7, 7, 7, {'a': 9, 'b': 11}, {'a': 9, 'b': 11})], [[[1, 2], [4]], ({'a': [7, [8, 9]]}, [5, 6])], [[[3, 3, 4]], ([5], {'a': [7, [8, 9]]}, [5], [5], [5])], [[], ([7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}])], [[True, True, True, True, True, False, False], (4.5, 44.32264550231051, 0.5, 0.4020733226756738, -1.6326583229058826, 4.5, 55.52796338743434, 0.5)]]
results = [(9, 10, 5, 6, 7), (10, 11, 6, 7, 8), (11, 12, 7, 8, 9), (1, 2, 3), (5, [6, 7], {'b': 8}, 1, [2, 3], {'a': 4}), (), (1, 2, 3), (4.5, [5, 6], {'y': 7}, 0.5, [1, 2], {'x': 3}), ([[12, 13]], [1, 2, [3, 4, {'a': {'b': [5, 6]}}]], [7, 8, {'c': {'d': [9, [10, 11]]}}]), (5, [6, 7], {'b': [8, [9]]}, [], [1, 2], {'a': [3, 4]}), ([5, 6, [7]], [{'a': 8}], {'x': [1, 2]}, {'y': [{'z': [3]}, 4]}), (8, [9, [10]], {'a': 11}, [[1], 2], {'3': [4]}, [5, 6, 7]), ([], [], [], [], [], []), ([[], []], [[]], [[], []], [], [[]], [[], []]), (7, [8, [9]], {'a': 10, 'b': 11}, 'hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}), ([[9, 10], [11, 12]], [[13, 14], [15, 16]], [[1, 2], [3, 4]], [[5, 6], [7, 8]]), ([5, 6], {'a': [7, [8, 9]]}, [1, 2], [3, 4]), ([7, 8, {'c': {'d': [9, [10, 11]]}}], 1, 2, [3, 4, {'a': {'b': [5, 6]}}]), (8, [9, [10]], [[1], 4, [1]], {'3': [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7]), ([5, 6], {'a': [7, [8, 9]]}, [1, 2], [4]), ([[], [], []], [[]], [[], []], [], [[]], [[], []]), ([[9, 10], [11, 12]], [[13, 14], [15, 16]], [[1, 2], [3, 4]], [[5, 6], [7, 8]], [[5, 6], [7, 8]]), ([7, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], 1, 2), (4.5, 44.32264550231051, 0.5, 0.5, -1.6326583229058826, 4.5, 55.52796338743434, True, True, True, True, True, True, False), ([6, 7], {'b': [8, [9]]}, [], [1, 2], {'a': [3, 4]}), ([7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], 2), ([5, 6], {'a': [7, [8, 9]]}, [3, 4]), (9, [9, [10]], {'a': 11}, [[1], 2], {'3': [4]}, [5, 6, 7]), ([5, 6], {'a': [7, [8, 9]]}, [5, 6], [1, 2], [4]), (9, [9, [10]], {'a': 11}, [[1], 2], {'3': [4]}), ([5, 6], {'a': [7, [8, 9]]}, [1, 2], [3, 4, 4], [3, 4, 4]), ([7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], 15), (7, 7, 7, [8, [9]], {'a': 10, 'b': 11}, 'hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}), ([[], [], []], [[]], [[], []], [[]], [], [[]], [[], []]), ([5, 6], {'a': [7, [8, 9]]}, [5, 6], [3, 4]), ({'a': [7, 14, [8, 9]], 'hello': [7, 14, [8, 9]]}, {'a': [7, 14, [8, 9]], 'hello': [7, 14, [8, 9]]}), (9, [9, [10]], {'a': 11}, {'3': [4]}, [5, 6, 7]), (6, [6, 7], {'b': [8, [9]]}, [], [1, 2], {'a': [3, 4]}), (1, 2), ([4, 5, 6, 6], [4, 5, 6, 6], {'a': [7, [8, 9]]}), ([5, 6], {'a': [7, [8, 9]]}, [1, 2], [3, 4], [3, 4]), ([], [True, True, False, False, True], [], [], []), (4.5, 44.32264550231051, 0.5, 0.4020733226756738, -1.6326583229058826, 4.5, 55.52796338743434, 0.5, True, True, True, True, True, True, False), ([7, 8, {'c': {'d': [9, [10, 11]]}}], 1, 2, [3, 4, {'a': {'b': [5, 6]}}], 1), (False, True, 1, 2, 3), (False, False, True, True, 1, 2, 3), ([5, 6], {'a': [7, [8, 9]]}, [1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]), (False, True, False, False), (1, 2, -96.96084131931524, -94.69555233395306, -95.59861164068568, -1.6326583229058826, 92.24778790461318), (1, 2, 69, -68, -26, 99, 9, -10, -55, 65, 13, 64), (False, True, False, False, True, False, False), ([7, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 7, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], 1, 2), ([], [], [], [], [], [], []), ([], [], [], ['c', 'Tbzkr'], [], [], []), (0, 2, 3), ([[12, 1, 13], [12, 1, 13]], [1, 2, [3, 4, {'a': {'b': [5, 6]}}]], [7, 8, {'c': {'d': [9, [10, 11]]}}]), ([7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], 15), (7, [8, [9]], {'a': 10, 'b': 11}, 7, 'hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}), (7, 7, 7, [8, [9]], {'a': 10, 'b': 11}, {'a': 10, 'b': 11}, 'hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}), ([[], []], [[]], [[], []], [], [[], []], [[], []], [[], []]), ([], [[], [], []], [], [[], []], [], [[]], [[], []]), ([[12, 13]], [1, 2, [3, 4, {'a': {'b': [5, 6]}}]]), ([[12, 13], [12, 13]], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}]), ([[12, 1, 13], [12, 1, 13]], [7, 8, {'c': {'d': [9, [10, 11]]}}]), ([7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}]), (8, [9, [10]], {'a': 11}, {'3': [4]}, [5, 6, 7], [5, 6, 7]), (8, [9, [10], 9], [9, [10], 9], [[1], 4, [1]], {'3': [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7], [[1], 4, [1]]), ([[], []], [], [[], []], [], [[], []], [[], []], []), (8, [9, [10]], [[1], 4, [1]], {'3': [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7], {'3': [4]}), ([[12, 13]], [[12, 13]], [1, 2, [3, 4, {'a': {'b': [5, 6]}}]], [7, 8, {}, {}]), ([[], [], []], [[]], [[], []], [], [], [[], []]), ([[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]], [7, 9, {}, {}]), ({'a': [7, 14, [8, 9]]}, {'a': [7, 14, [8, 9]]}, 'hello', 'z', 'ZJgH'), (False, False, True, True, True, 1, 2, 7, 3), ([], [], [36.685637329178746], [36.685637329178746], [], [], [], []), ([9, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], 1, 2, 2), (1, 2, 2, [], 12, 'pOEmwo', 0.5, ['z', 'T'], 'Iuy', 7), ([5, 6, [7]], [{'a': 8}], {'x': [1, 2]}, {'y': [{'z': [3]}, 4]}, {'x': [1, 2]}), (8, {'a': 11}, {'3': []}, [5, 6, 7], [5, 6, 7]), (False, True, False, False, False), (4.5, [5, 6], {'y': 7}, 0.5, [1, 2], {'x': 3, 'ZJgHx': 4}), (5, [6, 7], {'b': 8}, [2, 3], {'a': 4}), (6, [6, 7], {}, [], [1, 2], {'a': [3, 4]}), ([7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}], 15), (-94.69555233395306, -96.96084131931524, -1.6326583229058826, 79.36778956924633, -42.0626870759427, 4.5, 94.66425529755756, -96.96084131931524), ([[12, 1, 13], [12, 1, 13], [12, 1, 13]], [[12, 1, 13], [12, 1, 13], [12, 1, 13]], [1, 2, [3, 4, {'a': {'b': [5, 6]}}]], [7, 8, {'c': {'d': [9, [10, 11]]}}]), ([7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], 1, -55), ([[], []], [[]], [[]], [[]], [], [[], []], [[], []], [[], []]), (False, True, 1, 1, 2, 3), (7, 7, 7, {'a': 10, 'b': 11}, {'a': 10, 'b': 11}, 'hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}), ([[12, 13], [12, 13]], [[12, 13], [12, 13]], [7, 9, {}, {}]), ([7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], -55), ([], [True, True, False, False, True], [-5, 13, 99], [], []), ([5, 6], [1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]), ({'a': [7, [8, 9]]}, [1, 2], [3, 4, 4], [3, 4, 4]), ([[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]], [7, 9, {}, {}]), ([9, [10]], [[1], 4, [1]], {'3': [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7]), ([7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}]), (True, True, False, False, True, False, False), ([5, 6], {}, [1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]), ([[12, 13], [12, 13]], [[12, 13], [12, 13]], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}]), ([7, 8, {'c': {'d': [9], 'ZJgHx': [9]}, 'ZJgH': {'d': [9], 'ZJgHx': [9]}}, {'c': {'d': [9], 'ZJgHx': [9]}, 'ZJgH': {'d': [9], 'ZJgHx': [9]}}], [7, 8, {'c': {'d': [9], 'ZJgHx': [9]}, 'ZJgH': {'d': [9], 'ZJgHx': [9]}}], 1, 2, [3, 4, {'a': {'b': [5, 6]}}]), (-94.69555233395306, -96.96084131931524, -1.6326583229058826, 79.36778956924633, -42.0626870759427, 4.5, 94.66425529755756, -96.96084131931524, False, False, False, False, True, True, True), ([5, 6], {'a': [7, [8, 9]]}, [5, 6], [1, 2], [], [1, 2]), ([], [True, True, False, False, True], [], [], [], [], []), ({'a': [7, [8, 9]], 'hello': [7, [8, 9]]}, {'a': [7, [8, 9]], 'hello': [7, [8, 9]]}), ([], [True, True, False, False, True], [], [], [], []), ([7, 8, {'c': {'d': [9, [10, 11]]}}], 1, 2, [3, 4, {'a': {'b': [5, 6]}}, 3], 1), ([[12], [12], [12]], [[12], [12], [12]], [[12], [12], [12]], [[12], [12], [12]], [7, 9, {}, {}]), ([5], {'a': [7, [8, 9]]}, [5], [5], [5], [3, 4]), (5, [6, 7], {'b': [8, [9]]}, [], [1, 2], {'a': [3, 4]}, [1, 2]), ({'a': [7, 14, [8, 9]]}, {'a': [7, 14, [8, 9]]}, 'hello', 'z', 'ZJgH', 'z', 'hello'), (6, [6, 7], {'b': [8, [9]]}, 6, [], [1, 2], {'a': [3, 4]}), (7, 7, 7, {'a': 9, 'b': 11}, {'a': 9, 'b': 11}, 'hello', [1, [2, 3]], {'x': [4, 5, {'y': {'z': 6}}]}), ({'a': [7, [8, 9]]}, [5, 6], [1, 2], [4]), ([5], {'a': [7, [8, 9]]}, [5], [5], [5], [3, 3, 4]), ([7, 8, {'c': {'d': [9, [10, 11]]}}], [8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}], [7, 8, {'c': {'d': [9, [10, 11]]}}]), (4.5, 44.32264550231051, 0.5, 0.4020733226756738, -1.6326583229058826, 4.5, 55.52796338743434, 0.5, True, True, True, True, True, False, False)]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "add_lists"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)', 'assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)', 'assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
