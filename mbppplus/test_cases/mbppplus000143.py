import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4]], [[90, 120], [50, 70]], [[1, 2, 3, 4], [5, 6, 7, 8]], [[10, 20, 30, 40, 50], [5, 10, 15, 20, 25]], [[-1, -2, -3], [1, 2, 3]], [[2.5, 3.5, 4.5], [1.5, 2.5, 3.5]], [[50, 2, 3], [50, 2, 3]], [[10, 20, 30, 40, -1, 1, 50], [10, 20, 30, 40, -1, 1, 50]], [[10, 20, 30, 40, -1, 1], [10, 20, 30, 40, -1, 1]], [[2.5, 3.5, 4.5], [2.5, 3.5, 4.5]], [[50, 1, 3], [50, 1, 3]], [[2.5, 4.228187684597152, 4.5], [2.5, 4.228187684597152, 4.5]], [[2.5, 3.5], [2.5, 3.5]], [[30, 10, 20, 50, 30, 40, 50], [30, 10, 20, 50, 30, 40, 50]], [[50, 30, 2, 3], [50, 30, 2, 3]], [[1, 2, 3, 4], [5, 6, 7, 25]], [[2.5, 2.7219722320551716, 2.5], [2.5, 2.7219722320551716, 2.5]], [[30, 10, 20, 30, 40, 50], [30, 10, 20, 30, 40, 50]], [[2.5, 3.5, 4.5, 2.5], [2.5, 3.5, 4.5, 2.5]], [[10, 20, 30, 40, 31, -1, 1], [10, 20, 30, 40, 31, -1, 1]], [[10, 20, 30, 40, 31, 0, 1, 30], [10, 20, 30, 40, 31, 0, 1, 30]], [[50, 1, 3, 1, 0, 1], [50, 1, 3, 1, 0, 1]], [[5, 6, 7, 25], [5, 6, 7, 25]], [[1.2555626492437502, 2.7219722320551716, 2.5], [1.2555626492437502, 2.7219722320551716, 2.5]], [[10, 20, 30, 40, 0, 1, 30, 30], [10, 20, 30, 40, 0, 1, 30, 30]], [[30, 10, 20, 50, 30, 40], [30, 10, 20, 50, 30, 40]], [[2.5, 3.5, 2.5], [2.5, 3.5, 2.5]], [[1.5, 2.5, 4.228187684597152], [1.5, 2.5, 4.228187684597152]], [[2.5, 3.277085080344455, 2.5], [2.5, 3.277085080344455, 2.5]], [[50, 3], [50, 3]], [[30, 10, 20, 50, 30, 39, 50], [30, 10, 20, 50, 30, 39, 50]], [[10, 20, 30, 40, 31, -1, 3, 1, 10], [10, 20, 30, 40, 31, -1, 3, 1, 10]], [[1.5, 3.5, 2.5, 4.228187684597152], [1.5, 3.5, 2.5, 4.228187684597152]], [[10, 7, 30, 40, 31, -1, 3, 1, 10], [10, 7, 30, 40, 31, -1, 3, 1, 10]], [[10, 20, 30, 40, 31, 0, 1, 31, 30, 31], [10, 20, 30, 40, 31, 0, 1, 31, 30, 31]], [[10, 20, 30, 40, 31, -1, 50, 3, 1, 10], [10, 20, 30, 40, 31, -1, 50, 3, 1, 10]], [[4.228187684597152, 4.5], [4.228187684597152, 4.5]], [[30, 10, 30, 29, 20, 30], [30, 10, 30, 29, 20, 30]], [[50, 2, 50, 2], [50, 2, 50, 2]], [[4.5, 2.5, 4.228187684597152, 3.277085080344455, 3.277085080344455], [4.5, 2.5, 4.228187684597152, 3.277085080344455, 3.277085080344455]], [[30, 10, 20, 30, 6, 40, 50], [30, 10, 20, 30, 6, 40, 50]], [[10, 30, 40, 31, -1, 1], [10, 30, 40, 31, -1, 1]], [[10, 20, 30, 1, 0, 1, 30, 30], [10, 20, 30, 1, 0, 1, 30, 30]], [[2.5, 4.228187684597152], [2.5, 4.228187684597152]], [[10, 7, 30, 40, 31, 8, -1, 3, 1, 10], [10, 7, 30, 40, 31, 8, -1, 3, 1, 10]], [[15, 30, 10, 0, 30, 40, 4], [15, 30, 10, 0, 30, 40, 4]], [[3.5], [3.5]], [[2.5, 3.5, 2.5, 3.5], [2.5, 3.5, 2.5, 3.5]], [[10, 20, 30, 40, 31, 0, 1, 31, 30], [10, 20, 30, 40, 31, 0, 1, 31, 30]], [[10, 20, 30, 40, 31, -1, 1, 40], [10, 20, 30, 40, 31, -1, 1, 40]], [[31, 1, 3, 1, 0, 1], [31, 1, 3, 1, 0, 1]], [[10, 7, 30, 40, 31, 7, -1, 1, 10], [10, 7, 30, 40, 31, 7, -1, 1, 10]], [[10, 7, 30, 40, 2, 31, 7, -1, 1, 10], [10, 7, 30, 40, 2, 31, 7, -1, 1, 10]], [[10, 20, 30, 40, 31, -1, 1, 40, 40], [10, 20, 30, 40, 31, -1, 1, 40, 40]], [[15, 30, 0, 30, 40, 4], [15, 30, 0, 30, 40, 4]], [[15, 30, 10, 0, 30, 30, 40, 4], [15, 30, 10, 0, 30, 30, 40, 4]], [[29, 10, 20, 30, 6, 40, 50, 20], [29, 10, 20, 30, 6, 40, 50, 20]], [[3.4835765355343726, 3.5], [3.4835765355343726, 3.5]], [[51, 50], [51, 50]], [[31, 1, 3, 1, 0, 3], [31, 1, 3, 1, 0, 3]], [[4.692264375890533], [4.692264375890533]], [[1, 3, 1, 0, 1], [1, 3, 1, 0, 1]], [[30, 10, 30, 40, 50], [30, 10, 30, 40, 50]], [[3.275166414796655, 4.692264375890533], [3.275166414796655, 4.692264375890533]], [[1.5, 3.275166414796655, 4.692264375890533], [1.5, 3.275166414796655, 4.692264375890533]], [[3.275166414796655, 3.4835765355343726, 3.5, 3.5], [3.275166414796655, 3.4835765355343726, 3.5, 3.5]], [[5, 10, 15, 20, 25], [5, 10, 15, 20, 25]], [[2.5, 3.5, 2.4419505347242247], [2.5, 3.5, 2.4419505347242247]], [[3.480698843323787, 3.5, 4.5, 2.5], [3.480698843323787, 3.5, 4.5, 2.5]], [[3.8409023192569816, 3.275166414796655, 4.228187684597152, 4.5], [3.8409023192569816, 3.275166414796655, 4.228187684597152, 4.5]], [[10, 20, 30, 30, 40, -1, 1], [10, 20, 30, 30, 40, -1, 1]], [[10, 7, 30, 40, 31, 7, 1, 10], [10, 7, 30, 40, 31, 7, 1, 10]], [[30, 5, 20, 30, 40, 50], [30, 5, 20, 30, 40, 50]], [[4, 50, 30, 3, 3, 50], [4, 50, 30, 3, 3, 50]], [[4, 50, 30, 3, 3, 50, 50], [4, 50, 30, 3, 3, 50, 50]], [[30, 10, 20, 50, 30, 39, 49], [30, 10, 20, 50, 30, 39, 49]], [[6, 7, 25], [6, 7, 25]], [[15, 30, 3, 10, 0, 30, 40, 4], [15, 30, 3, 10, 0, 30, 40, 4]], [[30, 10, 30, 29, -1, 30], [30, 10, 30, 29, -1, 30]], [[10, 20, 30, 40, 2, 31, 7, -1, 1, 10, 30], [10, 20, 30, 40, 2, 31, 7, -1, 1, 10, 30]], [[1.2555626492437502, 1.2555626492437502, 2.7219722320551716, 2.5], [1.2555626492437502, 1.2555626492437502, 2.7219722320551716, 2.5]], [[30, 49, 10, 20, 30, 6, 40, 50, 20], [30, 49, 10, 20, 30, 6, 40, 50, 20]], [[-1, 31, 1, 3, 1, 3], [-1, 31, 1, 3, 1, 3]], [[50, 50, 3, 50], [50, 50, 3, 50]], [[50, 1, 8, 3, 1], [50, 1, 8, 3, 1]], [[3.4835765355343726], [3.4835765355343726]], [[20, 10, 20, 30, 40, 25, 0, 1, 30, 30, 30], [20, 10, 20, 30, 40, 25, 0, 1, 30, 30, 30]], [[31, 1, 3, 2, 1, 0, 40, 0], [31, 1, 3, 2, 1, 0, 40, 0]], [[3.4835765355343726, 3.5, 3.5], [3.4835765355343726, 3.5, 3.5]], [[10, 20, 30, 40, 31, -1, 50, 3, 10, 50], [10, 20, 30, 40, 31, -1, 50, 3, 10, 50]], [[15, 30, 0, 30, 40, 4, 4], [15, 30, 0, 30, 40, 4, 4]], [[30, 20, 50, 30, 40, 50, 20], [30, 20, 50, 30, 40, 50, 20]], [[10, 30, 40, 1, 31, -1, 1], [10, 30, 40, 1, 31, -1, 1]], [[2.2350376696437304, 4.692264375890533], [2.2350376696437304, 4.692264375890533]], [[50, 30, 10, 20, 30, 40, 50], [50, 30, 10, 20, 30, 40, 50]], [[2.2350376696437304, 4.692264375890533, 2.2350376696437304], [2.2350376696437304, 4.692264375890533, 2.2350376696437304]], [[10, 20, 30, 1, 0, 1, 15, 30, 10], [10, 20, 30, 1, 0, 1, 15, 30, 10]], [[1.5, 3.5, 2.5, 1.5, 4.228187684597152], [1.5, 3.5, 2.5, 1.5, 4.228187684597152]], [[50, 1, 3, 1, 0, 1, 1], [50, 1, 3, 1, 0, 1, 1]], [[4, 2, 50, 30, 3, 50, 50], [4, 2, 50, 30, 3, 50, 50]], [[1.5, 4.228187684597152], [1.5, 4.228187684597152]], [[20, 30, 1, 0, 1, 30, 30], [20, 30, 1, 0, 1, 30, 30]], [[10, 20, 30, 40, 31, -1, 3, 1, 10, 40], [10, 20, 30, 40, 31, -1, 3, 1, 10, 40]], [[10, 20, 30, 40, 21, 0, 1, 30, 30, 30], [10, 20, 30, 40, 21, 0, 1, 30, 30, 30]], [[20, 10, 20, 30, 40, 25, 0, 1, 30, 30, 30, 20, 25, 25], [20, 10, 20, 30, 40, 25, 0, 1, 30, 30, 30, 20, 25, 25]], [[4.5, 1.5, 2.5, 4.228187684597152], [4.5, 1.5, 2.5, 4.228187684597152]]]
results = [[-3, -3, -3], [-2, -2], [40, 50], [-4, -4, -4, -4], [5, 10, 15, 20, 25], [-2, -4, -6], [1.0, 1.0, 1.0], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0.0, 0.0, 0.0], [0, 0, 0], [0.0, 0.0, 0.0], [0.0, 0.0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0], [-4, -4, -4, -21], [0.0, 0.0, 0.0], [0, 0, 0, 0, 0, 0], [0.0, 0.0, 0.0, 0.0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0], [0.0, 0.0, 0.0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0.0, 0.0, 0.0, 0.0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.0, 0.0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0], [0.0, 0.0, 0.0, 0.0, 0.0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0.0, 0.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0.0], [0.0, 0.0, 0.0, 0.0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0.0, 0.0], [0, 0], [0, 0, 0, 0, 0, 0], [0.0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0, 0, 0, 0, 0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.0, 0.0, 0.0, 0.0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0], [0.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0.0, 0.0, 0.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0.0, 0.0], [0, 0, 0, 0, 0, 0, 0], [0.0, 0.0, 0.0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0.0, 0.0, 0.0, 0.0, 0.0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0.0, 0.0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.0, 0.0, 0.0, 0.0]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "sub_list"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]', 'assert sub_list([1,2],[3,4])==[-2,-2]', 'assert sub_list([90,120],[50,70])==[40,50]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
