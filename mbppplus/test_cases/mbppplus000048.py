import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[[1], [1, 2]]], [[[1, 2], [1, 2, 3], [1, 2, 3, 4]]], [[[3, 3, 3], [4, 4, 4, 4]]], [[[], [], [], [], [], []]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[], [], [], [], []]], [[[], [], []]], [[[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[4, 1, 2, 3], [4, 5], [4, 1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13]]], [[[], [], [9, 2, -89, 83, 13], [], [], [], []]], [[[]]], [[[], [], [], [True, False, 84.98850542252845, True], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13]]], [[[False], [False]]], [[[84.98850542252845, -78.5618531155085]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [6, 7, 8, 5, 9]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13], [1, 2, 3]]], [[[4, 1, 2, 3], [4, 8], [4, 1, 2, 3], [6, 11, 7, 8, 9, 10], [11, 12, 13]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [True, True, True, True, False, True, True]]], [[[], [], [], [True, False, 84.98850542252845, True], [], [], [], [], [], [], [False, False, False, True, True], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [1, 2, 3]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [1, 2, 3]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [True, True, True, True, False, True, True], [85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10]]], [[[1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 8, 5, 9], [6, 8, 5, 9], [4, 5], [6, 8, 5, 9], [11, 12, 13], [11, 12, 13]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [True, True, True, True, False, True, True, True], [85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[1, 2, 3], [6, 7, 8, 9, 10], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 13], [4, 5], [6, 7, 8, 5, 13], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 5, 9], [6, 7, 5, 9]]], [[[4, 1, 2, 3], [4, 8], [4, 1, 2, 3], [11, 12, 13]]], [[[], [], [], [], [], [], [], ['nmUTpTB', 'LqgBbFug', 'A', 'YmVhY'], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13], [11, 12, 13]]], [[[], [], [], [-89, 12, 11], [False], [], []]], [[[4, 1, 3, 3], [4, 8], [4, 1, 3, 3], [4, 1, 3, 3], [11, 12, 13]]], [[[6, 7, 8, 9], [4, 5], [6, 7, 8, 9]]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13], [11, 12, 13]]], [[[84.98850542252845, -78.5618531155085, -78.5618531155085], [84.98850542252845, -78.5618531155085, -78.5618531155085]]], [[[], [False, True, False, False, False, True, False, True], [], [], [], [], [], []]], [[[1, 2, 3], [6, 8, 5, 9], [6, 8, 5, 9], [6, 8, 5, 9], [11, 12, 13], [11, 12, 13], [1, 2, 3]]], [[[6, 7, 5, 9], [6, 7, 5, 9]]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13], [11, 12, 13], [11, 12, 13]]], [[[6, 7, 5, 9], [6, 7, 5, 9], [6, 7, 5, 9]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 8, 10, 9], [6, 7, 8, 8, 10, 9], [11, 12, 13], [1, 2, 3]]], [[[], [33, 9, -70, False, -84, -42, False, -64, 7, -66], [], [], []]], [[[4, 2, 3], [6, 11, 7, 8, 9, 10], [4, 8], [4, 2, 3], [6, 11, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 9, 10], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 8, 5, 9, 8], [6, 8, 5, 9, 8], [6, 8, 5, 9, 8], [6, 8, 5, 9, 8], [11, 12, 13], [11, 12, 13], [1, 2, 3], [6, 8, 5, 9, 8]]], [[[84.98850542252845, -78.5618531155085, -78.5618531155085]]], [[[6, 7, 8, 9], [4, 5], [6, 7, 8, 9], [6, 7, 8, 9]]], [[[4, 1, 2, 3], [4, 5], [4, 1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13], [4, 1, 2, 3], [6, 7, 8, 9, 10]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.52239660663136, -78.5618531155085], [True, True, True, True, False, True, True]]], [[[False]]], [[[], [33, 9, -70, False, -84, -42, False, -64, 7, -66, -84], [], [], [], [33, 9, -70, False, -84, -42, False, -64, 7, -66, -84], [33, 9, -70, False, -84, -42, False, -64, 7, -66, -84]]], [[[1, 2, 2, 3], [4, 5], [11, 12, 13], [1, 2, 2, 3], [6, 7, 8, 9, 10]]], [[[33, 9, -70, False, -84, -42, False, -64, 7, -66], [], [], [90, 33, 2, 13, 69, 3, 83, 2]]], [[[2, -84, 3], [5], [5], [6, 7, 8, 9, 10], [2, -84, 3], [11, 12, 13]]], [[[3, 2, 3], [3, 2, 3], [6, 7, 8, 5, 9], [3, 2, 3], [4, 4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13], [3, 2, 3]]], [[[], [33, 9, -70, False, -84, -42, False, -64, 7, -66, -84], [], [], [], [33, 9, -70, False, -84, -42, False, -64, 7, -66, -84], [33, 9, -70, False, -84, -42, False, -64, 7, -66, -84], []]], [[[6, 7, 8], [4, 5], [6, 7, 8]]], [[[1, 2, 3], [6, 7, 8, 9], [6, 7, 8, 9], [6, 7, 8, 9], [11, 12, 13], [6, 7, 8, 9], [11, 12, 13], [1, 2, 3]]], [[[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10]]], [[[], [33, 9, False, -70, False, -84, -42, False, -64, 7, -66], [], [], []]], [[[4, 1, 2, 3], [4, 5], [4, 1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13], [11, 12, 13]]], [[[False, True, True, True, True, False, False, False], [], []]], [[[2, 9, 63, 9, 4, 2, -83, -84, -78], [33, 9, -70, False, -84, -42, False, -64, 7, -66], [], [], []]], [[[4, 1, 2, 2, 3], [4, 5], [4, 1, 2, 2, 3], [4, 1, 2, 2, 3], [6, 7, 8, 9, 10], [11, 12], [4, 1, 2, 2, 3]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13, 12], [11, 12, 13, 12]]], [[[], [33, 9, -70, False, -84, -42, False, -64, 7, -66], [], [], [], []]], [[[3, 2, 3, 3], [3, 2, 3, 3], [6, 7, 8, 5, 9], [3, 2, 3, 3], [4, 4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13], [3, 2, 3, 3]]], [[[6, 7, -84, 8, 9], [6, 7, -84, 8, 9], [4, 5], [6, 7, -84, 8, 9]]], [[[4, 1, 2, 2, 3], [4, 5], [4, 1, 2, 2, 3], [4, 1, 2, 2, 3], [11, 12], [4, 1, 2, 2, 3]]], [[[4, 1, 2, 3, 4], [4, 1, 2, 3, 4], [4, 8], [11, 12, 13, 13], [4, 1, 2, 3, 4], [11, 12, 13, 13]]], [[[-58.13858535192631, 85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [-58.13858535192631, 85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [True, True, True, True, False, True, True, True], [True, True, True, True, False, True, True, True]]], [[[6, 11, 7, 8, 6, 10], [4, 2, 3], [6, 11, 7, 8, 6, 10], [4, 8], [4, 2, 3], [6, 11, 7, 8, 6, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 9, 10, 7], [6, 7, 8, 9, 10, 7], [6, 7, 8, 9, 10, 7], [11, 12, 13], [6, 7, 8, 9, 10, 7], [11, 12, 13]]], [[[4, 5, 4], [6, 7, 8, 5, 13], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 13, 13, 12], [11, 13, 13, 12]]], [[[], [], [], [], [], [], [], ['nmUTpTB', 'LqgBbFug', 'A', 'YmVhY'], ['LqgBbFug', 'ADAvRmZZL', 'A', ''], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[2, -84, 3], [5], [5], [6, 7, 8, 9, 10], [2, -84, 3], [11, 12, 13], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13]]], [[[1, 2, 3], [5, 7, 8, 5], [5, 7, 8, 5], [5, 7, 8, 5], [5, 7, 8, 5]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10], [1, 2, 3]]], [[[], [33, 9, False, -84, -42, False, -64, 7, -66, -84], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [1, 2, 3], [6, 7, 8, 5, 9]]], [[[6, 11, 7, 8, 6, 10], [4, 2, 3], [6, 11, 7, 8, 6, 10], [4, 8], [6, 11, 7, 8, 6, 10], [11, 12, 13], [4, 8]]], [[[1, 2, 3], [6, 7, 5, 9], [4, 5], [6, 7, 5, 9], [12, 13, 12], [12, 13, 12]]], [[[1, 2, 3], [6, 9, 8, 9, 10], [6, 9, 8, 9, 10], [11, 12, 13], [6, 9, 8, 9, 10], [11, 12, 13]]], [[[], [False, True, False, False, False, True, False, True], [], [], [], [], [], [], []]], [[[False], [False], [False]]], [[[4, 1, 2, 2, 3], [4], [4, 1, 2, 2, 3], [4, 1, 2, 2, 3], [11, 12], [4, 1, 2, 2, 3]]], [[[1, 2, 3], [6, 8, 5, 9], [6, 8, 5, 9], [4, 5], [6, 8, 5, 9], [11, 12, 13, 11], [11, 12, 13, 11], [11, 12, 13, 11], [6, 8, 5, 9]]], [[[3, 2, 3, 3], [3, 2, 3, 3], [6, 7, 8, 5, 9, 8], [6, 7, 8, 5, 9, 8], [3, 2, 3, 3], [4, 4, 5], [6, 7, 8, 5, 9, 8], [11, 12, 13], [11, 12, 13], [3, 2, 3, 3], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [5], [11, 12, 13], [11, 12, 13], [6, 7, 8, 5, 9], [11, 12, 13]]], [[[], [], [], [True, False, 84.98850542252845, True], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [69, 8, -42, 6], [], [], [], [], [], []]], [[[85.61630620077268, -90.47064487499253, 87.92412950816434, 84.98850542252845, -78.5618531155085], [85.61630620077268, -90.47064487499253, 87.92412950816434, 84.98850542252845, -78.5618531155085]]], [[[False, True, False, False, False, True, False, True], [], [], [], [], [], []]], [[[85.61630620077268, 84.98850542252845, 84.98850542252845, -78.5618531155085], [True, True, True, True, False, True, True, True], [85.61630620077268, 84.98850542252845, 84.98850542252845, -78.5618531155085], [85.61630620077268, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[1, 2, 2, 3, 1], [4, 5], [11, 12, 13], [1, 2, 2, 3, 1], [1, 2, 2, 3, 1], [6, 7, 8, 9, 10], [1, 2, 2, 3, 1]]], [[[6, 11, 7, 8, 6, 10], [4, 2, 3], [6, 11, 7, 8, 6, 10], [8], [6, 11, 7, 8, 6, 10], [11, 12, 13], [8]]], [[[4, 1, 2, 3, 4], [4, 8], [7, 11, 12, 13, 13], [4, 1, 2, 3, 4], [7, 11, 12, 13, 13]]], [[[4, 5, 4], [6, 7, 8, 5, 13], [11, 12, 13], [4, 5, 4]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[62.65634626917724, -78.5618531155085], [62.65634626917724, -78.5618531155085], [62.65634626917724, -78.5618531155085]]], [[[], [], [True, 'ERSEFXmEb', [-90.47064487499253, -61.40371790488326, 84.52239660663136], False, {'-80': None, '-78': -1.574803399508525, '47': 6, '-81': 4.848176964479563, '82': False, '6': 5}, -58.13858535192631, True, None, 'ERSEFXmEb'], [], [], [], []]]]
results = [1, 2, 3, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 1, 2, 3, 2, 2, 5, 0, 2, 2, 5, 3, 2, 2, 2, 5, 3, 2, 3, 2, 0, 2, 0, 2, 2, 3, 3, 0, 3, 4, 2, 4, 2, 0, 2, 3, 3, 3, 2, 2, 5, 1, 0, 2, 0, 1, 3, 0, 2, 3, 0, 2, 0, 2, 0, 0, 2, 2, 0, 3, 2, 2, 2, 6, 2, 3, 3, 2, 0, 1, 3, 3, 2, 0, 2, 2, 2, 3, 0, 1, 1, 2, 3, 1, 0, 5, 0, 4, 2, 1, 2, 3, 5, 2, 0]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "Find_Min_Length"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert Find_Min_Length([[1],[1,2]]) == 1', 'assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2', 'assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
