import numpy as np
['import math']

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [(0.0, 1j), (2.0, 1j), (0.0, 2j), (0.0, 0j), (1e-100, 1e-100j), (1.0, (-0-1j)), (-3.0, 4j), (-1.0, 0.5j), (-1.0, (-0-2j)), (5.0, (-0-3j)), (1.0, (-0-1e-16j)), (-1000000.0, 1j), (0.001, 0.001j), (-0.002, 0.003j), (5000.0, (-0-5000j)), (2.0, 2j), (5.0, (-0-1e-16j)), (-1000000.0, 1e-100j), (-1.0, -0.2094810906938558j), (0.001, 1.0104890444966959j), (0.0, 0.003j), (0.0, (-0-1e-16j)), (0.001, 1e-100j), (5.0, 2j), (1.0, 2.016370180069777j), (5.0, 0.003j), (-1000000.0, 0.003j), (-1.0, -1.1516856344430004j), (0.001, 0.6725319152086964j), (0.0, -0.010355262258335274j), (2.0, (-0-1j)), (-3.0, 1j), (5000.0, 0j), (0.0, 0.975464332791085j), (1.0, 1j), (0.0, 1.9698673032096357j), (0.001, 1.0219314567339677j), (5000.0, 0.003j), (5000.0, 0.3936790862469757j), (-1.0, 0j), (1e-100, 1.0219314567339677j), (0.0, 0.6725319152086964j), (0.001, -0.8400056138335225j), (0.0, 1.0623785268964003j), (-2.0, (-0-2j)), (-1.0, (-0-1e-16j)), (-2.0, -1.4466815811938807j), (-0.420215439612294, 1.0219314567339677j), (0.0, -0.8400056138335225j), (-1.0, 0.003j), (2.0, (-0-3j)), (0.0, -0.7464229304074054j), (5.0, (-0-1j)), (-1.0, 0.7612695873124079j), (2.0, -2.62106615192279j), (1.0, 4j), (1.0, -0.24099175426302122j), (1.0, 1.0623785268964003j), (5001.0, 0.003j), (-3.0, 0.7612695873124079j), (1.0, 1.0104890444966959j), (0.001, (-0-3j)), (1.0, 0.6725319152086964j), (0.001, -0.8715172340818781j), (1.0, 3.2198297580460986j), (-0.24387354740075257, 1.0219314567339677j), (0.001, -1.1516856344430004j), (1e-100, -0.1029778505874197j), (5.0, -0.2094810906938558j), (-763284.5778121873, 1j), (2.0, 0.8691541649826418j), (0.0, -4999.924286520318j), (2.0, (-0-1e-16j)), (5000.0, (-0-1j)), (5000.0, -0.2094810906938558j), (1.0, -0.1029778505874197j), (5000.0, -0.010355262258335274j), (0.0007807920872595409, 0.6725319152086964j), (5001.0, 0.975464332791085j), (2.0, 0.975464332791085j), (0.0007732910823548642, 0.001j), (5000.0, 0.5697754263979038j), (3.0, 1j), (0.0007732910823548642, -0.6005568184440887j), (5.0, (-0-2j)), (-0.24387354740075257, 1e-100j), (-1.0, 2.016370180069777j), (5.0, 1j), (-3.0, -0.24099175426302122j), (5001.0, -0.2094810906938558j), (1.0, 0.746539818763773j), (1.0, 0.6430961891723811j), (1.0, 3.0401020209872165j), (1.0, 0.5697754263979038j), (3.0, 0j), (5.0, 0.975464332791085j), (1.0, -0.010355262258335274j), (1.0, 1.2472534570917213j), (0.001, 0.2808016878272164j), (-0.24387354740075257, -0.6005568184440887j), (0.0, 1.6394342209431512j), (7.0, (-0-1j)), (-0.24387354740075257, 0.11629069822069693j), (5000.0, -4999.787677780481j), (0.0, -0.6005568184440887j), (-1.0, 1j), (5.0, -0.7272148602507602j), (5001.0, 1.628767403187359j), (0.001, 0.6755064392822638j), (7.0, 1.2472534570917213j), (1.0, 0.8045352400481771j), (0.0, (-0-1j))]
results = [1.5707963267948966, 0.4636476090008061, 1.5707963267948966, 0.0, 0.7853981633974483, -0.7853981633974483, 2.214297435588181, 2.677945044588987, -2.0344439357957027, -0.5404195002705842, -1e-16, 3.1415916535897934, 0.7853981633974483, 2.158798930342464, -0.7853981633974483, 0.7853981633974483, -1.9999999999999998e-17, 3.141592653589793, -2.935097503165345, 1.5698067072844257, 1.5707963267948966, -1.5707963267948966, 1e-97, 0.3805063771123649, 1.1104014431812392, 0.0005999999280000155, 3.1415926505897933, -2.285814737388355, 1.5693094096086464, -1.5707963267948966, -0.4636476090008061, 2.819842099193151, 0.0, 1.5707963267948966, 0.7853981633974483, 1.5707963267948966, 1.5698177878975654, 5.99999999999928e-07, 7.873581708669206e-05, 3.141592653589793, 1.5707963267948966, 1.5707963267948966, -1.569605859122863, 1.5707963267948966, -2.356194490192345, -3.141592653589793, -2.515372879526448, 1.960918111233556, -1.5707963267948966, 3.1385926625897445, -0.982793723247329, -1.5707963267948966, -0.19739555984988075, 2.490917937562239, -0.9189964914877319, 1.3258176636680326, -0.23648250986307637, 0.8156348609311445, 5.998800239951291e-07, 2.8930815706323374, 0.7906152767961402, -1.570462993473909, 0.5920521756892685, -1.5696489030584135, 1.2696657660459925, 1.8050548184065056, -1.5699280345120177, -1.5707963267948966, -0.04187173054255484, 3.1415913434624447, 0.4099544764199125, -1.5707963267948966, -5e-17, -0.0001999999973333334, -4.1896218114257775e-05, -0.10261614184321532, -2.0710524516640937e-06, 1.569635353287464, 0.00019505385331338622, 0.4537852644763088, 0.9125547986768521, 0.00011395508478631625, 0.3217505543966422, -1.569508703990125, -0.3805063771123649, 3.141592653589793, 2.031191210408554, 0.19739555984988075, -3.061434194054647, -4.1887840546158345e-05, 0.6412829122604286, 0.5715066061270702, 1.2530082821139132, 0.517899009776432, 0.0, 0.1926727405632964, -0.0103548921455297, 0.8949821254321993, 1.5672351096942738, -1.9565322614534364, 1.5707963267948966, -0.14189705460416394, 2.696637311690111, -0.7853769307246828, -1.5707963267948966, 2.356194490192345, -0.14443024473721994, 0.0003256883314533101, 1.5693159570880375, 0.17632859194255202, 0.6775002210922619, -1.5707963267948966]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "angle_complex"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)', 'assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)', 'assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
