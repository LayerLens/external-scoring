import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 20, 45, 67, 84, 93]], [[5, 7, 9, 8, 6, 4, 3]], [[-5, 0, 5, -10, 15, 20, -25, 30]], [[-100, -50, 0, 50, 100]], [[3, -5, -5, -2, 7, 7, 2, 3, -2, 3]], [[3, -5, -5, -2, 7, 7, 2, 5, -2, 3]], [[3, -5, -5, -2, 7, 7, -100, 2, 5, -2, 3]], [[3, -5, -5, -2, 7, -100, 2, 5, -2, 3]], [[3, -5, -5, 7, 7, -100, 2, 5, -2, 3, 5]], [[3, -5, -2, 7, 7, 2, 5, -2, 3]], [[3, -5, -5, 7, 7, -100, 2, 5, -2, 3, 5, 7]], [[3, -5, -2, 7, 7, 2, 5, -2, 50, 3, 5]], [[-100, -50, 50, 100]], [[-5, 3, -5, -5, -2, 7, 2, 5, -2, 3]], [[3, -5, -5, 7, 7, -100, 2, 5, -1, 3, 5, 7, 7]], [[3, -5, -5, -2, 7, 7, 2, 3, -2, 3, -2]], [[3, -5, -5, 2, -2, 7, -100, 2, 5, -2, 3]], [[3, 2, -5, -5, -2, 7, 7, 2, 3, -2, 3]], [[3, -5, -5, -2, 7, 7, 2, 3, 3, -2, 3, -2]], [[-5, 0, 5, -10, 15, -6, 20, -25, 30]], [[3, -5, -2, 7, 7, 5, -2, 3]], [[-100, -101, -50, 50, 100]], [[3, -5, -2, 7, 7, 2, 5, -2]], [[-100, 50, 100]], [[3, -5, -2, 7, 5, 7, 2, 5, -2, 50, 3, 5]], [[3, -5, -5, -2, 7, -100, 2, 5, -2, 3, -2]], [[3, -5, -2, 7, 7, 4, -2, 3, 7]], [[3, -5, -5, -50, 7, 7, 2, 5, 30, 3]], [[3, -5, -5, -2, 7, -100, 2, 5, -2, 3, -2, 2]], [[-5, 0, 5, -10, -6, 20, -25, 30]], [[3, -5, -2, 7, 7, 2, 5, -2, 50, 3, 5, 5]], [[3, -5, -2, -2, 7, -100, 2, 5, -2, 3, -2, 2, -2]], [[-5, 5, 5, -10, -6, 15, -25, 30, 15, -6]], [[4, -5, -5, -50, 7, 7, 5, 30, 3]], [[4, 7, -5, -5, -51, 7, 7, 5, 30, 3]], [[3, -5, -5, -2, 7, -100, 5, -2, 3, -2]], [[3, -5, -5, 7, 7, 2, 5, 30, 3]], [[-100, -50, 50, 100, 50, -50]], [[4, -5, -5, 2, -2, 7, -100, 2, 5, -2, 3]], [[-5, 3, -5, -5, -2, 7, 2, 5, -2, 3, 2]], [[3, -5, -5, 7, 7, -100, 2, -101, 5, -2, 3, 5, 7]], [[-100, 30, -50, 50, 100]], [[3, -5, -5, 7, 7, -100, 2, 5, -2, 3, 5, 3]], [[3, -5, -2, 7, 7, 2, 6, 5, -2, 50, 3, 5, 5]], [[3, -5, 6, 7, 7, 2, 5, -2, 3, 7]], [[3, -5, -2, 7, 7, 2, 5, -2, 5, 7]], [[3, 0, -5, -5, -2, 7, 7, 2, 3, -2, 3, -2]], [[4, 7, -5, -5, -51, 7, 7, 5, 30, 3, 5]], [[-5, -5, -2, 7, 7, -100, 2, 5, -2, 3]], [[3, -5, -5, 7, 7, -100, -2, 5, -2, 3, 5, 3, 3]], [[2, -5, -2, 7, 7, 4, -2, 3, 7]], [[-100, 30, -50, 50, 100, 30]], [[3, -5, -5, -2, 7, 7, -100, -6, 2, 5, -2, 3]], [[3, -5, 3, -5, -50, 7, 7, 2, 5, 30, 3]], [[3, 3, -5, -5, -2, 7, -100, 2, 5, -2, 3]], [[5, 3, -5, 7, 7, 2, 5, -2, 3, 7]], [[3, -5, -5, 7, 7, -100, 3, -101, 5, 3, 5, 7]], [[-100, 50, 100, 100]], [[3, 2, -5, -5, -2, 7, 7, -100, 3, -2, 3]], [[3, 0, -5, -5, -2, 7, 7, 2, 3, -2, -2]], [[3, -5, -5, -2, 7, -100, 2, 5, -2, 3, -2, 2, -100]], [[-5, 3, -5, -2, 7, 2, 5, -2, 3, 2]], [[3, -5, -5, 7, 7, -100, -101, 5, 3, 5, 7]], [[3, -5, -5, 7, 7, -100, 2, 5, -2, 3, 5, 7, 3]], [[3, -5, -5, -2, 7, 7, -100, -6, 2, 5, -2, 3, -6]], [[3, -5, -2, 7, 5, 7, 5, -2, 50, 3, 5]], [[3, -2, 7, 7, 2, 5, -2, 50, 3, 5]], [[3, -5, -2, 7, 7, 2, 30, -2]], [[-100, 100, 50, 100, 100]], [[3, -5, -5, -2, 7, 7, 5, 3]], [[4, 7, -5, -5, -51, 7, 7, 20, 30, 3, 5]], [[-5, 5, -10, -6, 20, -25, 30]], [[3, -5, -5, -2, 6, 7, 7, -100, -6, 2, 5, -2, 3, -6, -2]], [[3, -5, 3, -5, -50, 7, 7, 2, 5, 30, 3, 7]], [[3, -5, -5, 7, 7, -100, 2, 5, -2, 3, -6]], [[5, -5, 7, 7, 2, 5, -2, 3, 7]], [[3, -5, -5, -2, 7, 7, -6, 2, 5, -2, 3]], [[5, -10, -6, -5, -25, 30]], [[3, -5, -5, 7, 7, 2, 5, 30, 4, 3]], [[3, -5, -5, -2, 7, 2, 3, -2, 3]], [[4, -5, -5, 2, -2, 7, -100, 2, 5, -2, 3, -5]], [[-5, 5, 4, -10, -6, 20, -25, 30]], [[3, -5, -2, 7, 7, 5, -2, 3, 3, -2]], [[-5, 3, -25, -5, -5, -2, 7, 2, -51, 5, -2, 3]], [[4, 30, -50, -5, -5, -50, 7, 7, 5, 30, 3]], [[3, -51, -5, -2, 7, 7, -100, 2, 5, -2, 3, -100]], [[5, -10, -6, -5, -25, 30, -6]], [[3, -5, -2, 7, 7, 2, 5, 2, -2, 3, 2]], [[-100, 30, -50, 50]], [[3, -5, -2, 7, 7, 2, 6, 5, -2, 50, 5, 5]], [[3, -5, -5, -2, 6, 2, 3, -2, 3]], [[3, -2, 7, 7, 2, 5, -2, 50, 3, 30]], [[100, 50, 100, 100, 100, 100]], [[3, -5, -5, -2, 7, -100, 2, 5, -4, -2, 3, -2, -3, 2]], [[3, -5, 6, 7, 8, 2, 5, -2, 3, 7]], [[3, 0, 1, -5, -5, -2, 7, 7, 2, 3, -2, 3, -2]], [[5, 7, -5, -5, -51, 7, 7, 8, 30, 3, 5, -5]], [[-100, -25, -50, 50, 100]], [[3, -5, -2, 7, 7, 2, 5, -2, 3, 5]], [[3, -5, -2, 7, 7, -5, -2, 3, 7, -5]], [[3, -5, -5, 7, 7, -100, -101, 5, 3, 5, 7, 5]], [[3, -2, 7, 7, 2, 5, -2, 50, 3, 30, 7]], [[3, -5, -2, 7, -100, 2, 5, -2, 3, -3, 2, -100]], [[3, -2, 7, 7, 2, 5, 50, 3, 30, 7]], [[3, -2, 7, 7, 2, 5, 50, 3, 5]]]
results = [[1, 3, 5, 7, 9], [45, 67, 93], [5, 7, 9, 3], [-5, 5, 15, -25], [], [3, -5, -5, 7, 7, 3, 3], [3, -5, -5, 7, 7, 5, 3], [3, -5, -5, 7, 7, 5, 3], [3, -5, -5, 7, 5, 3], [3, -5, -5, 7, 7, 5, 3, 5], [3, -5, 7, 7, 5, 3], [3, -5, -5, 7, 7, 5, 3, 5, 7], [3, -5, 7, 7, 5, 3, 5], [], [-5, 3, -5, -5, 7, 5, 3], [3, -5, -5, 7, 7, 5, -1, 3, 5, 7, 7], [3, -5, -5, 7, 7, 3, 3], [3, -5, -5, 7, 5, 3], [3, -5, -5, 7, 7, 3, 3], [3, -5, -5, 7, 7, 3, 3, 3], [-5, 5, 15, -25], [3, -5, 7, 7, 5, 3], [-101], [3, -5, 7, 7, 5], [], [3, -5, 7, 5, 7, 5, 3, 5], [3, -5, -5, 7, 5, 3], [3, -5, 7, 7, 3, 7], [3, -5, -5, 7, 7, 5, 3], [3, -5, -5, 7, 5, 3], [-5, 5, -25], [3, -5, 7, 7, 5, 3, 5, 5], [3, -5, 7, 5, 3], [-5, 5, 5, 15, -25, 15], [-5, -5, 7, 7, 5, 3], [7, -5, -5, -51, 7, 7, 5, 3], [3, -5, -5, 7, 5, 3], [3, -5, -5, 7, 7, 5, 3], [], [-5, -5, 7, 5, 3], [-5, 3, -5, -5, 7, 5, 3], [3, -5, -5, 7, 7, -101, 5, 3, 5, 7], [], [3, -5, -5, 7, 7, 5, 3, 5, 3], [3, -5, 7, 7, 5, 3, 5, 5], [3, -5, 7, 7, 5, 3, 7], [3, -5, 7, 7, 5, 5, 7], [3, -5, -5, 7, 7, 3, 3], [7, -5, -5, -51, 7, 7, 5, 3, 5], [-5, -5, 7, 7, 5, 3], [3, -5, -5, 7, 7, 5, 3, 5, 3, 3], [-5, 7, 7, 3, 7], [], [3, -5, -5, 7, 7, 5, 3], [3, -5, 3, -5, 7, 7, 5, 3], [3, 3, -5, -5, 7, 5, 3], [5, 3, -5, 7, 7, 5, 3, 7], [3, -5, -5, 7, 7, 3, -101, 5, 3, 5, 7], [], [3, -5, -5, 7, 7, 3, 3], [3, -5, -5, 7, 7, 3], [3, -5, -5, 7, 5, 3], [-5, 3, -5, 7, 5, 3], [3, -5, -5, 7, 7, -101, 5, 3, 5, 7], [3, -5, -5, 7, 7, 5, 3, 5, 7, 3], [3, -5, -5, 7, 7, 5, 3], [3, -5, 7, 5, 7, 5, 3, 5], [3, 7, 7, 5, 3, 5], [3, -5, 7, 7], [], [3, -5, -5, 7, 7, 5, 3], [7, -5, -5, -51, 7, 7, 3, 5], [-5, 5, -25], [3, -5, -5, 7, 7, 5, 3], [3, -5, 3, -5, 7, 7, 5, 3, 7], [3, -5, -5, 7, 7, 5, 3], [5, -5, 7, 7, 5, 3, 7], [3, -5, -5, 7, 7, 5, 3], [5, -5, -25], [3, -5, -5, 7, 7, 5, 3], [3, -5, -5, 7, 3, 3], [-5, -5, 7, 5, 3, -5], [-5, 5, -25], [3, -5, 7, 7, 5, 3, 3], [-5, 3, -25, -5, -5, 7, -51, 5, 3], [-5, -5, 7, 7, 5, 3], [3, -51, -5, 7, 7, 5, 3], [5, -5, -25], [3, -5, 7, 7, 5, 3], [], [3, -5, 7, 7, 5, 5, 5], [3, -5, -5, 3, 3], [3, 7, 7, 5, 3], [], [3, -5, -5, 7, 5, 3, -3], [3, -5, 7, 5, 3, 7], [3, 1, -5, -5, 7, 7, 3, 3], [5, 7, -5, -5, -51, 7, 7, 3, 5, -5], [-25], [3, -5, 7, 7, 5, 3, 5], [3, -5, 7, 7, -5, 3, 7, -5], [3, -5, -5, 7, 7, -101, 5, 3, 5, 7, 5], [3, 7, 7, 5, 3, 7], [3, -5, 7, 5, 3, -3], [3, 7, 7, 5, 3, 7], [3, 7, 7, 5, 3, 5]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "filter_oddnumbers"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]', 'assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]', 'assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
