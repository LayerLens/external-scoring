import numpy as np
['import math']

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[10], [15], [20], [0.5], [1000], [1.25], [1e-10], [10000000000.0], [True], [0.8797935814628997], [0.5598154120615232], [1.099652034619149], [1.4666806892181193e-10], [0.30075595752911943], [0.14131211326255033], [1.5957056333538597], [2.8446633646372703], [1.0135226864402946], [999], [0.4652485633326504], [1.6160933440485161], [1.2395141071553297], [1001], [1.371623122065585], [6.016010239335242e-11], [0.3416547044021554], [1.4012158763654516], [0.2151302194789502], [0.9610743975015349], [1.2824168057024987], [1.2350343793427891], [1.741473062111801], [0.8328344786121058], [1.183605703278993], [0.3611170633175245], [0.7555326580733448], [97.62730112830147], [0.2732793706097826], [0.7951715096838966], [1.5501230356650713], [0.6842351453078037], [1.0317072568457641], [1.8059908182330324], [0.5075339315400214], [0.7681946087260797], [2.0852972065009174], [1.2988601893200238], [0.603044867219653], [1.4026942852103004], [0.523212033970379], [1.4597394961162697], [0.35775373645335146], [2.0479628632355526e-10], [35], [78], [0.6507313974062889], [4.365800974062854], [1.8456085367711623], [5.158707823383085], [79], [98.55913813353447], [1.4247236940537644], [1.9675371646406168], [0.9005697011096585], [1.8552473563367964], [2.012892104151268], [0.3631985979165624], [1.4033799197683636], [0.9268500963761888], [0.316208014117482], [1.2705215198025646e-10], [1002], [2.2262142172391357], [1.0831631055569682], [0.345186802549617], [0.4137398550418435], [0.5767615986315501], [2.07943497754721], [0.48838279998965645], [0.3271784231301367], [0.623788870153854], [0.5543692007776275], [9.149067620466951], [2.3096767309847452], [1.5560367329991556], [0.3202451092926611], [1.8404062689910736], [0.5726009377678422], [0.8357084454950721], [0.4686710492184495], [1.1902208721405216], [0.9609380264864483], [9857375230.431854], [1.6292570499973758], [0.776765114340302], [0.2810143961710297], [0.6386231930163654], [0.7825150182275014], [0.8887021798812079], [0.2705076454130074], [0.7063890179953193], [0.9919682715828331], [0.18724175315316485], [0.47251742847046363], [0.34091721710471784], [0.48848524318350334], [60.94952675176301], [0.34974511524935736]]
results = [1256.6370614359173, 2827.4333882308138, 5026.548245743669, 3.141592653589793, 12566370.614359172, 19.634954084936208, 1.2566370614359174e-19, 1.2566370614359173e+21, 12.566370614359172, 9.726832619158936, 3.9382163003339596, 15.195690108648744, 2.703217634758943e-19, 1.13668032210636, 0.25093927925565945, 31.997453787496053, 101.68844901583847, 12.908530718220105, 12541250.439501068, 2.720069153719145, 32.82031517135976, 19.30691176773525, 12591515.921958504, 23.641741216905338, 4.54806850439941e-20, 1.4668465178957841, 24.672886610187646, 0.5815843408186051, 11.607104116139439, 20.66656343307691, 19.167609733339184, 38.11038937458536, 8.71620139833934, 17.60451084482715, 1.6387242631072723, 7.173256278767029, 119771.208363825, 0.9384768446401073, 7.9456876114476875, 30.195498537699617, 5.8832949197696935, 13.37589449815103, 40.98651002826577, 3.2369800982648633, 7.415703784142983, 54.644415749371305, 21.19994212716799, 4.569925442654854, 24.724978307781246, 3.4400544170765532, 26.776917576370142, 1.6083413239943734, 5.2705267052500885e-19, 15393.804002589986, 76453.7988177612, 5.321246620984215, 239.517765202214, 42.80446217791458, 334.4196025588479, 78426.7190042156, 122068.51412734778, 25.507691623830816, 48.64696526587708, 10.191650611674147, 43.25272827005203, 50.91559890307731, 1.6576704306619072, 24.749155269049893, 10.795154513756298, 1.2564800847484752, 2.0284948753987144e-19, 12616686.362299066, 62.27930650166572, 14.7433977286196, 1.4973324276284565, 2.151119711703918, 4.180252717176976, 54.33761266654568, 2.997302561793732, 1.3451761972622496, 4.8897325708966495, 3.8619624976822404, 1051.8735604152196, 67.03664363817091, 30.426328801420468, 1.2887683917759631, 42.56349402840665, 4.120158979206829, 8.776461381642818, 2.7602353795407524, 17.801843875637474, 11.60381038513522, 1.2210471700828942e+21, 33.357161058245836, 7.582096177907874, 0.9923548627675614, 5.125063346891251, 7.694762623841729, 9.924813507923393, 0.919536456805351, 6.270436029828864, 12.365321902177747, 0.4405703453850948, 2.8057277502141176, 1.4605207561956501, 2.9985601222611042, 46682.116673171004, 1.5371391332804323]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "surfacearea_sphere"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
