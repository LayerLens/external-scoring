import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [['2026-01-02'], ['2020-11-13'], ['2021-04-26'], ['2021-1-026'], ['2024-02-29'], ['0001-01-01'], ['0000-00-00'], ['2100-45-98'], ['2020-00-15'], ['2025-13-01'], ['2022-02-29'], ['2020-02-29'], ['2022-04-31'], ['2023-06-31'], ['2030-09-31'], ['2022-04-32030-09-311'], ['0000-00-2022-02-290'], ['2020-02-20000-00-2022-02-2909'], ['2025-13-2020-02-20000-00-2022-02-290901'], ['2024-02-299'], ['2022-0-2-29'], ['2020-02-2002002024-02-299-00-2022-02-2909'], ['2024-02-2'], ['2022-0-2-22024-02-2999'], ['2022-0-2-2'], ['2020-02-2002002024-02-299-02-2909'], ['2022-04-30000-00-001'], ['2022-0-22-22024-02-299'], ['2022-0-2-22024-02-2020-02-292999'], ['2022-0-2-22024-02-2-999'], ['2022-0-2-22024-02-2020-02-2929909'], ['2020-02-20000--00-2022-02-2909'], ['2020-02-2-00-2022-02-2909'], ['2020-02-20020202024-02-299-02-2909'], ['2025-13-2020-02-20000-100-2022-02-290901'], ['2020-02-20020202022020-00-154-02-299-02-2909'], ['2020-02-2000001-01-012002024-02-299-002-2022-02-2909'], ['2025-13-2020-02-20000-100-22020-02-20000-00-2022-02-290922-02-290901'], ['2022-0-22-22024-02-29-9'], ['2020-00-1-5'], ['2022-0-02-22024-02-2020-02-292999'], ['2022-04-302030-09-311'], ['0000-00-2022-0290'], ['2020-02-200-2909'], ['2020-00-12022-0-2-295'], ['0000-00-2002-290'], ['2022-04-302000-00-001'], ['2022-0-2020-02-2902-22024-02-2020-02-292999'], ['2022-02-292022-04-32030-09-311'], ['2020-02-20000--00-2022-02-29092022-0-2-22024-02-2023-06-31999'], ['2022-04-302-001'], ['2020-00-12022-0-2-2022-0-2-22024-02-2020-02-292999295'], ['2020-02-20000-0'], ['2020-02-20020202022020-00-154-02-299-020-2909'], ['2022-0-2020-02-29002-22024-02-2020-02-292999'], ['2020-02-2002002024-02-22022-02-2999-00-2022-02-2909'], ['2020-02-20000-'], ['0000-00-2022-02-20001-01-0190'], ['2020-02-2000200202020-00-1-524-02-299-02-2909'], ['2020-02-200022025-13-0100202020-00-1-524-02-299-02-2909'], ['2022-0-22-22024-02025-13-2020-02-200000-00-2022-02-20001-01-0190000-00-2022-02-290901'], ['2020-02-20000-00-2022022-04-31909'], ['2022-04-30000-00-02022-0-2020-02-29002-22024-02-2020-02-292999'], ['2020-00-12022-0-22999295'], ['2022-0-2-22024-02020-02-20020202022020-00-154-02-299-020-29092-2-999'], ['0000-00-202022-02-290'], ['2020-02-2002024-02-22022-02-2999-00-2022-02-2902022-0-22-22024-02025-13-2020-02-200000-00-2022-02-20001-01-00-00-2022-02-2909019'], ['2025-13-2020--02-20000-100-2022-02-22020-00-151'], ['2025-13-2020--02-20000-100-2022-02-22151'], ['2030-09-2025-13-2020--02-20000-100-2022-02-22020-00-151'], ['2022-02-22020-02-20020202022020-00-154-902-299-02-290992022-04-32030-09-311'], ['2020-00-1202020-022023-06-31-20000-00-2022022-04-3190922-0-2-295'], ['2020-00-120922-0-2-20222-0-2-22024-02-2020-02-292999295'], ['2020-02-20000--2020-02-20020202022020-00-154-02-299-020-290900-2022-02-2909'], ['2020-02-2000002022-0-22-22024-02-29-91-01-012002024-02-299-002-2022-2030-09-2025-13-2020--02-20000-100-2022-02-22020-00-15102-2909'], ['2020-02-2000002022-0-22-22024-02-29-911-01-012002024-02-299-002-2022-2030-09-2025-13-2020--02-20000-100-2022-02-22020-00-15102-2909'], ['2020-00-1202020-022023-06-31-22-295'], ['2022-0-02-22024-02-2020--02-292999'], ['2022-04-302030-09-1311'], ['2022-04-302-0001'], ['2022-04-30000001'], ['2030-09-312020-02-2002002024-02-299-00-2022-02-2909'], ['2020-02-202000--2020-02-20020202022020-00-154-02-299-020-290900-2022-02-2909'], ['2020-02-2000002022-0-22-22024-02-29-91-01-012002024-02-299-002-2022-2030-09-2025-13-2020--02-20000-100-2022-02-22020-00-15102-29009'], ['2025-13-2025-13-2020-02-20000-100-22020-02-20000-00-2022-02-290922-02-2909012020-02-20000-100-22020-02-20000-00-2022-02-290922-02-290901'], ['2020-00-12022-2020-02-2002024-02-22022-02-2999-00-2022-02-2902022-0-22-22024-02025-13-2020-02-200000-00-2022-02-20001-01-00-00-2022-02-2909019295'], ['2022-04-3020002024-02-2-00-02020-02-20000-001'], ['2020-02-209'], ['2022-0-22-220024-02-29-9'], ['2021-1-0226'], ['2030-09-3120000-00-2022-0290020-02-2002002024-02-299-00-2022-02-2909'], ['2022-0-2-22024-022020-02-20000-99'], ['2020-02-200020202022020-00-154-02-299-020-2909'], ['2020-02-2002002024-022020-00-12022-0-22999295-299-02-2909'], ['2020-02-2002002024-02-299-00-2022-02-29209'], ['2020-00-12022-2020-02-2002024-02-22022-02-2999-00-2022-02-029020022-0-22-22024-02025-13-2020-02-200000-00-2022-02-20001-01-00-00-2022-02-2909019295'], ['2030-09-312020-02-2002002024-02-299-02022-04-302030-09-3110-2022-02-2909'], ['2020-02-20000-00-2022022-04-3190'], ['2022-0-2-2202909'], ['2022-20-2999'], ['2022-0-222020-02-2002002024-02-299-00-2022-02-292092-29-9'], ['2022-0-2020-02-29002-22024-02-20202020-00-1202020-022023-06-31-22-295-02-292999'], ['2020-02-2002002024-02-292024-02-29909'], ['2020-02-20000-002-2022022-04-31909'], ['2020-02-20000-00-2'], ['2020-02-200022025-13-0100202020--00-1-524-02-299-02-2909'], ['2022-00-2-22024-02-2-999'], ['0000-00-202022-02-222022-02-22020-02-20020202022020-00-154-902-299-02-290992022-04-32030-09-31190'], ['2020-02-200022025-13-0100202020--2020-02-20020202022020-00-154-02-299-02-290900-1-524-02-299-02-2909'], ['2020-02-2000031909'], ['2022-0-222020-02-2002002024-02-299-00-2022-02-292092-29--9'], ['2020-02-20000--2020-02-200202020220200000-00-202022-02-222022-02-22020-02-20020202022020-00-154-902-299-02-290992022-04-32030-09-31190-00-154-02-299-020-290900-2022-02-2909'], ['2020-02-209000-0-00-202022-02-290'], ['2025-13-2020--02-20000-100-202020-02-2000002022-0-22-22024-02-29-91-01-012002024-02-299-002-2022-2030-09-2025-13-2020--02-20000-100-2022-02-22020-00-15102-2900922-02-22151'], ['2020-02-202000--2020-02-20020202022020-00-154-02-2022-0-22-22024-02025-13-2020-02-200000-00-2022-02-20001-01-0190000-00-2022-02-290901299-020-290900-2022-02-2909']]
results = ['02-01-2026', '13-11-2020', '26-04-2021', '02-1-20216', '29-02-2024', '01-01-0001', '00-00-0000', '98-45-2100', '15-00-2020', '01-13-2025', '29-02-2022', '29-02-2020', '31-04-2022', '31-06-2023', '31-09-2030', '32-04-2022030-09-311', '20-00-000022-02-290', '20-02-2020000-00-29-02-202209', '20-13-202520-02-220-00-000022-02-290901', '29-02-20249', '2-0-2022-29', '20-02-2020020029-02-20249-00-29-02-202209', '2-02-2024', '2-0-2022-229-02-202499', '2-0-2022-2', '20-02-2020020029-02-20249-02-2909', '30-04-2022000-00-001', '22-0-2022-229-02-20249', '2-0-2022-220-02-202420-02-292999', '2-0-2022-22-02-2024-999', '2-0-2022-220-02-202420-02-2929909', '20-02-2020000--00-29-02-202209', '2-02-2020-00-29-02-202209', '20-02-20200202029-02-20249-02-2909', '20-13-202520-02-20000-100-29-02-20220901', '20-02-20200202020215-00-20204-02-299-02-2909', '20-02-2020001-01-000120029-02-20249-002-29-02-202209', '20-13-202520-02-20000-100-220-02-2020000-00-29-02-202229-02-09220901', '22-0-2022-229-02-2024-9', '1-00-2020-5', '02-0-2022-220-02-202420-02-292999', '30-04-202231-09-20301', '20-00-000022-0290', '20-02-20200-2909', '12-00-2020022-0-2-295', '20-00-000002-290', '30-04-202200-00-20001', '20-0-202220-02-2902-220-02-202420-02-292999', '29-02-202232-04-2022030-09-311', '20-02-2020000--00-29-02-2022092-0-2022-220-02-202423-06-31999', '30-04-20222-001', '12-00-2020022-0-2-2-0-2022-220-02-202420-02-292999295', '20-02-2020000-0', '20-02-20200202020215-00-20204-02-299-020-2909', '20-0-202220-02-29002-220-02-202420-02-292999', '20-02-2020020022-02-2024022-02-20-00-299922-02-2909', '20-02-2020000-', '20-00-000022-02-201-01-000190', '20-02-202000200201-00-2020-524-02-299-02-2909', '20-02-202000201-13-202500201-00-2020-524-02-299-02-2909', '22-0-2022-22024-020-13-202520-02-2020-00-000022-02-201-01-0001920-00-000022-02-290901', '20-02-2020000-00-20231-04-2022909', '30-04-2022000-00-020-0-202220-02-29002-220-02-202420-02-292999', '12-00-2020022-0-22999295', '2-0-2022-22024-020-02-20200202020215-00-20204-02-299-020-299-2-90929', '20-00-000029-02-20220', '20-02-2020022-02-2024022-02-20-00-299922-02-29022-0-2022-22024-020-13-202520-02-2020-00-000022-02-200-01-0001-00-29-02-202209019', '20-13-202520--02-20000-100-22-02-2022020-00-151', '20-13-202520--02-20000-100-22-02-2022151', '20-09-203025-13-2020--02-20000-100-22-02-2022020-00-151', '22-02-2022020-02-200202020215-00-20204-902-299-02-2909932-04-2022030-09-311', '12-00-202002020-0231-06-2023-220-00-0000231-04-202292-0-0922-295', '12-00-20202-0-0922-22-0-0222-220-02-202420-02-292999295', '20-02-2020000--20-02-20200202020215-00-20204-02-299-020-290900-29-02-202209', '20-02-2020000022-0-2022-229-02-2024-91-01-0120029-02-20249-002-2022-20-09-203025-13-2020--02-20000-100-22-02-2022020-00-15102-2909', '20-02-2020000022-0-2022-229-02-2024-911-01-0120029-02-20249-002-2022-20-09-203025-13-2020--02-20000-100-22-02-2022020-00-15102-2909', '12-00-202002020-0231-06-2023-22-295', '02-0-2022-220-02-202420--02-292999', '30-04-202213-09-203011', '30-04-20222-0001', '30-04-2022000001', '31-09-203020-02-2020020029-02-20249-00-29-02-202209', '20-02-20202000--20-02-20200202020215-00-20204-02-299-020-290900-29-02-202209', '20-02-2020000022-0-2022-229-02-2024-91-01-0120029-02-20249-002-2022-20-09-203025-13-2020--02-20000-100-22-02-2022020-00-15102-29009', '20-13-202525-13-20-02-2020000-100-220-02-2020000-00-29-02-202229-02-0922090120-02-2020000-100-220-02-2020000-00-29-02-202229-02-09220901', '12-00-2020022-20-02-2020022-02-2024022-02-20-00-299922-02-29022-0-2022-22024-020-13-202520-02-2020-00-000022-02-200-01-0001-00-29-02-202209019295', '30-04-202220002-02-2024-00-020-02-2020000-001', '20-02-20209', '22-0-2022-2229-02-0024-9', '02-1-202126', '31-09-2030220-00-000022-02920-02-0020020029-02-20249-00-29-02-202209', '2-0-2022-22024-0220-02-2020000-99', '20-02-202000202020215-00-20204-02-299-020-2909', '20-02-202002002024-0212-00-2020022-0-22999295-299-02-2909', '20-02-2020020029-02-20249-00-29-02-2022209', '12-00-2020022-20-02-2020022-02-2024022-02-20-00-299922-02-0290222-0-0022-22024-020-13-202520-02-2020-00-000022-02-200-01-0001-00-29-02-202209019295', '31-09-203020-02-2020020029-02-20249-030-04-202231-09-203010-29-02-202209', '20-02-2020000-00-20231-04-202290', '2-0-2022-2202909', '29-20-202299', '22-0-202220-02-2020020029-02-20249-00-29-02-20229-29-2092', '20-0-202220-02-29002-220-02-20242012-00-202002020-0231-06-2023-22-295-02-292999', '20-02-2020020029-02-202429-02-2024909', '20-02-2020000-002-20231-04-2022909', '20-02-2020000-00-2', '20-02-202000201-13-202500202020--00-1-524-02-299-02-2909', '2-00-2022-22-02-2024-999', '20-00-000022-02-202222-02-2022020-02-200202020215-00-20204-902-299-02-2909932-04-2022030-09-31190', '20-02-202000201-13-202500202020--20-02-20200202020215-00-20204-02-299-02-2952-1-09004-02-299-02-2909', '20-02-202000031909', '22-0-202220-02-2020020029-02-20249-00-29-02-20222092-29--9', '20-02-2020000--20-02-202002020202202020-00-000022-02-202222-02-2022020-02-200202020215-00-20204-902-299-02-2909932-04-2022030-09-315-00-11904-02-299-020-290900-29-02-202209', '20-02-202000-0-9000-2029-02-20220', '20-13-202520--02-20000-100-2020-02-2020000022-0-2022-229-02-2024-91-01-0120029-02-20249-002-2022-20-09-203025-13-2020--02-20000-100-22-02-2022020-00-15102-29022-02-0922151', '20-02-20202000--20-02-20200202020215-00-20204-02-22-0-2022-22024-020-13-202520-02-2020-00-000022-02-201-01-0001920-00-000022-02-290901299-020-290900-29-02-202209']

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "change_date_format"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert change_date_format("2026-01-02") == \'02-01-2026\'', 'assert change_date_format("2020-11-13") == \'13-11-2020\'', 'assert change_date_format("2021-04-26") == \'26-04-2021\'']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
