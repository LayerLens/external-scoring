import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[4, 5, 6], [1, 2, 3]], [[3, 2], [1, 4]], [[90, 120], [50, 70]], [[0, 0], [50, 70]], [[-10, 10], [5, -2]], [[-5, -8, 12], [2, -4, 3]], [[50, 70], [50, 70]], [[50, 10, 70], [50, 10, 70]], [[50, 70, 70], [50, 70, 70]], [[50, 70, 70, 70, 50, 70], [50, 70, 70, 70, 50, 70]], [[2, -5, -8, 12, -8], [2, -5, -8, 12, -8]], [[-4, 5, 70], [-4, 5, 70]], [[50, 70, 50], [50, 70, 50]], [[5, 70], [5, 70]], [[2, -5, -8, 12, -7, -8], [2, -5, -8, 12, -7, -8]], [[0, 1], [50, 70]], [[51, 70, 50], [51, 70, 50]], [[51, 70, -8], [51, 70, -8]], [[5, 51, 50], [5, 51, 50]], [[51, 70, 50, 50], [51, 70, 50, 50]], [[50, 10, 70, 70], [50, 10, 70, 70]], [[2, -5, -8, -5, 12, -8], [2, -5, -8, -5, 12, -8]], [[50, 10], [50, 10]], [[5], [5]], [[50, 70, 50, 50], [50, 70, 50, 50]], [[5, 51, 51], [5, 51, 51]], [[5, 70, 70], [5, 70, 70]], [[10, 70, 70], [10, 70, 70]], [[51, -4, -7, 50], [51, -4, -7, 50]], [[5, 51, 49], [5, 51, 49]], [[5, 4, 51, 49], [5, 4, 51, 49]], [[2, -5, -8, -5, 12, -8, -8], [2, -5, -8, -5, 12, -8, -8]], [[11], [11]], [[50, 70, 70, 70], [50, 70, 70, 70]], [[50, -7, 70, 50, 70], [50, -7, 70, 50, 70]], [[5, 70, 70, 70], [5, 70, 70, 70]], [[5, -2], [5, -2]], [[12], [12]], [[1, 1], [1, 1]], [[11, 11], [11, 11]], [[50, 70, 70, 70, 70, 50, 70, 50], [50, 70, 70, 70, 70, 50, 70, 50]], [[-2, -2], [-2, -2]], [[11, 11, 11], [11, 11, 11]], [[1, 50, 50], [1, 50, 50]], [[-8, 12], [-8, 12]], [[-2], [-2]], [[3, -8, 12], [3, -8, 12]], [[12, 12], [12, 12]], [[51, -4, -7, 50, 50], [51, -4, -7, 50, 50]], [[5, 5, 51, 49], [5, 5, 51, 49]], [[2, -8, 12, -8], [2, -8, 12, -8]], [[5, 51, 51, 51], [5, 51, 51, 51]], [[3, -7, 12], [3, -7, 12]], [[5, 71, 70, 70], [5, 71, 70, 70]], [[3, -7, 12, 2, 3], [3, -7, 12, 2, 3]], [[-2, 4], [-2, 4]], [[50, 70, 70, 70, 70], [50, 70, 70, 70, 70]], [[-3], [-3]], [[5, 51, 51, 50, 50], [5, 51, 51, 50, 50]], [[51, -4, -6, -4, 50, 51], [51, -4, -6, -4, 50, 51]], [[50, 70, 70, 70, 50, 70, 70, 70], [50, 70, 70, 70, 50, 70, 70, 70]], [[-10, 10], [51, -2]], [[50, 10, 70, 70, 50], [50, 10, 70, 70, 50]], [[10, 1], [10, 1]], [[50, -7, 70, 70], [50, -7, 70, 70]], [[10, 70], [10, 70]], [[4, 4], [4, 4]], [[5, 5, 51, 51, 5], [5, 5, 51, 51, 5]], [[-2, 4, 4], [-2, 4, 4]], [[51, 70, 4], [51, 70, 4]], [[50, -7, 70, 70, -7], [50, -7, 70, 70, -7]], [[51, -4, 1, 50, 50], [51, -4, 1, 50, 50]], [[1, 5, 51, 51, 5, 51, 5], [1, 5, 51, 51, 5, 51, 5]], [[-10, 2, 10], [-10, 2, 10]], [[3], [3]], [[1], [1]], [[5, 51, 51, 51, 5], [5, 51, 51, 51, 5]], [[3, -6, -5, 11, -8, 12, -7, -8], [3, -6, -5, 11, -8, 12, -7, -8]], [[1, 0, 1], [71, 50, 70]], [[3, -6, 71, 11, -8, 12, 70, -7, -8], [3, -6, 71, 11, -8, 12, 70, -7, -8]], [[10, 70, 12, 70, 70], [10, 70, 12, 70, 70]], [[71, 50, 50, 70], [71, 50, 50, 70]], [[3, 51, 49], [3, 51, 49]], [[70], [70]], [[1, 49, 50, 1], [1, 49, 50, 1]], [[2, -5, -8, -5, 12, -8, -5], [2, -5, -8, -5, 12, -8, -5]], [[4, 4, 4], [4, 4, 4]], [[-2, -2, -2], [-2, -2, -2]], [[4, 4, 4, 4, 4], [4, 4, 4, 4, 4]], [[69, 10, 70, 70, 70], [69, 10, 70, 70, 70]], [[51, -4, -6, -4, 50, 51, 50], [51, -4, -6, -4, 50, 51, 50]], [[5, -6, -4, 51, 51], [5, -6, -4, 51, 51]], [[70, 50, 70, 50], [70, 50, 70, 50]], [[2, -5, -8, 12, -7, -8, -7], [2, -5, -8, 12, -7, -8, -7]], [[-7, 12, -7], [-7, 12, -7]], [[-7, 51, 70, 69, -8], [-7, 51, 70, 69, -8]], [[69, 10, 70, 70, 70, 69, 69], [69, 10, 70, 70, 70, 69, 69]], [[-2, 70, 12, 69, 70], [-2, 70, 12, 69, 70]], [[51, 70, 50, 50, 50, 50], [51, 70, 50, 50, 50, 50]], [[2, 11, 11], [2, 11, 11]], [[5, 4, 51, 49, 5], [5, 4, 51, 49, 5]], [[50, 70, 70, 70, 50, 70, 70], [50, 70, 70, 70, 50, 70, 70]], [[71, 50, 50, 71], [71, 50, 50, 71]], [[70, 71, 50, 10, 70, 70], [70, 71, 50, 10, 70, 70]], [[51, 50, -6, -4, 50, 51, 50], [51, 50, -6, -4, 50, 51, 50]], [[2, -5, -8, -5, 12, -8, -8, -8], [2, -5, -8, -5, 12, -8, -8, -8]]]
results = [[4.0, 2.5, 2.0], [3.0, 0.5], [1.8, 1.7142857142857142], [0.0, 0.0], [-2.0, -5.0], [-2.5, 2.0, 4.0], [1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.0, 0.014285714285714285], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0], [1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0], [1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0], [1.0], [1.0, 1.0, 1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [-0.19607843137254902, -5.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0], [1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [0.014084507042253521, 0.0, 0.014285714285714285], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "div_list"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]', 'assert div_list([3,2],[1,4])==[3.0, 0.5]', 'assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
