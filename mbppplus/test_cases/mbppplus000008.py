import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]], [[[1, 2, 3], [-2, 4, -5], [1, -1, 1]]], [[[5, 8, 9], [6, 4, 3], [2, 1, 4]]], [[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991]]], [[[9, 8, 7], [6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5]]], [[[5, -2, 4], [1, -3, 7], [-6, 8, -1], [0, 9, -5]]], [[[11, -5, 23, 0], [6, 9, -8, 15], [-2, 10, 7, -4], [20, -3, 1, 18]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992], [999997, 999996, 999995]]], [[[-2, 10, 7, -4], [20, -3, 1, 18]]], [[[1, -3, 7], [-6, 8, -1]]], [[[6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5]]], [[[-5, -8, -9], [-6, -4, -3], [-5, -8, -9]]], [[[-5, -8, -9]]], [[[1000000, 999999, 999998], [999994, 999993, 999999998], [999997, 999996, 999995], [999994, 999993, 999999998], [999997, 999996, 999995]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997]]], [[[-5, -8, -9, -9]]], [[[-6, -4, -3], [-2, -1, -4]]], [[[-5, -8, -9, -9, -5]]], [[[-5, -8, -9, -9], [-5, -8, -9, -9]]], [[[20, -3, 1, 18]]], [[[6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992], [1000000, 999999, 999998]]], [[[3, 2, 1], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[-6, -4, -3], [-2, -1, -4], [-2, -1, -4]]], [[[-5, -8, -9], [-2, -1, -4]]], [[[999995, -1, -2], [6, 5, 4], [3, 2, 1], [999995, -1, -2], [-3, -4, -5], [999995, -1, -2]]], [[[-5, -8, -9], [999999999, -1, -4]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[1000000, 999999, 999998], [999997, 999996, 999995]]], [[[-5, -8, -9, -9, -5], [-5, -8, -9, -9, -5]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[-5, -8, -9], [-6, -4, -3], [-5, -8, -9], [-5, -8, -9]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999994, 999993, 1], [999997, 999996, 999995], [999994, 999993, 1], [999997, 999996, 999995]]], [[[5, -2, 4], [-6, 8, -1], [0, 9, -5]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992], [999997, 999996, 999995], [1000000, 999999, 999998]]], [[[-5, -8, 999999991], [-6, -4, -3], [-5, -8, 999999991], [-5, -8, 999999991]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999994, 999993, 1], [999997, 999996, 999995], [999997, 999996, 999995], [999997, 999996, 999995]]], [[[-9, 20, -3, 1, 18]]], [[[5, -2, 4], [-6, 8, -1]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999994, 999993, 1], [999995, 999996, 999995], [999995, 999996, 999995], [999995, 999996, 999995]]], [[[999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997]]], [[[9, 8, 7], [6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [3, 2, 1]]], [[[0, 0, -6, 8, -1], [0, 0, -6, 8, -1], [0, 0, -6, 8, -1]]], [[[-1, 999999999, -1, -4], [-1, 999999999, -1, -4]]], [[[6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [3, 2, 1]]], [[[-5, -8, 2, -9], [-5, -8, 2, -9], [-5, -8, 2, -9]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [-3, -4, -5], [3, 2, 1], [3, 2, 1]]], [[[-5, -8, -9, -9], [-5, -8, -9, -9], [-5, -8, -9, -9]]], [[[9, 8, 7], [6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[-7, -4, -3], [-7, -4, -3]]], [[[999999996, 999999994, 999999994], [999999993, 999999992, 999999991]]], [[[-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991]]], [[[0, 6, 0, -6, 8, -1], [0, 6, 0, -6, 8, -1], [0, 6, 0, -6, 8, -1]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [-3, -4, -5], [5, 2, 1], [5, 2, 1], [0, -1, -2]]], [[[-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5]]], [[[0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1]]], [[[-5, -8, -9, -5]]], [[[-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6]]], [[[6, 5, 4], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[10, -1, -2], [3, 2, 1], [10, -1, -2], [10, -1, -2], [-3, -4, -5], [10, -1, -2], [10, -1, -2]]], [[[1000000, 999999, 999998], [999994, 999993, 999999998], [999997, 999996, 999995], [999994, 999993, 999999998], [999997, 999996, 999995], [999994, 999993, 999999998]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [3, 2, 1], [3, 2, 1]]], [[[999997, 999996, 999995]]], [[[20, -3, 18]]], [[[999999996, 999999995, 999999994], [-1, 999999992, 999999991], [-1, 999999992, 999999991], [999999999, 999999998, 999999997]]], [[[-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8]]], [[[-5, -9, -8, -9, -9, -5], [-5, -9, -8, -9, -9, -5]]], [[[5, -2, 4], [-6, 8, -1], [5, -2, 4]]], [[[999994, 999993, 1], [999994, 999993, 1], [999995, 999996, 999995], [999995, 999996, 999995], [999995, 999996, 999995]]], [[[-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8]]], [[[-5, -9, 2, -9], [-5, -9, 2, -9], [-5, -9, 2, -9]]], [[[20, -3, 1, 18], [20, -3, 1, 18]]], [[[-3, 1, 18], [-3, 1, 18], [-3, 1, 18], [-3, 1, 18]]], [[[999997, 999996, 999995], [999994, 10, 999992], [999997, 999996, 999995]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [-3, -4, -5]]], [[[0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1]]], [[[-5, -8, -9], [-5, -8, -9]]], [[[-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4], [-2, -1, -4]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [1000000, 999999, 999998]]], [[[-6, 8, -1, -1]]], [[[9, 8, 7], [0, -1, -2], [-3, -4, -5]]], [[[0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8]]], [[[-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997], [999999996, 999999995, 999999994]]], [[[-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8]]], [[[6, 5, 4], [0, 0, -2], [3, 2, 1], [0, 0, -2], [-3, -4, -5], [0, 0, -2]]], [[[-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18]]], [[[11, -5, 23, 0], [-2, 10, 7, -4]]], [[[-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10]]], [[[8, 1, 7], [8, 1, 7], [8, 1, 7], [-6, 8, -1]]], [[[-1, 999999999, -1, -4], [-1, 999999999, -1, -4], [-1, 999999999, -1, -4]]], [[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4], [-5, -8, -9]]], [[[-4, -3], [-4, -3], [-4, -3]]], [[[0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 1], [999997, 999996, 999995]]], [[[-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2]]], [[[999999998, -8, -8, -9, 18, -8, -6], [999999998, -8, -8, -9, 18, -8, -6]]], [[[-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9]]], [[[-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9]]], [[[-9, 20, -3, 1, 1000000, 18]]], [[[-5, -8, 2], [-5, -8, 2], [-5, -8, 2]]], [[[-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9]]]]
results = [[[1, 1, 1], [1, 2, 3], [2, 4, 5]], [[-2, 4, -5], [1, -1, 1], [1, 2, 3]], [[2, 1, 4], [6, 4, 3], [5, 8, 9]], [[-5, -8, -9], [-6, -4, -3], [-2, -1, -4]], [[999994, 999993, 999992], [999997, 999996, 999995], [1000000, 999999, 999998]], [[999999993, 999999992, 999999991], [999999996, 999999995, 999999994], [999999999, 999999998, 999999997]], [[-3, -4, -5], [0, -1, -2], [3, 2, 1], [6, 5, 4], [9, 8, 7]], [[-6, 8, -1], [0, 9, -5], [1, -3, 7], [5, -2, 4]], [[-2, 10, 7, -4], [6, 9, -8, 15], [11, -5, 23, 0], [20, -3, 1, 18]], [[999999993, 999999992, 999999991], [999999996, 999999995, 999999994], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997]], [[999994, 999993, 999992], [999997, 999996, 999995], [999997, 999996, 999995], [1000000, 999999, 999998]], [[-2, 10, 7, -4], [20, -3, 1, 18]], [[-6, 8, -1], [1, -3, 7]], [[-3, -4, -5], [0, -1, -2], [3, 2, 1], [6, 5, 4]], [[-5, -8, -9], [-5, -8, -9], [-6, -4, -3]], [[-5, -8, -9]], [[999997, 999996, 999995], [999997, 999996, 999995], [1000000, 999999, 999998], [999994, 999993, 999999998], [999994, 999993, 999999998]], [[999999993, 999999992, 999999991], [999999996, 999999995, 999999994], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997]], [[999999993, 999999992, 999999991], [999999996, 999999995, 999999994], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997]], [[-5, -8, -9, -9]], [[-6, -4, -3], [-2, -1, -4]], [[-5, -8, -9, -9, -5]], [[-5, -8, -9, -9], [-5, -8, -9, -9]], [[20, -3, 1, 18]], [[-3, -4, -5], [0, -1, -2], [0, -1, -2], [3, 2, 1], [6, 5, 4]], [[999994, 999993, 999992], [999997, 999996, 999995], [1000000, 999999, 999998], [1000000, 999999, 999998]], [[-3, -4, -5], [0, -1, -2], [0, -1, -2], [3, 2, 1]], [[-6, -4, -3], [-2, -1, -4], [-2, -1, -4]], [[-5, -8, -9], [-2, -1, -4]], [[-3, -4, -5], [3, 2, 1], [6, 5, 4], [999995, -1, -2], [999995, -1, -2], [999995, -1, -2]], [[-5, -8, -9], [999999999, -1, -4]], [[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]], [[999997, 999996, 999995], [1000000, 999999, 999998]], [[-5, -8, -9, -9, -5], [-5, -8, -9, -9, -5]], [[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]], [[-5, -8, -9], [-5, -8, -9], [-5, -8, -9], [-6, -4, -3]], [[999994, 999993, 1], [999994, 999993, 1], [999994, 999993, 1], [999997, 999996, 999995], [999997, 999996, 999995], [1000000, 999999, 999998]], [[-6, 8, -1], [0, 9, -5], [5, -2, 4]], [[999994, 999993, 999992], [999997, 999996, 999995], [999997, 999996, 999995], [1000000, 999999, 999998], [1000000, 999999, 999998]], [[-6, -4, -3], [-5, -8, 999999991], [-5, -8, 999999991], [-5, -8, 999999991]], [[999994, 999993, 1], [999994, 999993, 1], [999997, 999996, 999995], [999997, 999996, 999995], [999997, 999996, 999995], [1000000, 999999, 999998]], [[-9, 20, -3, 1, 18]], [[-6, 8, -1], [5, -2, 4]], [[999994, 999993, 1], [999994, 999993, 1], [999995, 999996, 999995], [999995, 999996, 999995], [999995, 999996, 999995], [1000000, 999999, 999998]], [[999999993, 999999992, 999999991], [999999996, 999999995, 999999994], [999999999, 999999998, 999999997]], [[-3, -4, -5], [0, -1, -2], [3, 2, 1], [3, 2, 1], [6, 5, 4], [9, 8, 7]], [[0, 0, -6, 8, -1], [0, 0, -6, 8, -1], [0, 0, -6, 8, -1]], [[-1, 999999999, -1, -4], [-1, 999999999, -1, -4]], [[-3, -4, -5], [0, -1, -2], [3, 2, 1], [3, 2, 1], [6, 5, 4]], [[-5, -8, 2, -9], [-5, -8, 2, -9], [-5, -8, 2, -9]], [[-3, -4, -5], [0, -1, -2], [3, 2, 1], [3, 2, 1], [6, 5, 4], [9, 8, 7]], [[-5, -8, -9, -9], [-5, -8, -9, -9], [-5, -8, -9, -9]], [[-3, -4, -5], [0, -1, -2], [0, -1, -2], [3, 2, 1], [6, 5, 4], [9, 8, 7]], [[-7, -4, -3], [-7, -4, -3]], [[999999993, 999999992, 999999991], [999999996, 999999994, 999999994]], [[-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991]], [[0, 6, 0, -6, 8, -1], [0, 6, 0, -6, 8, -1], [0, 6, 0, -6, 8, -1]], [[-3, -4, -5], [0, -1, -2], [0, -1, -2], [5, 2, 1], [5, 2, 1], [6, 5, 4], [9, 8, 7]], [[-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5]], [[0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1]], [[-5, -8, -9, -5]], [[-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6]], [[-3, -4, -5], [0, -1, -2], [0, -1, -2], [6, 5, 4]], [[-3, -4, -5], [3, 2, 1], [10, -1, -2], [10, -1, -2], [10, -1, -2], [10, -1, -2], [10, -1, -2]], [[999997, 999996, 999995], [999997, 999996, 999995], [1000000, 999999, 999998], [999994, 999993, 999999998], [999994, 999993, 999999998], [999994, 999993, 999999998]], [[0, -1, -2], [3, 2, 1], [3, 2, 1], [6, 5, 4], [9, 8, 7]], [[999997, 999996, 999995]], [[20, -3, 18]], [[-1, 999999992, 999999991], [-1, 999999992, 999999991], [999999996, 999999995, 999999994], [999999999, 999999998, 999999997]], [[-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8]], [[-5, -9, -8, -9, -9, -5], [-5, -9, -8, -9, -9, -5]], [[-6, 8, -1], [5, -2, 4], [5, -2, 4]], [[999994, 999993, 1], [999994, 999993, 1], [999995, 999996, 999995], [999995, 999996, 999995], [999995, 999996, 999995]], [[-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8]], [[-5, -9, 2, -9], [-5, -9, 2, -9], [-5, -9, 2, -9]], [[20, -3, 1, 18], [20, -3, 1, 18]], [[-3, 1, 18], [-3, 1, 18], [-3, 1, 18], [-3, 1, 18]], [[999994, 10, 999992], [999997, 999996, 999995], [999997, 999996, 999995]], [[-3, -4, -5], [0, -1, -2], [6, 5, 4], [9, 8, 7]], [[0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1]], [[-5, -8, -9], [-5, -8, -9]], [[-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2]], [[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]], [[-5, -8, -9], [-6, -4, -3], [-2, -1, -4], [-2, -1, -4]], [[999997, 999996, 999995], [1000000, 999999, 999998], [1000000, 999999, 999998]], [[-6, 8, -1, -1]], [[-3, -4, -5], [0, -1, -2], [9, 8, 7]], [[0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8]], [[-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9]], [[999999993, 999999992, 999999991], [999999996, 999999995, 999999994], [999999996, 999999995, 999999994], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997]], [[-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8]], [[-3, -4, -5], [0, 0, -2], [0, 0, -2], [0, 0, -2], [3, 2, 1], [6, 5, 4]], [[-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18]], [[-2, 10, 7, -4], [11, -5, 23, 0]], [[-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10]], [[-6, 8, -1], [8, 1, 7], [8, 1, 7], [8, 1, 7]], [[-1, 999999999, -1, -4], [-1, 999999999, -1, -4], [-1, 999999999, -1, -4]], [[-5, -8, -9], [-5, -8, -9], [-6, -4, -3], [-2, -1, -4]], [[-4, -3], [-4, -3], [-4, -3]], [[0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1]], [[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]], [[999994, 999993, 1], [999994, 999993, 1], [999997, 999996, 999995], [999997, 999996, 999995], [1000000, 999999, 999998]], [[-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2]], [[999999998, -8, -8, -9, 18, -8, -6], [999999998, -8, -8, -9, 18, -8, -6]], [[-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9]], [[-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9]], [[-9, 20, -3, 1, 1000000, 18]], [[-5, -8, 2], [-5, -8, 2], [-5, -8, 2]], [[-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9]]]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "sort_matrix"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]', 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]', 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
