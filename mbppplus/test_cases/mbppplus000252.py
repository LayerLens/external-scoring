import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [((4, 5, (7, 6, (2, 4)), 6, 8),), ((5, 6, (8, 7, (4, 8)), 7, 9),), ((5, 6, (9, 8, (4, 6)), 8, 10),), ((1, 2, 3, (4, 5, (6, 7, (8, 9, (10, 11, (12, 13, (14, 15, (16, 17, (18, 19, (20,)))))))))),), ((1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((),), ((1, (2, (3, (4, (5, (6,)))), (7, (8, (9, (10, (11, (12, (13, (14,)))))))))),), ((1, ((3, (4, (5, (6,)))), (7, (8, (9, (10, (11, (12, (13, (14,))))))))), (2, (3, (4, (5, (6,)))), (7, (8, (9, (10, (11, (12, (13, (14,)))))))))),), ((1, 1),), ((15, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((False, False, True, True, True, False, True, False, True),), ((15, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 0),), ((5, (2, (3, (4, (5, (6,)))), (7, (8, (9, (10, (11, (12, (13, (14,)))))))))),), ((1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 0, 1),), ((17, 1),), ((15, 1),), ((66.96634945742454, 84.16107219904362),), ((1, 2, (3, 4, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 0),), ((1, 2, 4, (4, 5, (6, 7, (8, 9, (10, 11, (12, 13, (14, 15, (16, 17, (18, 19, (20,)))))))))),), ((1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 0, 1, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((False, False, True, True, True, True, False, True),), ((-73.88041948495652, 57.63424841759968),), ((15, 14, 1),), ((15, 1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((17,),), ((17, 1, 1),), ((19, 1, (2, (3, (4, (5, (6,)))), (7, (8, (9, (10, (11, (12, (13, (14,)))))))))),), ((66.96634945742454, 57.63424841759968),), ((18, 17, 1),), ((0, 17, 1),), ((1, 12, 2, 0, 1, 1),), (((3, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 0, 2),), ((1, 2, (8, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((19, 0, 1, (2, (3, (4, (5, (6,)))), (7, (8, (9, (10, (11, (12, (13, (14,)))))))))),), ((2, (8, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((1, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((2, 1, 2, (8, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((31.494961367217638,),), ((1, 2),), ((1, 2, 1, 1),), ((1, 0),), ((15, 14, 1, 14),), ((15, 1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 1),), ((1, 2, 1),), ((2, 15, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((1, 2, (4, 5, (6, 7, (8, 9, (10, 11, (12, 13, (14, 15, (16, 17, (18, 19, (20,)))))))))),), ((19, 1),), ((1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 0, 1, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 0),), ((1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 9, 1),), ((-73.88041948495652, -74.13986345025306, 57.63424841759968),), ((15, 1, 17, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((-73.88041948495652, 57.63424841759968, 57.63424841759968),), ((-73.88041948495652, 31.494961367217638, 57.63424841759968),), ((15, 1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 1, 2),), ((1, 2, (3, 4, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), -1, 0),), ((18, 1, 1),), ((1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 0, 0),), ((1, 3, (4, 5, (6, 7, (8, 9, (10, 11, (12, 13, (14, 15, (16, 17, (18, 19, (20,)))))))))),), ((2,),), ((2, 1, 2, (8, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (2, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((19, 0, 1),), ((18, 1, 1, 18),), ((2, 15, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 15, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((3, 1, 2, (8, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (2, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (8, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((1, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 9, 1),), ((18, 1, 1, 1),), ((1, 2, (4, 5, (6, 7, (8, 9, (10, 11, (12, 13, (14, 15, (16, 17, (18, 19, (20,))))))))), 1),), ((5, 1, 2, 14, 10, 1, 1),), ((-73.88041948495652, 57.63424841759968, 84.16107219904362),), ((3, 1, 2, (8, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (2, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (8, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 1),), ((2, 1, 2, (8, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (2, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 2),), ((1, 12, 2, 0, 1, 1, 12),), ((1, 1, 1),), ((1, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), (((3, 4, 21), 17, 1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 0, 1, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((15, 2, (4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((2, 2),), ((2, 2, (3, 4, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 0),), ((18, 1, 1, 1, 1),), ((1, 2, (3, 4, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), -1, 0, (3, 4, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((1, 12, 2, 0, 1, 1, 12, 12),), ((2, 1, 2, (8, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((-73.88041948495652, 57.63424841759968, 57.63424841759968, 57.63424841759968),), (((3, (3, (4, (5, (6,)))), (7, (8, (9, (10, (11, (12, (13, (14,))))))))), 9, ((3, (4, (5, (6,)))), (7, (8, (9, (10, (11, (12, (13, (14,))))))))), (2, (3, (4, (5, (6,)))), (7, (8, (9, (10, (11, (12, (13, (14,)))))))))),), ((15, 16, 14, 1, 14),), ((1, 3, (4, 5, (6, 7, (8, 9, (10, 11, (12, 13, (14, 15, (16, 17, (18, 19, (20,))))))))), (4, 5, (6, 7, (8, 9, (10, 11, (12, 13, (14, 15, (16, 17, (18, 19, (20,))))))))), 2, 1),), ((1, 13, 2, 0, 1, 1),), ((1, 2, 14, 10, 1, 1),), ((15, 14),), ((0, 2),), ((2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((4, 2, 3, (4, 5, (6, 7, (8, 9, (10, 11, (12, 13, (14, 15, (16, 17, (18, 19, (20,)))))))))),), ((2, 2, (3, 4, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 13, 0),), ((-73.88041948495652, -74.13986345025306, 57.63424841759968, -74.13986345025306),), ((-73.88041948495652, 57.63424841759968, 84.16107219904362, 84.16107219904362, 84.16107219904362),), ((2, 15, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 22)),), ((1, 15, 2, 0, 1, 1, 1),), ((5, (1, (3, (4, (5, (6,)))), (7, (8, (9, (10, (11, (12, (13, (14,)))))))))),), ((15, 1, 2, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 1, 1),), ((12, 2, (4, 5, (6, 7, (8, 9, (10, 11, (12, 13, (14, 15, (16, 17, (18, 19, (20,)))))))))),), ((17, 1, 17),), ((5, ((3, 15, (4, (5, (6,)))), (7, (8, (9, (10, (11, (12, (13, (14,)))))))))),), ((1, 9, 1),), ((1, 16, 15, 2, 0, 1, 1, 1),), ((1, 2, (8, 3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21), 3, (3, 4, (5, 6, (7, 8, (9, 10, (11, 12, (13, 14, (15, 16, (17, 18, (19, 20)))))))), 21)),), ((1, 15, 2, 0, 1, 1),)]
results = [(4, (6, (2, 4)), 6, 8), (6, (8, (4, 8))), (6, (8, (4, 6)), 8, 10), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (), ((2, ((4, ((6,),)),), ((8, ((10, ((12, ((14,),)),)),)),)),), ((((4, ((6,),)),), ((8, ((10, ((12, ((14,),)),)),)),)), (2, ((4, ((6,),)),), ((8, ((10, ((12, ((14,),)),)),)),))), (), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (False, False, False, False), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0), ((2, ((4, ((6,),)),), ((8, ((10, ((12, ((14,),)),)),)),)),), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0), (), (), (), (2, (4, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0), (2, 4, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (False, False, False), (), (14,), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (), (), ((2, ((4, ((6,),)),), ((8, ((10, ((12, ((14,),)),)),)),)),), (), (18,), (0,), (12, 2, 0), (((6, (8, (10, (12, (14, (16, (18, (20,)))))))),), 2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0, 2), (2, (8, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (0, (2, ((4, ((6,),)),), ((8, ((10, ((12, ((14,),)),)),)),))), (2, (8, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), ((4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))),), (2, 2, (8, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (), (2,), (2,), (0,), (14, 14), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2,), (2, 2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (), (), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 2), (2, (4, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0), (18,), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0, 0), ((4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))),), (2,), (2, 2, (8, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (2, 4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (0,), (18, 18), (2, 2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2, (8, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (2, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (8, 4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), ((4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))),), (18,), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2, 14, 10), (), (2, (8, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (2, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (8, 4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2, 2, (8, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (2, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 2), (12, 2, 0, 12), (), ((4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), ((4,), 2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2, 2), (2, 2, (4, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0), (18,), (2, (4, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0, (4, 4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (12, 2, 0, 12, 12), (2, 2, (8, 4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (), ((((4, ((6,),)),), ((8, ((10, ((12, ((14,),)),)),)),)), (((4, ((6,),)),), ((8, ((10, ((12, ((14,),)),)),)),)), (2, ((4, ((6,),)),), ((8, ((10, ((12, ((14,),)),)),)),))), (16, 14, 14), ((4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 2), (2, 0), (2, 14, 10), (14,), (0, 2), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (4, 2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2, 2, (4, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), 0), (), (), (2, 2, (4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))), 22)), (2, 0), ((((4, ((6,),)),), ((8, ((10, ((12, ((14,),)),)),)),)),), (2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (12, 2, (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (), ((((4, ((6,),)),), ((8, ((10, ((12, ((14,),)),)),)),)),), (), (16, 2, 0), (2, (8, 4, (6, (8, (10, (12, (14, (16, (18, (20,))))))))), (4, (6, (8, (10, (12, (14, (16, (18, (20,)))))))))), (2, 0)]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "even_ele"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)', 'assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))', 'assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
