import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[3, 4], [4, 7], [15, 17], [0, 0], [-1, 0], [-2, 0], [-1, -1], [0, -1], [-2, -1], [-3, -2], [-1, -2], [-2, -2], [-3, -3], [-1, -3], [0, -2], [0, -43], [-3, -43], [-3, 0], [-2, -42], [-3, -1], [-42, -2], [False, True], [-4, -3], [-4, 0], [-1, -5], [-43, -1], [-4, -4], [-1, True], [-44, -1], [-44, 0], [-44, -43], [0, -3], [-4, -6], [-3, True], [-1, -44], [True, True], [-17.125672842110614, -29.061245837454592], [-6, -1], [-6, -4], [-30.014161875705714, -29.844058340125226], [True, False], [-4, -42], [True, -1], [-5, -1], [-2, True], [-6, -6], [0, -4], [True, -6], [-6, -2], [-2, -44], [-17.125672842110614, -29.844058340125226], [True, 0], [-43, -43], [-42, -42], [-44, -6], [0, -44], [-30.48490733916856, -30.014161875705714], [-41, -41], [-45, -1], [-17.125672842110614, -17.125672842110614], [-42, -3], [-5, -4], [-5, -42], [15, -1], [-3, -42], [-2, -58], [-30.014161875705714, -30.48490733916856], [-5, False], [-45, -42], [-6, -42], [-43, -3], [-2, -3], [2, 1], [-29.061245837454592, -29.061245837454592], [True, -3], [-43, 0], [-30.48490733916856, -29.844058340125226], [-6, True], [0, -58], [-29.424172857337535, -29.844058340125226], [-30.014161875705714, -30.014161875705714], [-24.538402342109205, -30.124577805743012], [-3, -40], [-2, -57], [1, 0], [-45, -41], [-30.66985191236388, -30.69188534995813], [-4, -43], [-3, -58], [-34.537090470985355, -34.537090470985355], [-44, -44], [-23.70834416493064, -29.061245837454592], [2, 0], [-17.125672842110614, -11.063242818653714], [-25.188937667492283, -29.844058340125226], [-6, -57], [-25.188937667492283, -40.47027277921793], [-43, -42], [1, -5], [-43, -44], [-40, -3], [-45, 0], [-6, -58], [-5, 0]]
results = [((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)), ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j)), ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j)), ((0.0, 0.0), (-2+2.4492935982947064e-16j)), ((1.0, 3.141592653589793), (-2+2.4492935982947064e-16j)), ((2.0, 3.141592653589793), (-2+2.4492935982947064e-16j)), ((1.4142135623730951, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((1.0, -1.5707963267948966), (-2+2.4492935982947064e-16j)), ((2.23606797749979, -2.677945044588987), (-2+2.4492935982947064e-16j)), ((3.605551275463989, -2.5535900500422257), (-2+2.4492935982947064e-16j)), ((2.23606797749979, -2.0344439357957027), (-2+2.4492935982947064e-16j)), ((2.8284271247461903, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((4.242640687119285, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((3.1622776601683795, -1.892546881191539), (-2+2.4492935982947064e-16j)), ((2.0, -1.5707963267948966), (-2+2.4492935982947064e-16j)), ((43.0, -1.5707963267948966), (-2+2.4492935982947064e-16j)), ((43.104524124504614, -1.6404509005234649), (-2+2.4492935982947064e-16j)), ((3.0, 3.141592653589793), (-2+2.4492935982947064e-16j)), ((42.04759208325728, -1.6183794300718801), (-2+2.4492935982947064e-16j)), ((3.1622776601683795, -2.819842099193151), (-2+2.4492935982947064e-16j)), ((42.04759208325728, -3.0940095503128098), (-2+2.4492935982947064e-16j)), ((1.0, 1.5707963267948966), (-2+2.4492935982947064e-16j)), ((5.0, -2.498091544796509), (-2+2.4492935982947064e-16j)), ((4.0, 3.141592653589793), (-2+2.4492935982947064e-16j)), ((5.0990195135927845, -1.7681918866447774), (-2+2.4492935982947064e-16j)), ((43.01162633521314, -3.1183410307793302), (-2+2.4492935982947064e-16j)), ((5.656854249492381, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((1.4142135623730951, 2.356194490192345), (-2+2.4492935982947064e-16j)), ((44.01136216933077, -3.118869292748152), (-2+2.4492935982947064e-16j)), ((44.0, 3.141592653589793), (-2+2.4492935982947064e-16j)), ((61.5223536610881, -2.3676882369073753), (-2+2.4492935982947064e-16j)), ((3.0, -1.5707963267948966), (-2+2.4492935982947064e-16j)), ((7.211102550927978, -2.158798930342464), (-2+2.4492935982947064e-16j)), ((3.1622776601683795, 2.819842099193151), (-2+2.4492935982947064e-16j)), ((44.01136216933077, -1.5935196876365376), (-2+2.4492935982947064e-16j)), ((1.4142135623730951, 0.7853981633974483), (-2+2.4492935982947064e-16j)), ((33.73195339614913, -2.1033079808279322), (-2+2.4492935982947064e-16j)), ((6.082762530298219, -2.976443976175166), (-2+2.4492935982947064e-16j)), ((7.211102550927978, -2.5535900500422257), (-2+2.4492935982947064e-16j)), ((42.32632433025415, -2.359036256570777), (-2+2.4492935982947064e-16j)), ((1.0, 0.0), (-2+2.4492935982947064e-16j)), ((42.190046219457976, -1.6657480331376529), (-2+2.4492935982947064e-16j)), ((1.4142135623730951, -0.7853981633974483), (-2+2.4492935982947064e-16j)), ((5.0990195135927845, -2.9441970937399127), (-2+2.4492935982947064e-16j)), ((2.23606797749979, 2.677945044588987), (-2+2.4492935982947064e-16j)), ((8.48528137423857, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((4.0, -1.5707963267948966), (-2+2.4492935982947064e-16j)), ((6.082762530298219, -1.4056476493802699), (-2+2.4492935982947064e-16j)), ((6.324555320336759, -2.819842099193151), (-2+2.4492935982947064e-16j)), ((44.04543109109048, -1.6162196062164735), (-2+2.4492935982947064e-16j)), ((34.40866879877516, -2.0917573503292184), (-2+2.4492935982947064e-16j)), ((1.0, 0.0), (-2+2.4492935982947064e-16j)), ((60.81118318204309, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((59.39696961966999, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((44.40720662234904, -3.0060649396042924), (-2+2.4492935982947064e-16j)), ((44.0, -1.5707963267948966), (-2+2.4492935982947064e-16j)), ((42.78059710404659, -2.3639753696267376), (-2+2.4492935982947064e-16j)), ((57.982756057296896, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((45.0111097397076, -3.1193740882630743), (-2+2.4492935982947064e-16j)), ((24.21935879807742, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((42.1070065428546, -3.070285188804503), (-2+2.4492935982947064e-16j)), ((6.4031242374328485, -2.4668517113662407), (-2+2.4492935982947064e-16j)), ((42.2965719651132, -1.6892862859530344), (-2+2.4492935982947064e-16j)), ((15.033296378372908, -0.06656816377582381), (-2+2.4492935982947064e-16j)), ((42.1070065428546, -1.642103791580187), (-2+2.4492935982947064e-16j)), ((58.034472514187634, -1.6052654277944047), (-2+2.4492935982947064e-16j)), ((42.78059710404659, -2.348413610757952), (-2+2.4492935982947064e-16j)), ((5.0, 3.141592653589793), (-2+2.4492935982947064e-16j)), ((61.554853586049575, -2.390663591191853), (-2+2.4492935982947064e-16j)), ((42.42640687119285, -1.7126933813990606), (-2+2.4492935982947064e-16j)), ((43.104524124504614, -3.071938079861225), (-2+2.4492935982947064e-16j)), ((3.605551275463989, -2.158798930342464), (-2+2.4492935982947064e-16j)), ((2.23606797749979, 0.4636476090008061), (-2+2.4492935982947064e-16j)), ((41.09880800278694, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((3.1622776601683795, -1.2490457723982544), (-2+2.4492935982947064e-16j)), ((43.0, 3.141592653589793), (-2+2.4492935982947064e-16j)), ((42.661427468926675, -2.366816666276124), (-2+2.4492935982947064e-16j)), ((6.082762530298219, 2.976443976175166), (-2+2.4492935982947064e-16j)), ((58.0, -1.5707963267948966), (-2+2.4492935982947064e-16j)), ((41.91001988244908, -2.349110113793349), (-2+2.4492935982947064e-16j)), ((42.44643478788451, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((38.85387210404511, -2.2543549975671655), (-2+2.4492935982947064e-16j)), ((40.11234224026316, -1.6456561745056635), (-2+2.4492935982947064e-16j)), ((57.0350769263968, -1.605869657328122), (-2+2.4492935982947064e-16j)), ((1.0, 0.0), (-2+2.4492935982947064e-16j)), ((60.876925020897694, -2.402672621543348), (-2+2.4492935982947064e-16j)), ((43.3893033207645, -2.3558354156675625), (-2+2.4492935982947064e-16j)), ((43.18564576337837, -1.6635526469830404), (-2+2.4492935982947064e-16j)), ((58.077534382926416, -1.6224744112773266), (-2+2.4492935982947064e-16j)), ((48.842821748974075, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((62.22539674441618, -2.356194490192345), (-2+2.4492935982947064e-16j)), ((37.50522087213689, -2.255101153494731), (-2+2.4492935982947064e-16j)), ((2.0, 0.0), (-2+2.4492935982947064e-16j)), ((20.38833028866018, -2.568032129108432), (-2+2.4492935982947064e-16j)), ((39.0531739942557, -2.2718075620417877), (-2+2.4492935982947064e-16j)), ((57.3149195236284, -1.6756732655251305), (-2+2.4492935982947064e-16j)), ((47.66891607369649, -2.1275280665360463), (-2+2.4492935982947064e-16j)), ((60.108235708594876, -2.3679586533421038), (-2+2.4492935982947064e-16j)), ((5.0990195135927845, -1.373400766945016), (-2+2.4492935982947064e-16j)), ((61.5223536610881, -2.3447007434773144), (-2+2.4492935982947064e-16j)), ((40.11234224026316, -3.066732805879026), (-2+2.4492935982947064e-16j)), ((45.0, 3.141592653589793), (-2+2.4492935982947064e-16j)), ((58.309518948453004, -1.6738779353175968), (-2+2.4492935982947064e-16j)), ((5.0, 3.141592653589793), (-2+2.4492935982947064e-16j))]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "polar_rect"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))', 'assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))', 'assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
