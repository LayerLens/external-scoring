import numpy as np
[]

def is_floats(x) -> bool:
    """Helper function to check float values for comparison"""
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False

def assertion(out, exp, atol):
    """Custom assertion function that handles float comparisons"""
    # Special handling for booleans
    if isinstance(out, bool) or isinstance(exp, bool):
        assert out == exp, f"out: {out}, exp: {exp}"
        return
        
    # Float comparison setup
    if atol == 0 and is_floats(exp):
        atol = 1e-6
    
    # Handle set conversion for sequences
    if isinstance(out, (list, tuple)) and isinstance(exp, (list, tuple)):
        out = set(out)
        exp = set(exp)
    
    # Do the actual comparison
    if out != exp and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert out == exp, f"out: {out}, exp: {exp}"

# Test data
inputs = [[[11, 33, 50]], [[-1, 2, 3, 4, 5, 6]], [[10, 15, 20, 25]], [[1000000, 999999, 100000, 99999]], [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]], [[999999999999999999999, 888888888888888888888, 777777777777777777777]], [[123456789123456789123456789, 987654321987654321987654321]], [[999999999999999999999, 888888888888888888888, 999999999999999999999, 777777777777777777777]], [[999999999999999999999, 99999, 999999999999999999999, 777777777777777777777]], [[999999999999999999998, 999999999999999999999, 777777777777777777777, 999999999999999999999, 777777777777777777777]], [[99999, 123456789123456789123456789]], [[99999, 888888888888888888888]], [[999999999999999999999, 888888888888888888888, 999999999999999999998, 777777777777777777777]], [[987654321987654321987654321]], [[999999999999999999999, 99999, 999999999999999999998, 777777777777777777777]], [[99999, 888888888888888888888, 99999]], [[987654321987654321987654321, 987654321987654321987654321]], [[9, 999999999999999999999, 99999, 888888888888888888888]], [[999999999999999999999, 100000, 999999999999999999999, 777777777777777777777]], [[99999, 888888888888888888888, 888888888888888888888]], [[1000000, 999999, 100000, 100000]], [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 9]], [[99999, 987654321987654321987654321, 987654321987654321987654321, 987654321987654321987654321]], [[999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 1000000000000000000000]], [[999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 999999999999999999999, 777777777777777777778, 999999999999999999999]], [[1000000, 999999, 100000]], [[99999, 987654321987654321987654321, 987654321987654321987654321]], [[999999999999999999999, 100000, 999999999999999999999, 100000, 999999999999999999999]], [[1000000, 99999, 987654321987654321987654321, 987654321987654321987654321]], [[1000000, 999999, 999999, 1000000, 100000, 99999]], [[888888888888888888888, 99999, 99999]], [[888888888888888888888, 777777777777777777777]], [[99999, 987654321987654321987654321, 987654321987654321987654321, 1000000]], [[999999999999999999998, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 888888888888888888888, 777777777777777777776, 777777777777777777777]], [[123456789123456789123456789, 99999, 888888888888888888888, 99999]], [[999999999999999999998, 999999999999999999999, 999999999999999999999, 777777777777777777777, 999999999999999999999]], [[999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 777777777777777777778, 999999999999999999999]], [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]], [[999999999999999999999, 987654321987654321987654321, 100000, 999999999999999999999, 100000, 999999999999999999999]], [[987654321987654321987654321, 987654321987654321987654322]], [[1000000000000000000000, 999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 999999999999999999999, 777777777777777777778, 999999999999999999999]], [[1000000000000000000000, 99999, 777777777777777777777]], [[999999999999999999998, 888888888888888888888, 777777777777777777777]], [[8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]], [[123456789123456789123456789, 777777777777777777776]], [[1000000, 999999, 100000, 999999, 999999]], [[999999999999999999999, 99999, 999999999999999999999, 1000000000000000000000]], [[1000000, 99999, 987654321987654321987654321]], [[999999999999999999999, 99999, 777777777777777777778, 999999999999999999998, 777777777777777777777]], [[100001, 999999999999999999999, 987654321987654321987654321, 100000, 999999999999999999999, 100000, 999999999999999999999]], [[999999999999999999999, 99999, 1000000000000000000000, 777777777777777777777, 777777777777777777778, 999999999999999999999]], [[888888888888888888888, 777777777777777777778, 99999, 99999]], [[9, 999999999999999999999, 99999]], [[999999999999999999999, 99999, 987654321987654321987654321]], [[8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9]], [[999999999999999999999, 999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 1000000000000000000000, 777777777777777777777]], [[999999999999999999998, 999999999999999999999, 777777777777777777777, 999999999999999999999, 777777777777777777777, 999999999999999999999]], [[999999999999999999999, 99999, 777777777777777777778, 999999999999999999998, 777777777777777777777, 999999999999999999999]], [[999999999999999999998, 999999999999999999999, 777777777777777777777, 777777777777777777777, 999999999999999999999]], [[888888888888888888888, 777777777777777777777, 777777777777777777777]], [[999999999999999999999, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 99999, 1000000, 777777777777777777777, 999999999999999999999, 777777777777777777778, 999999999999999999999, 999999999999999999999]], [[888888888888888888889, 99999, 99999]], [[777777777777777777779, 888888888888888888888, 777777777777777777778, 99999, 99999]], [[888888888888888888888, 777777777777777777778, 99999, 99999, 888888888888888888889, 99999, 99999]], [[888888888888888888888, 99999]], [[999999999999999999999, 888888888888888888889, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 99999, 999999, 999999999999999999999, 1000000000000000000000]], [[9, 123456789123456789123456789, 999999999999999999999, 99999]], [[999999999999999999998, 999999999999999999999, 999999999999999999999, 999999999999999999999, 999999999999999999999]], [[777777777777777777778]], [[999999999999999999998, 999999999999999999999, 777777777777777777777, 999999999999999999999]], [[8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9]], [[999999999999999999999, 9, 888888888888888888888, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 999999999999999999998, 999999999999999999999, 777777777777777777777, 999999999999999999999, 777777777777777777777, 999999999999999999999]], [[888888888888888888888, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 888888888888888888889, 888888888888888888888, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 99999, 1000000000000000000000, 777777777777777777777, 777777777777777777778, 999999999999999999999, 999999999999999999999, 777777777777777777777]], [[1000000, 999999, 100000, 999999]], [[999999999999999999999, 99999, 1000000000000000000000, 777777777777777777777, 100001, 999999999999999999999]], [[999999, 100000]], [[999999999999999999998, 999999999999999999999, 777777777777777777777, 777777777777777777777, 999999999999999999999, 777777777777777777777]], [[999999999999999999999, 99999, 888888888888888888888]], [[99999, 1000000, 777777777777777777777, 999999999999999999999, 777777777777777777778, 999999999999999999999, 999999999999999999999]], [[1000000, 999999, 999999, 1000000, 100000, 1000000000000000000000, 99999]], [[999999999999999999999, 987654321987654321987654321, 100000, 999999999999999999999, 100000, 999999999999999999998, 100000]], [[999999999999999999999, 100000, 999999999999999999999, 777777777777777777777, 100000]], [[999999999999999999999, 100001, 999999999999999999999, 987654321987654321987654321, 888888888888888888888, 999999999999999999999, 100000, 999999999999999999999]], [[999999999999999999999, 888888888888888888888]], [[999999999999999999999, 888888888888888888887, 888888888888888888888, 888888888888888888888]], [[999999999999999999999, 99999, 999999999999999999999, 777777777777777777777, 777777777777777777778, 999999999999999999999, 999999999999999999999]], [[999999999999999999999, 99998, 999999999999999999999, 777777777777777777777]], [[999999, 8, 100000]], [[999999999999999999999, 777777777777777777776, 999999999999999999999, 1000000000000000000000]], [[888888888888888888888, 888888888888888888888, 888888888888888888888, 888888888888888888888]], [[987654321987654321987654322, 987654321987654321987654322]], [[8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9]], [[999998, 99998, 99999, 888888888888888888888]], [[999999999999999999999, 1000000000000000000000, 777777777777777777777, 777777777777777777778, 999999999999999999999, 999999999999999999999, 777777777777777777777]], [[1000000, 99999, 987654321987654321987654321, 1000000, 99999]], [[987654321987654321987654322, 987654321987654321987654322, 987654321987654321987654322]], [[8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 100000, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9]], [[999999999999999999999, 888888888888888888888, 987654321987654321987654322, 777777777777777777777]], [[999999999999999999999, 987654321987654321987654321, 100000, 999999999999999999999, 999999999999999999998, 100000, 100000]], [[777777777777777777777, 123456789123456789123456789, 777777777777777777776]], [[999999999999999999999, 123456789123456789123456789, 999999999999999999999, 777777777777777777777]]]
results = [113350, -123456, 10152025, 100000099999910000099999, 999999999999999999999999999999, 999999999999999999999888888888888888888888777777777777777777777, 123456789123456789123456789987654321987654321987654321, 999999999999999999999888888888888888888888999999999999999999999777777777777777777777, 99999999999999999999999999999999999999999999999777777777777777777777, 999999999999999999998999999999999999999999777777777777777777777999999999999999999999777777777777777777777, 99999123456789123456789123456789, 99999888888888888888888888, 999999999999999999999888888888888888888888999999999999999999998777777777777777777777, 987654321987654321987654321, 99999999999999999999999999999999999999999999998777777777777777777777, 9999988888888888888888888899999, 987654321987654321987654321987654321987654321987654321, 999999999999999999999999999888888888888888888888, 999999999999999999999100000999999999999999999999777777777777777777777, 99999888888888888888888888888888888888888888888, 1000000999999100000100000, 9999999999999999999999999109999, 99999987654321987654321987654321987654321987654321987654321987654321987654321987654321, 999999999999999999999999999999999999999999999997777777777777777777771000000000000000000000, 99999999999999999999999999999999999999999999999777777777777777777777999999999999999999999777777777777777777778999999999999999999999, 1000000999999100000, 99999987654321987654321987654321987654321987654321987654321, 999999999999999999999100000999999999999999999999100000999999999999999999999, 100000099999987654321987654321987654321987654321987654321987654321, 1000000999999999999100000010000099999, 8888888888888888888889999999999, 888888888888888888888777777777777777777777, 999999876543219876543219876543219876543219876543219876543211000000, 999999999999999999998888888888888888888888888888888888888888888, 999999999999999999999888888888888888888888777777777777777777776777777777777777777777, 1234567891234567891234567899999988888888888888888888899999, 999999999999999999998999999999999999999999999999999999999999999777777777777777777777999999999999999999999, 99999999999999999999999999999999999999999999999777777777777777777777777777777777777777778999999999999999999999, 9999999999999999999999999999, 999999999999999999999987654321987654321987654321100000999999999999999999999100000999999999999999999999, 987654321987654321987654321987654321987654321987654322, 100000000000000000000099999999999999999999999999999999999999999999999777777777777777777777999999999999999999999777777777777777777778999999999999999999999, 100000000000000000000099999777777777777777777777, 999999999999999999998888888888888888888888777777777777777777777, 8999999999999999999999999999999, 123456789123456789123456789777777777777777777776, 1000000999999100000999999999999, 999999999999999999999999999999999999999999999991000000000000000000000, 100000099999987654321987654321987654321, 99999999999999999999999999777777777777777777778999999999999999999998777777777777777777777, 100001999999999999999999999987654321987654321987654321100000999999999999999999999100000999999999999999999999, 999999999999999999999999991000000000000000000000777777777777777777777777777777777777777778999999999999999999999, 8888888888888888888887777777777777777777789999999999, 999999999999999999999999999, 99999999999999999999999999987654321987654321987654321, 8999999999999999999999999998999, 999999999999999999999999999999999999999999999999999999999999999999997777777777777777777771000000000000000000000777777777777777777777, 999999999999999999998999999999999999999999777777777777777777777999999999999999999999777777777777777777777999999999999999999999, 99999999999999999999999999777777777777777777778999999999999999999998777777777777777777777999999999999999999999, 999999999999999999998999999999999999999999777777777777777777777777777777777777777777999999999999999999999, 888888888888888888888777777777777777777777777777777777777777777, 999999999999999999999888888888888888888888888888888888888888888, 999999999999999999999999991000000777777777777777777777999999999999999999999777777777777777777778999999999999999999999999999999999999999999, 8888888888888888888899999999999, 7777777777777777777798888888888888888888887777777777777777777789999999999, 88888888888888888888877777777777777777777899999999998888888888888888888899999999999, 88888888888888888888899999, 999999999999999999999888888888888888888889888888888888888888888888888888888888888888, 999999999999999999999999999999999999999999999999999991000000000000000000000, 912345678912345678912345678999999999999999999999999999, 999999999999999999998999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 777777777777777777778, 999999999999999999998999999999999999999999777777777777777777777999999999999999999999, 89999999999998999999999999998999, 9999999999999999999999888888888888888888888888888888888888888888888888888888888888888, 999999999999999999999999999999999999999998999999999999999999999777777777777777777777999999999999999999999777777777777777777777999999999999999999999, 888888888888888888888888888888888888888888888888888888888888888, 999999999999999999999888888888888888888889888888888888888888888888888888888888888888888888888888888888888, 999999999999999999999999991000000000000000000000777777777777777777777777777777777777777778999999999999999999999999999999999999999999777777777777777777777, 1000000999999100000999999, 999999999999999999999999991000000000000000000000777777777777777777777100001999999999999999999999, 999999100000, 999999999999999999998999999999999999999999777777777777777777777777777777777777777777999999999999999999999777777777777777777777, 99999999999999999999999999888888888888888888888, 999991000000777777777777777777777999999999999999999999777777777777777777778999999999999999999999999999999999999999999, 10000009999999999991000000100000100000000000000000000099999, 999999999999999999999987654321987654321987654321100000999999999999999999999100000999999999999999999998100000, 999999999999999999999100000999999999999999999999777777777777777777777100000, 999999999999999999999100001999999999999999999999987654321987654321987654321888888888888888888888999999999999999999999100000999999999999999999999, 999999999999999999999888888888888888888888, 999999999999999999999888888888888888888887888888888888888888888888888888888888888888, 99999999999999999999999999999999999999999999999777777777777777777777777777777777777777778999999999999999999999999999999999999999999, 99999999999999999999999998999999999999999999999777777777777777777777, 9999998100000, 9999999999999999999997777777777777777777769999999999999999999991000000000000000000000, 888888888888888888888888888888888888888888888888888888888888888888888888888888888888, 987654321987654321987654322987654321987654321987654322, 899999999999989999999999999989999, 9999989999899999888888888888888888888, 9999999999999999999991000000000000000000000777777777777777777777777777777777777777778999999999999999999999999999999999999999999777777777777777777777, 100000099999987654321987654321987654321100000099999, 987654321987654321987654322987654321987654321987654322987654321987654321987654322, 89999999999998910000099999999999998999, 999999999999999999999888888888888888888888987654321987654321987654322777777777777777777777, 999999999999999999999987654321987654321987654321100000999999999999999999999999999999999999999998100000100000, 777777777777777777777123456789123456789123456789777777777777777777776, 999999999999999999999123456789123456789123456789999999999999999999999777777777777777777777]

def ll_run_tests(response_data):
    """
    Main test function for code evaluation.
    Args:
        response_data: Dict containing response code
    Returns:
        bool: True if all test cases pass
    """
    try:
        # Initialize test environment
        global_namespace = {
            'np': np,
            'assertion': assertion,
            'is_floats': is_floats,
            'inputs': inputs,
            'results': results
        }
        
        # Execute solution code
        response_code = response_data.get('parsed_result', response_data.get('result', ''))
        exec(response_code, global_namespace)
        
        # Verify function exists
        func_name = "multiple_to_single"
        if func_name not in global_namespace:
            print(f"Function '{func_name}' not found in response")
            return False
        
        # Execute tests
        solution_func = global_namespace[func_name]
        
        # Run input/output tests
        for i, (test_input, expected) in enumerate(zip(inputs, results)):
            try:
                result = solution_func(*test_input)
                assertion(result, expected, 0)
            except AssertionError as e:
                print(f"Test case {i} failed: {str(e)}")
                print(f"Input: {test_input}")
                print(f"Expected: {expected}")
                print(f"Got: {result}")
                return False
        
        # Run assertion-based tests if any
        for test_case in ['assert multiple_to_single([11, 33, 50])==113350', 'assert multiple_to_single([-1,2,3,4,5,6])==-123456', 'assert multiple_to_single([10,15,20,25])==10152025']:
            try:
                exec(test_case, global_namespace)
            except AssertionError as e:
                print(f"Assertion test failed: {str(e)}")
                print(f"Test case: {test_case}")
                return False
            
        return True
            
    except Exception as e:
        print(f"Error during test execution: {str(e)}")
        return False
